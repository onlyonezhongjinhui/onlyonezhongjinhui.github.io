<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零学Netty：Netty关闭服务</title>
      <link href="/2023/05/10/netty/netty-guan-bi-fu-wu/"/>
      <url>/2023/05/10/netty/netty-guan-bi-fu-wu/</url>
      
        <content type="html"><![CDATA[<h4 id="Netty关闭服务"><a href="#Netty关闭服务" class="headerlink" title="Netty关闭服务"></a>Netty关闭服务</h4><h4 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h4><h5 id="Main-Thread"><a href="#Main-Thread" class="headerlink" title="Main Thread"></a>Main Thread</h5><ol><li>bossGroup.shutdownGracefully()、workerGroup.shutdownGracefully()</li><li>设置NioEventLoop线程的状态为ST_SHUTTING_DOWN</li></ol><h5 id="Worker-Thread"><a href="#Worker-Thread" class="headerlink" title="Worker Thread"></a>Worker Thread</h5><ol><li>NioEventLoop线程检测到状态变为ST_SHUTTING_DOWN后开始执行关闭逻辑</li><li>关闭所有channel</li><li>取消定时任务调度，防止加入新的定时任务  </li><li>执行全部的定时任务、关闭钩子</li><li>关闭selector</li></ol><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><ol><li>sun.nio.ch.SocketChannelImpl.close()关闭所有channel</li><li>关闭所有NioEventLoop线程：退出run方法循环体</li><li>sun.nio.ch.SelectionKeyImpl.close()关闭selector</li></ol><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>优雅关闭时间：DEFAULT_SHUTDOWN_QUIET_PERIOD（2秒），在此期间如果没有定时任务或关闭钩子执行过则直接退出NioEventLoop线程</li><li>可控关闭时间：DEFAULT_SHUTDOWN_TIMEOUT（15秒），超过此时间期限则直接退出NioEventLoop线程，所以会有消息丢失</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    Netty关闭服务的时候尽量做更多的活，但是不能保证所有的活都能干完，否则关闭服务的时间将不可控</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Netty关闭连接</title>
      <link href="/2023/05/09/netty/netty-guan-bi-lian-jie/"/>
      <url>/2023/05/09/netty/netty-guan-bi-lian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="Netty关闭连接"><a href="#Netty关闭连接" class="headerlink" title="Netty关闭连接"></a>Netty关闭连接</h3><h4 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h4><h5 id="Worker-Thread"><a href="#Worker-Thread" class="headerlink" title="Worker Thread"></a>Worker Thread</h5><ol><li>NioEventLoop处理OP_READ事件，读取的数据字节数小于等于0则执行关闭连接操作</li><li>关闭channel，取消绑定channel上注册的所有事件，不再接收新数据</li><li>清空所有队列中的数据（flushedEntry、unflushed）</li><li>触发pipeline.fireChannelInactive()、pipeline.fireChannelUnregistered()事件</li></ol><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>​    sun.nio.ch.SocketChannelImpl.close()关闭channel，sun.nio.ch.SelectionKeyImpl.cancel()取消所有事件不再接收新数据</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>关闭连接是对接收OP_READ事件的处理,已读取的数据字节数小于等于0作为判断的依据</li><li>数据进行读取时，强行关闭连接会触发IOException，进而执行关闭流程 </li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    Netty关闭连接是对OP_READ事件的处理，包含了正常关闭和异常关闭。正常关闭是通过读取的字节数小于等于0来做未判断条件。异常关闭则是通过捕获IOException而触发</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Netty发送数据</title>
      <link href="/2023/05/08/netty/netty-fa-song-shu-ju/"/>
      <url>/2023/05/08/netty/netty-fa-song-shu-ju/</url>
      
        <content type="html"><![CDATA[<h4 id="Netty发送数据"><a href="#Netty发送数据" class="headerlink" title="Netty发送数据"></a>Netty发送数据</h4><h4 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h4><h5 id="Worker-Thread"><a href="#Worker-Thread" class="headerlink" title="Worker Thread"></a>Worker Thread</h5><ol><li><p>write把数据添加到ChannelOutboundBuffe：</p><p>outboundBuffer.addMessage(msg, size, promise)把数据添加到ChannelOutboundBuffe链表unflushedEntry</p></li><li><p>flash把ChannelOutboundBuffer里面的数据发送出去：</p><p>a) outboundBuffer.addFlush()把unflushedEntry数据搬到ChannelOutboundBuffe链表flushedEntry，然后置空unflushedEntry</p><p>b)  NioSocketChannel.doWrite()把flushedEntry链表的数据发送出去，然后删除已发送的数据</p><p><img src="/medias/assets/netty/write-flush.png"></p></li></ol><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>​    sun.nio.ch.SocketChannelImpl.write()</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>数据写不进去的时候，会停止写入然后注册一个OP_WRITE事件等待下次可写了再开始写入</li><li>OP_WRITE事件发生表示的是数据可以写入而不是说有数据写入。所以正常情况下不能注册，否则会一直触发</li><li>批量写数据的时候，如果尝试写的都写进去了，接下来会尝试写更多，体现在maxBytesPerGatheringWrite这个参数的调整</li><li>只要有数据写且是可写的状态，会一直尝试写，直到尝试16次,通过writeSpinCount控制。如果超过16次还未写完，那么就schedule一个task来继续写，而不是用注册事件来触发，更加简洁有力</li><li>待写入的数据太多，超过最高水位线，则会把channel设置为不可写状态，让应用端程序自己决定是否要继续写，体现在WriteBufferWaterMark.high参数的调整。待写入的数据太少，低于了最低水位线，则会把channel设置为可写状态，通过WriteBufferWaterMark.low参数控制</li><li>ctx.channel().write()从TailContext开始执行。ctx.write()从当前Context开始执行</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    Netty发送数据的过程和接收数据的过程一样，既贪心又公平</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Netty业务处理</title>
      <link href="/2023/05/07/netty/netty-ye-wu-chu-li/"/>
      <url>/2023/05/07/netty/netty-ye-wu-chu-li/</url>
      
        <content type="html"><![CDATA[<h4 id="Netty业务处理"><a href="#Netty业务处理" class="headerlink" title="Netty业务处理"></a>Netty业务处理</h4><h4 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h4><h5 id="Worker-Thread"><a href="#Worker-Thread" class="headerlink" title="Worker Thread"></a>Worker Thread</h5><ol><li>NioEventLoop处理OP_READ事件，把读取到的数据传递出去：pipeline.fireChannelRead(byteBuf)</li><li>pipeline触发handler包含业务处理的channelRead方法完成业务的处理</li></ol><p><img src="/medias/assets/netty/pipeline.png"></p><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>​    数据在pipeline中所有handler的channelRead方法的执行</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>pipeline上的handler不是都会执行，必须实现ChannelInboundHandler且channelRead方法不能有@Skip注解</li><li>pipeline从Head Handler开始到Tail Handler结束，但是不保证都会执行到Tail Handler，中途是可以退出的</li><li>默认Handler处理的线程是Channel绑定的NioEventLoop线程，也可以设置其它：</li></ol><p>​        p.addLast(new UnorderedThreadPoolEventExecutor(128), xxHandler)</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    Netty处理业务很方便很灵活，只需要实现业务handler添加的pipeline中即可</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Netty接收数据</title>
      <link href="/2023/05/06/netty/netty-jie-shou-shu-ju/"/>
      <url>/2023/05/06/netty/netty-jie-shou-shu-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="Netty接收数据"><a href="#Netty接收数据" class="headerlink" title="Netty接收数据"></a>Netty接收数据</h3><h4 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h4><h5 id="Worker-Thread"><a href="#Worker-Thread" class="headerlink" title="Worker Thread"></a>Worker Thread</h5><ol><li>NioEventLoop中的Selector多路复用器轮询接收到的OP_READ事件</li><li>RecvByteBufAllocator创建初始容量大小为2048 byte的ByteBuf用来接收数据</li><li>从Channel里接收数据</li><li>记录实际接收数据的大小，调整下次分配ByteBuf容量</li><li>通过fireChannelRead把接收的数据传递出去</li><li>判断接收数据的ByteBuf是否满载而归：如果满载而归则尝试读取直到没有数据或者读取够16次然后结束读取等待下一次OP_READ事件，否则直接结束读取等待下一次的OP_READ事件</li></ol><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p>​    sun.nio.ch.SocketChannelImpl.read(ByteBuffer dst) 从Channel里读取数据</p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>NioServerSocketChannel使用AbstractNioMessageChannel.read()创建连接,NioSocketChannel使用AbstractNioByteChannel.read()读取数据</li><li> pipeline.fireChannelRead(byteBuf)表示完成一次读操作,pipeline.fireChannelReadComplete()表示完成一次OP_READ事件处理，一次OP_READ事件可能有多次读操作</li><li>读操作最多尝试16次而不是一直读取，防止某个连接一直霸占NioEventLoop：共同富裕</li><li>AdaptiveRecvByteBufAllocator对分配ByteBuf容量的猜测：放大果断，缩小谨慎（需要连续两次判断）</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    Netty接收数据既贪心又公平：贪心就是尽可能读取更多的数据，公平就是不会一直霸占线程读取数据，最多读取16次后就把读的机会让给别人实现共同富裕</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Netty创建连接</title>
      <link href="/2023/05/05/netty/netty-jian-li-lian-jie/"/>
      <url>/2023/05/05/netty/netty-jian-li-lian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="Netty创建连接"><a href="#Netty创建连接" class="headerlink" title="Netty创建连接"></a>Netty创建连接</h3><h4 id="主线过程"><a href="#主线过程" class="headerlink" title="主线过程"></a>主线过程</h4><h5 id="Boss-Thread"><a href="#Boss-Thread" class="headerlink" title="Boss Thread"></a>Boss Thread</h5><ol><li>NioEventLoop中的Selector轮询创建连接事件(OP_ACCEPT)</li><li>创建NioSocketChannel</li><li>初始化NioSocketChannel并从Worker Group中选择一个NioEventLoop</li></ol><h5 id="Worker-Thread"><a href="#Worker-Thread" class="headerlink" title="Worker Thread"></a>Worker Thread</h5><ol><li>将NioSocketChannel注册到选中的NioEventLoop的Selector上</li><li>注册读事件(OP_READ)到Selector上</li></ol><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><ol><li>Selector.select()/Selector.selectNow()/Selector.select(timeoutMillis) 发现OP_ACCEPT事件</li><li>NioSocketChannel socketChannel = serverSocketChannel.accept() 创建NioSocketChannel</li><li>SelectionKey selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this) 把NioSocketChannel注册到NioEventLoop的Selector上</li><li>selectionKey.interestOps(SelectionKey.OP_READ) 注册监听OP_READ事件</li></ol><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>创建连接的初始化和注册是通过pipeline.fireChannelRead在ServerBootstrapAcceptor中完成的</li><li>第一次Register监听的是0而不是OP_READ,SelectionKey selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this) </li><li>监听OP_READ是通过Register完成后的fireChannelActive触发</li><li>Worker’s NioEventLoop是通过Register操作执行过程启动的</li><li>接受连接的读操作，不会尝试读取更多次（16次）</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    Netty创建连接的核心操作就是Boss Group处理OP_ACCEPT事件然后从Worker Group中选择一个NioEventLoop处理OP_READ事件</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Netty启动过程</title>
      <link href="/2023/05/04/netty/netty-qi-dong-guo-cheng/"/>
      <url>/2023/05/04/netty/netty-qi-dong-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="Netty启动过程"><a href="#Netty启动过程" class="headerlink" title="Netty启动过程"></a>Netty启动过程</h3><h4 id="主线过程"><a href="#主线过程" class="headerlink" title="主线过程"></a>主线过程</h4><h5 id="Main-Thread"><a href="#Main-Thread" class="headerlink" title="Main Thread"></a>Main Thread</h5><ol><li>创建Selector    </li><li>创建NioServerSocketChannel</li><li>初始化NioServerSocketChannel</li><li>从Boss Group中选择一个NioEventLoop给NioServerSocketChannel使用</li></ol><h5 id="Boss-Thread"><a href="#Boss-Thread" class="headerlink" title="Boss Thread"></a>Boss Thread</h5><ol><li>将NioServerSocketChannel注册到选择的NioEventLoop的Selector上</li><li>绑定地址启动</li><li>注册接受连接事件OP_ACCEPT到Selector上</li></ol><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><ol><li>Selector selector = sun.nio.ch.SelectorProviderImpl.openSelector() 创建Selector多路复用器</li><li>ServerSocketChannel channel = provider.openServerSocketChannel() 创建NioServerSocketChannel</li><li>SelectionKey selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this) NioServerSocketChannel注册到NioEventLoop的Selector</li><li>javaChannel().bind(localAddress, config.getBacklog()) 绑定地址启动</li><li>selectionKey.interestOps(SelectionKey.OP_ACCEPT) 注册接受连接事件(OP_ACCEPT)</li></ol><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h4><ol><li>Selector是在创建NioEventLoopGroup(创建一批NioEventLoop)时创建的</li><li>第一次Register监听的是0而不是OP_ACCEPT,SelectionKey selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);</li><li>监听OP_ACCEPT是通过bind完成后的fireChannelActive()异步触发</li><li>NioEventLoop是通过Register操作的执行来完成启动的</li><li>ChanneInitializer是一次性的，用完后就会移除。一些handler也可以设计成一次性的，例如授权</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    Netty启动过程最核心的操作就是做好接受连接的准备</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：三种IO模式</title>
      <link href="/2023/05/03/netty/san-chong-io-mo-shi/"/>
      <url>/2023/05/03/netty/san-chong-io-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="三种IO模式"><a href="#三种IO模式" class="headerlink" title="三种IO模式"></a>三种IO模式</h3><h4 id="生活场景类比"><a href="#生活场景类比" class="headerlink" title="生活场景类比"></a>生活场景类比</h4><ol><li><p>食堂排队打饭模式：在窗口排队，打好饭后才离开</p></li><li><p>外卖小哥餐馆取餐模式：等待被叫号，好了自己去拿</p></li><li><p>下馆子包厢模式：点单后饭菜好了服务员直接端到包厢</p><p> 类比对象</p><p> ​    食堂/餐馆——服务器</p><p> ​    饭菜——数据</p><p> ​    饭菜好了——数据就绪</p><p> ​    端菜/送菜——数据读取  </p></li></ol><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>​    阻塞和非阻塞的指的是数据就绪前要不要等待。（饭菜好之前要不要死等？）</p><p>​    阻塞：没有数据传过来时，读会一直阻塞到有数据到来。缓冲区满时，写操作也会阻塞直到可写入为止。（饭菜好之前死等）</p><p>​    非阻塞：遇到上面的情况都是都直接返回。（饭菜好之前不等待）</p><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><p>​    同步和异步指的是数据就绪后数据的操作谁来完成。（饭菜好了谁来端？）</p><p>​    同步：数据就绪后自己读取。（饭菜好了自己端）</p><p>​    异步：数据就绪后直接读取好再回调给程序。（饭菜好了服务员端上来）</p><h4 id="三种IO模式-1"><a href="#三种IO模式-1" class="headerlink" title="三种IO模式"></a>三种IO模式</h4><table><thead><tr><th>IO模式</th><th>阻塞&amp;非阻塞</th><th>同步&amp;异步</th></tr></thead><tbody><tr><td>BIO</td><td>阻塞</td><td>同步</td></tr><tr><td>NIO</td><td>非阻塞</td><td>同步</td></tr><tr><td>AIO</td><td>非阻塞</td><td>异步</td></tr></tbody></table><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>BIO：同步阻塞，消耗资源，效率低下</li><li>NIO：同步非阻塞，资源消耗小，性能高</li><li>AIO：异步非阻塞，资源消耗小，性能最高。Windows实现成熟但是很少做服务器，Linux平台AIO实现不成熟，相比NIO性能提升不明显</li><li>Netty不建议使用BIO，删除了AIO</li></ol>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：TCP粘包&amp;拆包</title>
      <link href="/2023/05/02/netty/tcp-nian-bao-chai-bao/"/>
      <url>/2023/05/02/netty/tcp-nian-bao-chai-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="TCP粘包-amp-拆包"><a href="#TCP粘包-amp-拆包" class="headerlink" title="TCP粘包&amp;拆包"></a>TCP粘包&amp;拆包</h3><h4 id="粘包-amp-拆包"><a href="#粘包-amp-拆包" class="headerlink" title="粘包&amp;拆包"></a>粘包&amp;拆包</h4><p><img src="/medias/assets/netty/package.jpg"></p><h4 id="粘包的原因"><a href="#粘包的原因" class="headerlink" title="粘包的原因"></a>粘包的原因</h4><ol><li>发送方每次写入的数据小于套接字缓冲区的大小</li><li>接收方读取套接字缓冲区数据不够及时</li></ol><h4 id="拆包的原因"><a href="#拆包的原因" class="headerlink" title="拆包的原因"></a>拆包的原因</h4><ol><li>发送方每次写入的数据大于套接字缓冲区的大小</li><li>发送的数据大于协议的最大传输单元（Maximum Transmission Unit），则必须拆包</li></ol><h4 id="TCP为什么会出现粘包-amp-拆包"><a href="#TCP为什么会出现粘包-amp-拆包" class="headerlink" title="TCP为什么会出现粘包&amp;拆包"></a>TCP为什么会出现粘包&amp;拆包</h4><p>​    TCP是流式协议，消息没有边界</p><h4 id="粘包-amp-拆包的解决方法"><a href="#粘包-amp-拆包的解决方法" class="headerlink" title="粘包&amp;拆包的解决方法"></a>粘包&amp;拆包的解决方法</h4><table>    <tbody><tr>        <th>解决方法</th>        <th>寻找消息边界方式</th>        <th>优点</th>        <th>缺点</th>        <th>推荐度</th>    </tr>    <tr>        <td>一个请求一个TCP连接</td>        <td> 建立连接到释放连接之间的消息即为完整的消息 </td>        <td> 简单 </td>        <td> 效率低下 </td>        <td> 不推荐 </td>    </tr>    <tr>        <td>固定长度</td>        <td> 满足固定长度即可 </td>        <td> 简单 </td>        <td> 浪费空间 </td>        <td> 不推荐 </td>    </tr>    <tr>        <td>分隔符</td>        <td> 分隔符之间即为完整消息 </td>        <td> 简单、不浪费空间 </td>        <td> 内容本身包含分隔符时需要转义，需要内容扫描 </td>        <td> 推荐 </td>    </tr>    <tr>        <td>固定长度字段存储内容的长度信息</td>        <td> 先读取固定长度字段获得内容长度，然后根据内容长度读取后续内容 </td>        <td> 精确定位用户数据，内容也不用转义 </td>        <td> 长度理论上有限制，需要提前预知内容的最大长度从而定义长度占用的字节数</td>        <td> 推荐+ </td>    </tr>    <tr>        <td>其他</td>        <td> 每种方式都不同，例如JSON可以判断{}是否成对作为判断 </td>        <td colspan="3"> 需要根据实际场景衡量 </td>    </tr></tbody></table><h4 id="Netty对粘包-amp-拆包的支持"><a href="#Netty对粘包-amp-拆包的支持" class="headerlink" title="Netty对粘包&amp;拆包的支持"></a>Netty对粘包&amp;拆包的支持</h4><table><thead><tr><th>方法</th><th>解码</th><th>编码</th></tr></thead><tbody><tr><td>固定长度</td><td>FixedLengthFrameDecoder</td><td>简单</td></tr><tr><td>分隔符</td><td>DelimiterBasedFrameDecoder</td><td>简单</td></tr><tr><td>固定长度字段存储内容的长度信息</td><td>LengthFieldBasedFrameDecoder</td><td>LengthFieldPrepender</td></tr></tbody></table><p>Netty除了这三个基本方式的支持，对于常见协议也都有相应的支持，非常丰富，开箱即用</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>TCP是流式协议，存在粘包&amp;拆包问题</li><li>Netty对粘包&amp;拆包有丰富易用的支持，开箱即用</li></ol>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Keepalive与Idle</title>
      <link href="/2023/05/01/netty/keepalive-idle/"/>
      <url>/2023/05/01/netty/keepalive-idle/</url>
      
        <content type="html"><![CDATA[<h3 id="keepalive与idle监测"><a href="#keepalive与idle监测" class="headerlink" title="keepalive与idle监测"></a>keepalive与idle监测</h3><h4 id="keepalive"><a href="#keepalive" class="headerlink" title="keepalive"></a>keepalive</h4><p>​    keepalive并不是TCP协议规范的一部分，但在几乎所有的TCP/IP协议栈中，都实现了KeepAlive功能。</p><p>​    keepalive通过定时发送探测包来探测连接的对端是否存活。可以用来：</p><p>​        1、及时检测出挂掉的连接。连接挂掉的原因可能有很多，如服务停止、网络波动、宕机、应用重启等。</p><p>​        2、防止因为连接长时间无数据交互而断连。相当于TCP层面的心跳包</p><h4 id="TCP-keepalive核心参数"><a href="#TCP-keepalive核心参数" class="headerlink" title="TCP keepalive核心参数"></a>TCP keepalive核心参数</h4><p>​    net.ipv4.tcp_keepalive_time=7200 # 7200秒后发送keepalive消息</p><p>​    net.ipv4.tcp_keepalive_intvl=75 #keepalive消息重试间隔为75秒</p><p>​    net.ipv4.tcp_keepalive_probes=9 # 无确认则一直重试9次</p><p>​    当启用keepalive的时候（默认是关闭的），TCP在连接在7200秒内没有收发数据后，会发送keepalive消息，如果探测消息没有得到回应，那么每隔75秒就发送一次，如果连续9次都没有得到回应，则认为连接是失效了。期间总计耗时2小时11分钟，相当长。</p><h4 id="keepalive生活场景类比"><a href="#keepalive生活场景类比" class="headerlink" title="keepalive生活场景类比"></a>keepalive生活场景类比</h4><p>​    还是A餐馆，为了进一步扩大经营，老板开通了电话订餐配送服务，专门招聘了几个小姐姐负责电话订餐工作。这个服务一开通，餐馆的生意又好了不少。某天顾客来电订餐，小姐姐接通了电话后，顾客点了一些菜品后突然就没有了声音（临时走开、处理其它事情、线路故障等原因）。这个时候小姐姐该如何处理呢？小姐姐会问一句，“您还在吗？”，如果顾客没有应答，那么她就会挂机，如果应答了，那么小姐姐就会继续等待顾客说话。小姐姐这个操作就是keepalive机制。</p><p>​    类比对象：</p><p>​        电话线路——TCP连接</p><p>​        语言沟通——数据</p><p>​        顾客——数据发送方</p><p>​        小姐姐——数据接收方</p><h4 id="需要keepalive场景"><a href="#需要keepalive场景" class="headerlink" title="需要keepalive场景"></a>需要keepalive场景</h4><ol><li>对端异常崩溃（对应电话订餐场景中顾客临时走开）</li><li>对端在但是处理不过来了（对应电话订餐场景中顾客处理其它事情）</li><li>对端在但是不可达（对应电话订餐场景中顾客端线路故障）</li></ol><h4 id="为什么需要keepalive"><a href="#为什么需要keepalive" class="headerlink" title="为什么需要keepalive"></a>为什么需要keepalive</h4><p>​    如果没有keepalive，连接已经坏掉但是还浪费资源维持，下次使用会直接报错。对应A餐馆电话订餐场景，后果就是占用线路，导致其它人不能订餐，影响餐馆收益</p><h4 id="为什么TCP有了keepalive应用层还要做keepalive"><a href="#为什么TCP有了keepalive应用层还要做keepalive" class="headerlink" title="为什么TCP有了keepalive应用层还要做keepalive"></a>为什么TCP有了keepalive应用层还要做keepalive</h4><ol><li>TCP层默认关闭keepalive，且经过路由等中转设备keepalive探测包可能被丢弃</li><li>TCP层keepalive默认时间过长，虽然可配置，但是该配置是系统参数，会影响所有应用程序</li><li>协议分层，各层关注点不一样。传输层关注的是线路通否，而应用层关注的是能否服务</li></ol><h4 id="TCP的keepalive和HTTP的keepalive有什么不同"><a href="#TCP的keepalive和HTTP的keepalive有什么不同" class="headerlink" title="TCP的keepalive和HTTP的keepalive有什么不同"></a>TCP的keepalive和HTTP的keepalive有什么不同</h4><p>​    HTTP1.0的协议都是建立在TCP协议基础上，其特点就是传输完数据后，立马就释放掉该TCP链接，也就是短连接。随着技术的发展，一个网页需要建立很多次短连接，这大大影响了消息的处理，所以HTTP就提出了持续连接的概念，也就是让连接保存一段时间，后续的HTTP消息可以复用这个连接继续传输消息，也就是keepalive模式。当使用keepalive模式时，keepalive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，避免了建立或者重新建立连接，从而大大提升了性能。</p><p>​    keepalive在HTTP1.0中默认是关闭的，需要在请求头加入”Connection: Keep-Alive“；HTTP 1.1中默认启用的，如果加入”Connection: close “才是关闭。目前大部分浏览器都是用HTTP1.1协议，默认都是长连接。</p><h4 id="idle监测"><a href="#idle监测" class="headerlink" title="idle监测"></a>idle监测</h4><p>​    idle监测是一种空闲监测，负责诊断。诊断后做出不同行为，决定了idle监测的最终用途：</p><ol><li><p>发送keepalive：一般配合keepalive，减少keepalive消息发送</p><p>keepalive设计演进：</p><p>​    v1：keepalive消息和服务器正常消息交换无关，定时发送。</p><p>​    v2：有其它消息传输的时候，不发送keepalive消息，无其它消息传输且超过一定时间的时候，判断为idle再发送keepalive消息。</p></li></ol><p>​        v1版本的keepalive设计，如果业务数据交换不多，keepalive消息很有可能超过正常数据交换的频率，明显不合理。而v2版本就有效减少了大量的keepalive消息的发送，更为合理。</p><pre><code>2. 直接关闭连接：快速释放坏掉的、恶意的、很久不用的连接，让系统时刻保持最好的状态。但这比较简单粗暴，客户端可能需要重连。所以实际场景需和keepalive结合使用，保证不会空闲，如果空闲则关闭连接。    </code></pre><h4 id="Netty开启keepalive-idle监测"><a href="#Netty开启keepalive-idle监测" class="headerlink" title="Netty开启keepalive+idle监测"></a>Netty开启keepalive+idle监测</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 两种设置方式</span>b<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">NioChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> b<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span><span class="token constant">SO_KEEPALIVE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// pipeline添加IdleStateHandler</span><span class="token keyword">long</span> readerIdleTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> writerIdleTime <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">long</span> allIdleTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span>readerIdleTime<span class="token punctuation">,</span> writerIdleTime<span class="token punctuation">,</span> allIdleTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    keepalive+idle监测可以减少keepalive的探测消息发送</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学Netty：Reactor模式</title>
      <link href="/2023/05/01/netty/reactor-mo-shi/"/>
      <url>/2023/05/01/netty/reactor-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h3><h4 id="生活场景类比"><a href="#生活场景类比" class="headerlink" title="生活场景类比"></a>生活场景类比</h4><p>​    由于A饭店的饭菜好吃又实惠，客人越来越多，老板迅速扩大了饭店的规模，现在正在考虑如何更好的服务顾客：</p><ol><li>一个伙计包揽全部活：迎宾、点菜、做菜、上菜、送客等</li><li>多招聘几个伙计，大家一起干上面的活</li><li>进一步分工，招聘一个或多个漂亮的小姐姐专门负责迎宾</li></ol><p>​    类比对象：</p><p>​        伙计——工作线程</p><p>​        迎宾——接入连接</p><p>​        点菜——请求</p><p>​        做菜——业务处理</p><p>​        上菜——响应</p><h4 id="Reactor单线程模式"><a href="#Reactor单线程模式" class="headerlink" title="Reactor单线程模式"></a>Reactor单线程模式</h4><p><img src="/medias/assets/netty/reactor-single-thread.PNG" alt="reactor-single-thread"></p><p>​    单线程包揽所有的活（对应一个伙计包揽全部活的模式）</p><h4 id="Reactor多线程模式"><a href="#Reactor多线程模式" class="headerlink" title="Reactor多线程模式"></a>Reactor多线程模式</h4><p><img src="/medias/assets/netty/reactor-worker-thread-pool.PNG" alt="reactor-worker-thread-pool"></p><p>​    reactor线程负责接收连接，然后在线程池中处理（对应多招聘几个伙计一起干模式）</p><h4 id="Reactor主从模式"><a href="#Reactor主从模式" class="headerlink" title="Reactor主从模式"></a>Reactor主从模式</h4><p><img src="/medias/assets/netty/reactor-main-sub.PNG" alt="reactor-main-sub"></p><p>​    主reactor线程专门负责服务器应用最关心的事情——接收连接，从reactor线程负责后续处理（对应进一步分工迎宾小姐姐模式）</p><h4 id="Netty如何使用Reactor三种模式"><a href="#Netty如何使用Reactor三种模式" class="headerlink" title="Netty如何使用Reactor三种模式"></a>Netty如何使用Reactor三种模式</h4><table><thead><tr><th>模式</th><th>示例代码</th></tr></thead><tbody><tr><td>Reactor单线程模式</td><td>EventLoopGroup group = new NioEventLoopGroup(1);<br>ServerBootstrap b = new ServerBootstrap();<br>b.group(group);</td></tr><tr><td>Reactor多线程模式</td><td>EventLoopGroup group = new NioEventLoopGroup();<br>ServerBootstrap b = new ServerBootstrap();<br>b.group(group);</td></tr><tr><td>Reactor主从模式</td><td>EventLoopGroup bossGroup = new NioEventLoopGroup(1);<br>EventLoopGroup workerGroup = new NioEventLoopGroup();<br>ServerBootstrap b = new ServerBootstrap();<br>b.group(bossGroup, workerGroup);</td></tr></tbody></table><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    接收连接是服务器最重要的事情。Reactor三种模式从无分工到有分工，分工后有专门的Reactor线程接收连接，极大的提升了服务器接收连接的能力，所以Netty才能轻松实现海量连接的接入</p>]]></content>
      
      
      <categories>
          
          <category> Netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（十一）：通用CRUD</title>
      <link href="/2021/11/01/mybatis/mybatis-11/"/>
      <url>/2021/11/01/mybatis/mybatis-11/</url>
      
        <content type="html"><![CDATA[<h2 id="通用CRUD"><a href="#通用CRUD" class="headerlink" title="通用CRUD"></a>通用CRUD</h2><p>对于简单的应用来说，大多数数据库操作都是对单表CRUD。使用Mybatis的时候一般通过声明Mapper接口来操作数据库，大量的Mapper声明带来了大量重复工作量，当然可以通过Mybatis插件生成Mapper接口减少工作量，但是对于这种重复的东西，通过封装可能效果更好。这就是通用CRUD的需求来源。</p><h3 id="实现方式一"><a href="#实现方式一" class="headerlink" title="实现方式一"></a>实现方式一</h3><p><em>通过Mybatis的Provider特性加上反射构建通用Mapper接口。</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@InsertProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">BaseSqlProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"buildInsertSql"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@UpdateProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">BaseSqlProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"buildUpdateSql"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@DeleteProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">BaseSqlProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"buildDeleteSql"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SelectProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">BaseSqlProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"buildSelectSql"</span><span class="token punctuation">)</span>    <span class="token class-name">T</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Provider只需指定type、method两个属性即可。type是Provider的类，method是返回Sql语句的方法，注意参数和被注解的方法保持一致，方法的返回值是String类型。</p><p>通过反射可根据传入的参数类型生成不同的SQL语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseSqlProvider</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">buildInsertSql</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"insert into "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TableName</span> tableNameAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tableNameAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableNameAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"实体类不存在属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> columnNames <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token function">humpToLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>columnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">") values ("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">buildUpdateSql</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"update "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TableName</span> tableNameAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tableNameAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableNameAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" set "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"实体类不存在属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span> idField <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">TableId</span> tableId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TableId</span> tableIdAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableId</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tableIdAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tableId <span class="token operator">=</span> tableIdAnnotation<span class="token punctuation">;</span>                idField <span class="token operator">=</span> field<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">TableField</span> tableFieldAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableField</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tableFieldAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableFieldAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">humpToLine</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" where "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tableId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"缺少主键"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tableId<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">humpToLine</span><span class="token punctuation">(</span>idField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableId<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idField<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>idField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            idField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>idField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">buildDeleteSql</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"delete from "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TableName</span> tableNameAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tableNameAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableNameAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fields<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"实体类不存在属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" where "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TableId</span> tableIdAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableId</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tableIdAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tableIdAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">humpToLine</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableIdAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">buildSelectSql</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"select * from "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TableName</span> tableNameAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableName</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tableNameAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableNameAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" where "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">TableId</span> tableIdAnnotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">TableId</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tableIdAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tableIdAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">humpToLine</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableIdAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 驼峰转下划线     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">humpToLine</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"[A-Z]"</span><span class="token punctuation">,</span> <span class="token string">"_$0"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> humpPattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[A-Z]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务的Mapper接口只要继承它，就可以获得单表的CRUD方法，相当方便。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>虽然这种方式可以实现动态CRUD，但是缺点很明显，每次操作数据库都重新生成SQL语句，性能差！</em></p><p>代码地址：<a href="https://github.com/onlyonezhongjinhui/mybatis-learning/tree/main/dynamic_crud">https://github.com/onlyonezhongjinhui/mybatis-learning/tree/main/dynamic_crud</a></p><h3 id="实现方式二"><a href="#实现方式二" class="headerlink" title="实现方式二"></a>实现方式二</h3><p><em>通过扩展Mybatis，在Mybatis启动的过程中注入动态CRUD，也就是给每个Mapper接口添加CRUD的MapperStatement。这种方式很好的解决了方式一的性能问题</em></p><p>代码地址：<a href="https://github.com/onlyonezhongjinhui/mybatis-learning/tree/main/dynamic_crud_x">https://github.com/onlyonezhongjinhui/mybatis-learning/tree/main/dynamic_crud_x</a></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（十）：枚举转换器</title>
      <link href="/2021/10/12/mybatis/mybatis-10/"/>
      <url>/2021/10/12/mybatis/mybatis-10/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举转换器"><a href="#枚举转换器" class="headerlink" title="枚举转换器"></a>枚举转换器</h2><p>Mybatis在做数据库表和实体转换的时候，需要使用类型转换器TypeHandler。当实体类中使用了枚举的时候，需要枚举类型转换器，Mybatis自带了两个枚举的转换器，分别是EnumOrdinalTypeHandler、EnumTypeHandler。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumOrdinalTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> enums<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">EnumOrdinalTypeHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Type argument cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>enums <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" does not represent an enum type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">E</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ordinal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ordinal <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">toOrdinalEnum</span><span class="token punctuation">(</span>ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ordinal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ordinal <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">toOrdinalEnum</span><span class="token punctuation">(</span>ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ordinal <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ordinal <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">toOrdinalEnum</span><span class="token punctuation">(</span>ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">toOrdinalEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ordinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> enums<span class="token punctuation">[</span>ordinal<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot convert "</span> <span class="token operator">+</span> ordinal <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" by ordinal value."</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">EnumTypeHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Type argument cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">E</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jdbcType<span class="token punctuation">.</span><span class="token constant">TYPE_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// see r3589</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从代码可以看出，EnumOrdinalTypeHandler是使用枚举的ordinal属性进行转换，EnumTypeHandler是使用枚举的name属性进行转换。然而平常我们的枚举，值有多种类型，也会附带一些描述属性。因此这两个转化器都不能够满足我们的使用要求，这个时候就需要自定义枚举转换器了。</p><h2 id="自定义枚举转换器"><a href="#自定义枚举转换器" class="headerlink" title="自定义枚举转换器"></a>自定义枚举转换器</h2><p>自定义转换器继承BaseTypeHandler，实现必须重写的4个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">IEnum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// javaType转换为jdbcType</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">IEnum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// 根据列名获取值时候调用</span>    <span class="token comment">// jdbcType转换为javaType</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">IEnum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// 根据下标获取值时候调用</span>    <span class="token comment">// jdbcType转换为javaType</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">IEnum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">// 存储过程通过下标获取值时候调用</span>    <span class="token comment">// jdbcType转换为javaType</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目中可定义统一枚举接口方便统一处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEnum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建IEnumTypeHandler枚举转换器统一转换实现了IEnum接口的枚举</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IEnumTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">IEnum</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IEnum</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReflectorFactory</span> reflectorFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultReflectorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Invoker</span> invoker<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">IEnumTypeHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Type argument cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token class-name">MetaClass</span> metaClass <span class="token operator">=</span> <span class="token class-name">MetaClass</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> reflectorFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO 这个地方写死了，可以写活，比如通过注解标记属性</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>invoker <span class="token operator">=</span> metaClass<span class="token punctuation">.</span><span class="token function">getGetInvoker</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">IEnum</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jdbcType<span class="token punctuation">.</span><span class="token constant">TYPE_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> cs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> cs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> enumClass<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">getValue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ReflectiveOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让枚举转换器生效，可通过以下方式</p><p>1、直接在mybatis配置文件中进行全局配置（推荐使用）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.handler.IEnumTypeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.enums.Nation<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.handler.IEnumTypeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.enums.Education<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、在mapper配置文件中进行局部配置（相对麻烦）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nation<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nation<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.handler.IEnumTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>education<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>education<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.handler.IEnumTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    insert into t_user (id, `name`, age, gender, nation, education)    values (#{id}, #{name}, #{age}, #{gender},    #{nation,typeHandler=com.demo.handler.IEnumTypeHandler,javaType=com.demo.enums.Nation},    #{education,typeHandler=com.demo.handler.IEnumTypeHandler,javaType=com.demo.enums.Education})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateById<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    update t_user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            `name` = #{name},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            age = #{age},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            gender = #{gender},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nation != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            nation = #{nation,typeHandler=com.demo.handler.IEnumTypeHandler,javaType=com.demo.enums.Nation},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>education != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            education = #{education,typeHandler=com.demo.handler.IEnumTypeHandler,javaType=com.demo.enums.Education}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>    where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h2><p>上面自定义枚举转换器只能处理实现IEnum接口的枚举，这里可以进行优化。增加通用性处理。</p><p>增加标识枚举转换属性注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnumValue</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加通用枚举转换器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonEnumTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReflectorFactory</span> reflectorFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultReflectorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Invoker</span> invoker<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CommonEnumTypeHandler</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Type argument cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token class-name">MetaClass</span> metaClass <span class="token operator">=</span> <span class="token class-name">MetaClass</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> reflectorFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">IEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            name <span class="token operator">=</span> <span class="token function">findEnumValueFieldName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Could not find @EnumValue in Class: %s."</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>invoker <span class="token operator">=</span> metaClass<span class="token punctuation">.</span><span class="token function">getGetInvoker</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// see r3589</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> jdbcType<span class="token punctuation">.</span><span class="token constant">TYPE_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getNullableResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> cs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cs<span class="token punctuation">.</span><span class="token function">wasNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> cs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> enumClass<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> es <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">getValue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ReflectiveOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查找标记标记EnumValue字段     *     * @param clazz class     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">findEnumValueFieldName</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> clazz<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">EnumValue</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Field</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"cannot find enum value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点代码就是这里的判断</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">IEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> <span class="token function">findEnumValueFieldName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Could not find @EnumValue in Class: %s."</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当不是IEnum的子类的时候，通过@EnumValue查找枚举的转换属性，然后进行转换</p><p>最后就配置让其生效即可</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.handler.CommonEnumTypeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.demo.enums.Nation<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="代码路径"><a href="#代码路径" class="headerlink" title="代码路径"></a>代码路径</h2><p><a href="https://github.com/onlyonezhongjinhui/mybatis-learning/tree/main/customer-enum-type-handler">https://github.com/onlyonezhongjinhui/mybatis-learning/tree/main/customer-enum-type-handler</a></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三十七）</title>
      <link href="/2021/09/17/architecture/architecture-37/"/>
      <url>/2021/09/17/architecture/architecture-37/</url>
      
        <content type="html"><![CDATA[<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><h3 id="传统网络模型"><a href="#传统网络模型" class="headerlink" title="传统网络模型"></a>传统网络模型</h3><h4 id="PPC、prefork"><a href="#PPC、prefork" class="headerlink" title="PPC、prefork"></a>PPC、prefork</h4><p><img src="/medias/assets/architecture/20210917091938.png"></p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>实现简单</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>PPC：fork代价高，性能低</li><li>父子进程通信要用IPC，监控统计等实现复杂</li><li>OS的上下文切换会限制并发连接数，一般几百</li></ol><h4 id="TPC、prethread"><a href="#TPC、prethread" class="headerlink" title="TPC、prethread"></a>TPC、prethread</h4><p><img src="/medias/assets/architecture/20210917092206.png"></p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol><li>实现简单</li><li>无需IPC，线程中通信即可</li><li>无需fork，线程创建代价相对创建进程低</li></ol><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>线程互斥和共享比PPC、prefork复杂</li><li>某个线程故障可能导致整个进程退出</li><li>OS的上下文切换会限制并发连接数，一般几百，比PPC、prefork高</li></ol><h3 id="Reactor网络模型"><a href="#Reactor网络模型" class="headerlink" title="Reactor网络模型"></a>Reactor网络模型</h3><p>Reactor：Reactor基于多路复用的事件响应网络编程模型</p><p>多路复用：多个连接复用同一个阻塞对象，例如Java的Selector、epoll的epoll_fd（epoll_create函数创建）</p><p>事件响应：不同事件分发给不同对象处理，Java的事件有OP_ACCEPT、OP_CONNECT、OP_READ、OP_WRITE</p><p>缺点：实现比传统的网络模型复杂</p><p>优点：支持海量连接</p><h4 id="模式一：单Reactor单进程-单线程"><a href="#模式一：单Reactor单进程-单线程" class="headerlink" title="模式一：单Reactor单进程/单线程"></a>模式一：单Reactor单进程/单线程</h4><p><img src="/medias/assets/architecture/20210917093132.png"></p><h4 id="模式二：单Reactor多线程"><a href="#模式二：单Reactor多线程" class="headerlink" title="模式二：单Reactor多线程"></a>模式二：单Reactor多线程</h4><p><img src="/medias/assets/architecture/20210917093258.png"></p><h4 id="模式三：多Reactor多进程-线程"><a href="#模式三：多Reactor多进程-线程" class="headerlink" title="模式三：多Reactor多进程/线程"></a>模式三：多Reactor多进程/线程</h4><p><img src="/medias/assets/architecture/20210917093428.png"></p><h3 id="Proactor网络模型"><a href="#Proactor网络模型" class="headerlink" title="Proactor网络模型"></a>Proactor网络模型</h3><p><img src="/medias/assets/architecture/20210917095102.png"></p><h3 id="网络模型对比"><a href="#网络模型对比" class="headerlink" title="网络模型对比"></a>网络模型对比</h3><p><img src="/medias/assets/architecture/20210917095251.png"></p><h3 id="三类网络模型实战技巧"><a href="#三类网络模型实战技巧" class="headerlink" title="三类网络模型实战技巧"></a>三类网络模型实战技巧</h3><p><img src="/medias/assets/architecture/20210917095403.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三十五）</title>
      <link href="/2021/09/15/architecture/architecture-35/"/>
      <url>/2021/09/15/architecture/architecture-35/</url>
      
        <content type="html"><![CDATA[<h2 id="异地多活架构的三种架构模式"><a href="#异地多活架构的三种架构模式" class="headerlink" title="异地多活架构的三种架构模式"></a>异地多活架构的三种架构模式</h2><h3 id="业务定制型异地多活"><a href="#业务定制型异地多活" class="headerlink" title="业务定制型异地多活"></a>业务定制型异地多活</h3><p><img src="/medias/assets/architecture/20210915153742.png"></p><h3 id="业务通用型异地多活"><a href="#业务通用型异地多活" class="headerlink" title="业务通用型异地多活"></a>业务通用型异地多活</h3><p><img src="/medias/assets/architecture/20210915154859.png"></p><p>案例1：淘宝单元化机构</p><p><img src="/medias/assets/architecture/20210915160317.png"></p><p>案例2：蚂蚁LDC架构</p><p><img src="/medias/assets/architecture/20210915161736.png"></p><p>LDC路由：</p><p><img src="/medias/assets/architecture/20210915162013.png"></p><p>LDC容灾：</p><p><img src="/medias/assets/architecture/20210915162126.png"></p><p>LDC蓝绿发布：</p><p><img src="/medias/assets/architecture/20210915162703.png"></p><p>核心——配套服务</p><p><img src="/medias/assets/architecture/20210915162830.png"></p><h3 id="存储通用型异地多活"><a href="#存储通用型异地多活" class="headerlink" title="存储通用型异地多活"></a>存储通用型异地多活</h3><p><img src="/medias/assets/architecture/20210915163143.png"></p><p>案例：OceanBase</p><p><img src="/medias/assets/architecture/20210915163533.png"></p><h3 id="异地多活架构模式对比"><a href="#异地多活架构模式对比" class="headerlink" title="异地多活架构模式对比"></a>异地多活架构模式对比</h3><p><img src="/medias/assets/architecture/20210915164121.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB%E6%9E%B6%E6%9E%84%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三十四）</title>
      <link href="/2021/09/14/architecture/architecture-34/"/>
      <url>/2021/09/14/architecture/architecture-34/</url>
      
        <content type="html"><![CDATA[<h2 id="业务级灾备架构设计"><a href="#业务级灾备架构设计" class="headerlink" title="业务级灾备架构设计"></a>业务级灾备架构设计</h2><h3 id="同城多中心"><a href="#同城多中心" class="headerlink" title="同城多中心"></a>同城多中心</h3><h4 id="同城双中心"><a href="#同城双中心" class="headerlink" title="同城双中心"></a>同城双中心</h4><p><img src="/medias/assets/architecture/20210914211351.png"></p><p><img src="/medias/assets/architecture/20210914211508.png"></p><p><img src="/medias/assets/architecture/20210914211732.png"></p><h4 id="同城三中心"><a href="#同城三中心" class="headerlink" title="同城三中心"></a>同城三中心</h4><p><img src="/medias/assets/architecture/20210914211827.png"></p><p><strong>事实上很少采用这种架构，原因是成本很高，可用性没增加</strong></p><h3 id="跨城多中心"><a href="#跨城多中心" class="headerlink" title="跨城多中心"></a>跨城多中心</h3><h4 id="跨城双中心"><a href="#跨城双中心" class="headerlink" title="跨城双中心"></a>跨城双中心</h4><p><img src="/medias/assets/architecture/20210914212052.png"></p><h4 id="跨城双中心——近邻城市"><a href="#跨城双中心——近邻城市" class="headerlink" title="跨城双中心——近邻城市"></a>跨城双中心——近邻城市</h4><p><img src="/medias/assets/architecture/20210914212228.png"></p><h4 id="跨城双中心——远端城市"><a href="#跨城双中心——远端城市" class="headerlink" title="跨城双中心——远端城市"></a>跨城双中心——远端城市</h4><p><img src="/medias/assets/architecture/20210914212524.png"></p><h4 id="跨城多中心-1"><a href="#跨城多中心-1" class="headerlink" title="跨城多中心"></a>跨城多中心</h4><p><img src="/medias/assets/architecture/20210914212611.png"></p><h3 id="跨国数据中心"><a href="#跨国数据中心" class="headerlink" title="跨国数据中心"></a>跨国数据中心</h3><p><img src="/medias/assets/architecture/20210914212745.png"></p><h3 id="业务灾备架构对比"><a href="#业务灾备架构对比" class="headerlink" title="业务灾备架构对比"></a>业务灾备架构对比</h3><p><img src="/medias/assets/architecture/20210914213055.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E4%B8%9A%E5%8A%A1%E7%BA%A7%E7%81%BE%E5%A4%87%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三十三）</title>
      <link href="/2021/09/09/architecture/architecture-33/"/>
      <url>/2021/09/09/architecture/architecture-33/</url>
      
        <content type="html"><![CDATA[<h2 id="如何用FMEA方法排除架构隐患"><a href="#如何用FMEA方法排除架构隐患" class="headerlink" title="如何用FMEA方法排除架构隐患"></a>如何用FMEA方法排除架构隐患</h2><h3 id="FMEA"><a href="#FMEA" class="headerlink" title="FMEA"></a>FMEA</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>FMEA（Failure mode and effectsanalysis，故障模式与影响分析）又称为失效模式与后果分析、失效模式与效应分析、故障模式与后果分析等，这里采用“故障模式与影响分析”</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>FMEA 之所以能够在这些差异很大的领域都得到应用，根本原因在于<strong>FMEA 是一套分析和思考的方法</strong>，而<br>不是某个领域的技能或者工具。FMEA 并不能指导我们如何做架构设计，而是当我们设计出一个架构后，<br>再使用FMEA 对这个架构进行分析，看看架构是否还存在某些可用性的隐患。</p><p><img src="/medias/assets/architecture/20210909215939.png"></p><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p><img src="/medias/assets/architecture/20210909220401.png"></p><h4 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h4><p><img src="/medias/assets/architecture/20210909220133.png"></p><h4 id="应用步骤"><a href="#应用步骤" class="headerlink" title="应用步骤"></a>应用步骤</h4><p><img src="/medias/assets/architecture/20210909220604.png"></p><h4 id="FMEA分析维度"><a href="#FMEA分析维度" class="headerlink" title="FMEA分析维度"></a>FMEA分析维度</h4><p><img src="/medias/assets/architecture/20210909220849.png"></p><h4 id="FMEA技巧"><a href="#FMEA技巧" class="headerlink" title="FMEA技巧"></a>FMEA技巧</h4><p><img src="/medias/assets/architecture/20210909221047.png"></p><p><img src="/medias/assets/architecture/20210909221215.png"></p><p><img src="/medias/assets/architecture/20210909221444.png"></p><p><img src="/medias/assets/architecture/20210909221649.png"></p><p><img src="/medias/assets/architecture/20210909221742.png"></p><h4 id="FMEA落地技巧"><a href="#FMEA落地技巧" class="headerlink" title="FMEA落地技巧"></a>FMEA落地技巧</h4><p><img src="/medias/assets/architecture/20210909221923.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/FMEA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三十二）</title>
      <link href="/2021/09/09/architecture/architecture-32/"/>
      <url>/2021/09/09/architecture/architecture-32/</url>
      
        <content type="html"><![CDATA[<h2 id="高可用架构三大核心原理"><a href="#高可用架构三大核心原理" class="headerlink" title="高可用架构三大核心原理"></a>高可用架构三大核心原理</h2><h3 id="FLP不可能原理"><a href="#FLP不可能原理" class="headerlink" title="FLP不可能原理"></a>FLP不可能原理</h3><p>FLP Impossibility（FLP 不可能性）是分布式领域中一个非常著名的定理，定理的论文是由 Fischer, Lynch<br>and Patterson 三位作者于1985年发表。It is impossible to have a deterministic protocol that solves consensus in a message-passing asynchronous system in which at most one process may fail by crashing</p><h4 id="FLP三大限定条件"><a href="#FLP三大限定条件" class="headerlink" title="FLP三大限定条件"></a>FLP三大限定条件</h4><h5 id="确定性协议"><a href="#确定性协议" class="headerlink" title="确定性协议"></a>确定性协议</h5><p>Deterministic protocol，给定一个输入，一定会产生相同的输出</p><h5 id="异步网络通信"><a href="#异步网络通信" class="headerlink" title="异步网络通信"></a>异步网络通信</h5><p>没有统一的时钟、不能时间同步、不能使用超时、不能探测失败、消息可任意延迟、消息可乱序</p><h5 id="所有存活节点"><a href="#所有存活节点" class="headerlink" title="所有存活节点"></a>所有存活节点</h5><p>所有存活节点必须最终达到一致性</p><p><strong>FLP只是说没有“确定性协议”，而不是说“没有任何协议”！</strong></p><h4 id="FLP的不可能三角"><a href="#FLP的不可能三角" class="headerlink" title="FLP的不可能三角"></a>FLP的不可能三角</h4><p><img src="/medias/assets/architecture/20210909201937.png"></p><h3 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h3><p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer‘s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在2000年的 ACM PODC 上提出的一个猜想。</p><p>2002年，麻省理工学院的赛斯·吉尔伯特（Seth Gilbert）和南希·林奇（Nancy Lynch）发表了布鲁尔猜想的证明，使之成为分布式计算领域公认的一个定理。对于设计分布式系统的架构师来说，CAP 是必须掌握的理<br>论。</p><p>It is impossible for a distributed data store to simultaneously provide more than two out of the<br>following three guarantees: Consistency, Availability, Partition tolerance.<br>分布式数据存储系统不可能同时满足一致性、可用性和分区容忍性。</p><h4 id="CAP的三大限定条件"><a href="#CAP的三大限定条件" class="headerlink" title="CAP的三大限定条件"></a>CAP的三大限定条件</h4><h5 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h5><p>分布式，可能发生网络分区</p><h5 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h5><p>通过复制来实现数据共享的存储系统</p><h5 id="同时满足"><a href="#同时满足" class="headerlink" title="同时满足"></a>同时满足</h5><p>同时满足CAP</p><h4 id="CAP的不可能三角"><a href="#CAP的不可能三角" class="headerlink" title="CAP的不可能三角"></a>CAP的不可能三角</h4><p><img src="/medias/assets/architecture/20210909202941.png"></p><p><img src="/medias/assets/architecture/20210909203215.png"></p><h4 id="CAP细节"><a href="#CAP细节" class="headerlink" title="CAP细节"></a>CAP细节</h4><h5 id="复制延迟"><a href="#复制延迟" class="headerlink" title="复制延迟"></a>复制延迟</h5><p><img src="/medias/assets/architecture/20210909203823.png"></p><h5 id="描述粒度"><a href="#描述粒度" class="headerlink" title="描述粒度"></a>描述粒度</h5><p><img src="/medias/assets/architecture/20210909203941.png"></p><h5 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h5><p><img src="/medias/assets/architecture/20210909204237.png"></p><h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><p>BASE 是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency），核心思想是即使无法做到强一致性（CAP 的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性。</p><p>Basically Available：读写操作尽可能的可用，但写操作在冲突的时候可能丢失结果，读操作可能读取到旧的值。</p><p>Soft State：没有一致性的保证，允许系统存在中间状态，而该中间状态不会影响系统整体可用性，这里的中间状态就是CAP 理论中的数据不一致。</p><p>Eventually Consistency：如果系统运行正常且等待足够长的时间，系统最终将达成一致性的状态。</p><h4 id="BASE与CAP"><a href="#BASE与CAP" class="headerlink" title="BASE与CAP"></a>BASE与CAP</h4><p><img src="/medias/assets/architecture/20210909204748.png"></p><h2 id="BASE、CAP、FLP落地"><a href="#BASE、CAP、FLP落地" class="headerlink" title="BASE、CAP、FLP落地"></a>BASE、CAP、FLP落地</h2><p><img src="/medias/assets/architecture/20210909205024.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（九）：分页机制</title>
      <link href="/2021/08/28/mybatis/mybatis-09/"/>
      <url>/2021/08/28/mybatis/mybatis-09/</url>
      
        <content type="html"><![CDATA[<h2 id="分页机制"><a href="#分页机制" class="headerlink" title="分页机制"></a>分页机制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Mybatis分页查询属于逻辑分页，它是执行完SQL拿到全部的数据后在内存中再进行分页拿指定分页数据，很显然当数据量大的时候，这样做性能很差，很容易发生OOM</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h4><h5 id="RowBounds"><a href="#RowBounds" class="headerlink" title="RowBounds"></a>RowBounds</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RowBounds</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NO_ROW_OFFSET</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NO_ROW_LIMIT</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">RowBounds</span> <span class="token constant">DEFAULT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> offset<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token constant">NO_ROW_OFFSET</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token constant">NO_ROW_LIMIT</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> offset<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> offset<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> limit<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RowBounds定义了offset、limit两个属性，这就是分页查询关心的两个属性，开始的偏移量和没页数量限制。</p><h4 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h4><ol><li>StatementHandler执行查询SQL</li><li>ResultSetHandler处理查询结果</li></ol><p>以SimpleStatementHandler为例，代码执行流程如下：</p><p>SimpleStatementHandler执行query方法，执行完SQL后交给ResultSetHandler处理执行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认的DefaultResultSetHandler执行handleResultSets方法，结果的处理又交给了handleResultSet方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>   <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"handling results"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multipleResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> resultSetCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token class-name">ResultSetWrapper</span> rsw <span class="token operator">=</span> <span class="token function">getFirstResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMap</span><span class="token punctuation">&gt;</span></span> resultMaps <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> resultMapCount <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">validateResultMapsCount</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMapCount<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> resultMapCount <span class="token operator">&gt;</span> resultSetCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">ResultMap</span> resultMap <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSetCount<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> multipleResults<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultSets <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSets <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> resultSetCount <span class="token operator">&lt;</span> resultSets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">ResultMapping</span> parentMapping <span class="token operator">=</span> nextResultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSets<span class="token punctuation">[</span>resultSetCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">String</span> nestedResultMapId <span class="token operator">=</span> parentMapping<span class="token punctuation">.</span><span class="token function">getNestedResultMapId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">ResultMap</span> resultMap <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getResultMap</span><span class="token punctuation">(</span>nestedResultMapId<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token function">collapseSingleResultList</span><span class="token punctuation">(</span>multipleResults<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>handleResultSet方法中进一步委托给handleRowValues处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResultSet</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multipleResults<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resultHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DefaultResultHandler</span> defaultResultHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResultHandler</span><span class="token punctuation">(</span>objectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> defaultResultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multipleResults<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>defaultResultHandler<span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">handleRowValues</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment">// issue #228 (close resultsets)</span>    <span class="token function">closeResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>handleRowValues进一步调用了handleRowValuesForNestedResultMap或handleRowValuesForSimpleResultMap方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRowValues</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resultMap<span class="token punctuation">.</span><span class="token function">hasNestedResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureNoRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handleRowValuesForNestedResultMap</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">handleRowValuesForSimpleResultMap</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以handleRowValuesForSimpleResultMap为例，通过层层调用，分页的地方终于出现了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleRowValuesForSimpleResultMap</span><span class="token punctuation">(</span><span class="token class-name">ResultSetWrapper</span> rsw<span class="token punctuation">,</span> <span class="token class-name">ResultMap</span> resultMap<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultMapping</span> parentMapping<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> resultContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> rsw<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">skipRows</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">shouldProcessMoreRows</span><span class="token punctuation">(</span>resultContext<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>resultSet<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ResultMap</span> discriminatedResultMap <span class="token operator">=</span> <span class="token function">resolveDiscriminatedResultMap</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> rowValue <span class="token operator">=</span> <span class="token function">getRowValue</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> discriminatedResultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">storeObject</span><span class="token punctuation">(</span>resultHandler<span class="token punctuation">,</span> resultContext<span class="token punctuation">,</span> rowValue<span class="token punctuation">,</span> parentMapping<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>skipRows就是分页的具体实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">skipRows</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">ResultSet</span><span class="token punctuation">.</span><span class="token constant">TYPE_FORWARD_ONLY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果结果集类型不是只能往前滚动，offset不是0，则结果集直接定位到offset</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rowBounds<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">NO_ROW_OFFSET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      rs<span class="token punctuation">.</span><span class="token function">absolute</span><span class="token punctuation">(</span>rowBounds<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果结果集类型是只能往前滚动，则一条条往前翻滚，直到offset</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowBounds<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过skipRows方法，就能定位到要获取结果的位置了。接下来就是RowBounds的limit属性发挥作用的地方了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldProcessMoreRows</span><span class="token punctuation">(</span><span class="token class-name">ResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> context<span class="token punctuation">.</span><span class="token function">getResultCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> rowBounds<span class="token punctuation">.</span><span class="token function">getLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>shouldProcessMoreRows方法中断取的结果条数是不是到了limit限制的条数，如果没到就继续取，否则退出while循环</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>Mybatis分页属于逻辑分页，存在性能问题，不建议使用</li><li>分页信息通过RowBounds定义</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（八）：插件机制</title>
      <link href="/2021/08/26/mybatis/mybatis-08/"/>
      <url>/2021/08/26/mybatis/mybatis-08/</url>
      
        <content type="html"><![CDATA[<h2 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>微内核架构，也就是插件化架构，是一种面向功能进行拆分的可扩展架构。指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。插件分为两类，一类是对系统的补充，一类是对系统默认功能的自定义修改。Mybatis的插件机制就属于第二类，实现了拦截器的功能，可拦截特定对象进行自定义处理。</p><h3 id="拦截的目标对象"><a href="#拦截的目标对象" class="headerlink" title="拦截的目标对象"></a>拦截的目标对象</h3><p>Mybatis拦截的对象就是其最重要的4大对象，创建这4大对象之后都对其进行了代理包装，之后代理类就代替了这4大对象进行操作。</p><ol><li>ParameterHandler</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ParameterHandler</span> <span class="token function">newParameterHandler</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">ParameterHandler</span> parameterHandler <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getLang</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createParameterHandler</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  parameterHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterHandler</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>parameterHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> parameterHandler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>ResultSetHandler</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ResultSetHandler</span> <span class="token function">newResultSetHandler</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ParameterHandler</span> parameterHandler<span class="token punctuation">,</span>                                            <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">ResultSetHandler</span> resultSetHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResultSetHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterHandler<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  resultSetHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ResultSetHandler</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>resultSetHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>StatementHandler</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">StatementHandler</span> <span class="token function">newStatementHandler</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">StatementHandler</span> statementHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoutingStatementHandler</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StatementHandler</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> statementHandler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>Executor</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">newExecutor</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ExecutorType</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>  executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">SIMPLE</span> <span class="token operator">:</span> executorType<span class="token punctuation">;</span>  <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">BATCH</span> <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">REUSE</span> <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  executor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><p>Mybatis编码上采用责任链模式，通过动态代理包装组织插件，通过这些插件就可以自定义Mybatis的行为</p><h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><h4 id="Interceptor、-Intercepts、-Signature"><a href="#Interceptor、-Intercepts、-Signature" class="headerlink" title="Interceptor、@Intercepts、@Signature"></a>Interceptor、@Intercepts、@Signature</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>  <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>  <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// NOP</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个插件都需要实现Interceptor接口，实现其intercept方法，该方法执行自定义逻辑后返回执行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Intercepts</span> <span class="token punctuation">{</span>  <span class="token comment">/**   * Returns method signatures to intercept.   *   * @return method signatures   */</span>  <span class="token class-name">Signature</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@Documented@Retention(RetentionPolicy.RUNTIME)@Target({})public @interface Signature {  /**   * Returns the java type.   *   * @return the java type   */  Class&lt;?&gt; type();  /**   * Returns the method name.   *   * @return the method name   */  String method();  /**   * Returns java types for method argument.   * @return java types for method argument   */  Class&lt;?&gt;[] args();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Intercepts注解是个组合注解，包装@Signature注解，它们表示拦截器需要拦截的目标</p><p>举例1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">mapPluginShouldInterceptGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">AlwaysMapPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"Always"</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Anything"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">shouldNotInterceptToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">AlwaysMapPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token string">"Always"</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"get"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AlwaysMapPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Always"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子中AlwaysMapPlugin实现了Interceptor接口，指定拦截Map类的参数为Object的get方法，并实现了intercept方法。通过plugin方法包装HashMap类，当调用Map的get方法时，拦截器的intercept方法就被执行了，而调用其它方法则不会执行intercept方法。</p><h4 id="InterceptorChain"><a href="#InterceptorChain" class="headerlink" title="InterceptorChain"></a>InterceptorChain</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorChain</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interceptor</span><span class="token punctuation">&gt;</span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pluginAll</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Interceptor</span> interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      target <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interceptor</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拦截器责任链是Configuration的一个属性，保存着所有的拦截器集合interceptors，最重要的方法就是pluginAll，遍历所有的拦截器，调用它们的plugin方法进行层层包装，其实就是一个代理又包着一个代理，像洋葱一样。</p><h4 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plugin</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> signatureMap<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> signatureMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptor <span class="token operator">=</span> interceptor<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>signatureMap <span class="token operator">=</span> signatureMap<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">wrap</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> signatureMap <span class="token operator">=</span> <span class="token function">getSignatureMap</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token function">getAllInterfaces</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>        type<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        interfaces<span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> interceptor<span class="token punctuation">,</span> signatureMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> methods <span class="token operator">=</span> signatureMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> methods<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Invocation</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSignatureMap</span><span class="token punctuation">(</span><span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Intercepts</span> interceptsAnnotation <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Intercepts</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// issue #251</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptsAnnotation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PluginException</span><span class="token punctuation">(</span><span class="token string">"No @Intercepts annotation was found in interceptor "</span> <span class="token operator">+</span> interceptor<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Signature</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sigs <span class="token operator">=</span> interceptsAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> signatureMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Signature</span> sig <span class="token operator">:</span> sigs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span></span> methods <span class="token operator">=</span> signatureMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>sig<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> sig<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>sig<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sig<span class="token punctuation">.</span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methods<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PluginException</span><span class="token punctuation">(</span><span class="token string">"Could not find method on "</span> <span class="token operator">+</span> sig<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" named "</span> <span class="token operator">+</span> sig<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">". Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> signatureMap<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAllInterfaces</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> signatureMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> interfaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">:</span> type<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>signatureMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          interfaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> interfaces<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态代理增强类是InvocationHandler执行器，通过InvocationHandler的invoke方法实现逻辑增强。Plugin类实现了InvocationHandler接口。其最重要的方法就是wrap、invoke方法。wrap方法用来包装创建代理类，invoke方法执行拦截器的intercept方法。</p><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><ol><li>自定义插件类实现Interceptor接口，在intercept方法中实现自定义逻辑，指定需要拦截的对象方法</li><li>插件注册到Configuration中</li><li>创建4大对象的时候对这4大对象进行包装生成层层代理类后用来替代4大对象</li><li>执行SQL的时候调用4大对象的方法时，如果是要被拦截的方法，则先执行Interceptor的intercept方法的自定义逻辑后再执行4大对象的原方法</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（七）：动态SQL</title>
      <link href="/2021/08/21/mybatis/mybatis-07/"/>
      <url>/2021/08/21/mybatis/mybatis-07/</url>
      
        <content type="html"><![CDATA[<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>作为一个crud boy，写SQL是日常操作。而拼接SQL是一件特别恶心的事情，一不小心就拼错了。而且如果需要根据条件动态拼接SQL那更是恶心了。为了解决处理掉这种恶心的事情，Mybatis提供了动态SQL的强大特性，通过<strong>trim,where,set,foreach,if,choose,when,otherwise,bind</strong>标签节点使编写强大SQL变得简单而且优雅。</p><p>根据参数动态生成复杂的查询SQL</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findPost<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  SELECT *  FROM POST P  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author_id != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>AND author_id = #{author_id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          AND id IN          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item_id<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>#{ids[${index}]}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AND<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byBlogId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据参数生成复杂的更新SQL</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateAuthorIfNecessary<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Author<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    update Author    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>username=#{username},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>password=#{password},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>email=#{email},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bio != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>bio=#{bio}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据参数生成复杂的插入SQL</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Author<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectNum<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>    insert into Author (username,password,email,bio)    values (#{username},#{password},#{email},#{bio})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据参数生成复杂的删除SQL</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    delete from Author where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>在分析SQL生成流程前，先看看表示SQL的关键类</p><h4 id="SqlSource"><a href="#SqlSource" class="headerlink" title="SqlSource"></a>SqlSource</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">{</span>  <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SqlSource接口只定义了一个方法getBoundSql，表示根据入参生成SQL返回BoundSql</p><p>SqlSource接口有4个实现类</p><p><img src="/medias/assets/mybatis/20210821112127.png"></p><ol><li>StaticSqlSource静态SQL，DynamicSqlSource、RawSqlSource处理过后都会转成StaticSqlSource</li><li>DynamicSqlSource处理包含${}、动态SQL节点的</li><li>RawSqlSource处理不包含${}、动态SQL节点的</li><li>ProviderSqlSource动态SQL，处理通过代码生成SQL</li></ol><h4 id="BoundSql"><a href="#BoundSql" class="headerlink" title="BoundSql"></a>BoundSql</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoundSql</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> additionalParameters<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MetaObject</span> metaParameters<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BoundSql包含了SQL以及入参映射、入参这些重要的信息，最终拿来设置到Statement</p><h4 id="LanguageDriver"><a href="#LanguageDriver" class="headerlink" title="LanguageDriver"></a>LanguageDriver</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LanguageDriver</span> <span class="token punctuation">{</span>  <span class="token class-name">ParameterHandler</span> <span class="token function">createParameterHandler</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">XNode</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">String</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LanguageDriver能够根据XML里的SQL语句节点、注解中的SQL字符串生成SqlSource对象。</p><p>LanguageDriver的类关系如下</p><p><img src="/medias/assets/mybatis/20210821120016.png"></p><p>默认使用的是XMLLanguageDriver</p><h4 id="SqlNode"><a href="#SqlNode" class="headerlink" title="SqlNode"></a>SqlNode</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SqlNode</span> <span class="token punctuation">{</span>  <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SqlNode只声明了一个apply方法，接收的是DynamicContext上下文对象，返回的是个布尔值。</p><p><img src="/medias/assets/mybatis/20210821120804.png"></p><p>子类分别对应了trim,where,set,foreach,if,choose,when,otherwise,bind这几个标签。</p><p>SqlNode就是一个个SQL片段节点，如果apply方法返回true，表示这个SQL片段是要加到最终的SQL语句里面去。</p><h4 id="DynamicContext"><a href="#DynamicContext" class="headerlink" title="DynamicContext"></a>DynamicContext</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicContext</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ContextMap</span> bindings<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringJoiner</span> sqlBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> uniqueNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DynamicContext是个动态SQL解析的时候的一个上下文，bindings存放的是需要传入到SQL中的参数，sqlBuilder保存的是SQL语句</p><h4 id="XMLScriptBuilder"><a href="#XMLScriptBuilder" class="headerlink" title="XMLScriptBuilder"></a>XMLScriptBuilder</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLScriptBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBuilder</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">XNode</span> context<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> isDynamic<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">NodeHandler</span><span class="token punctuation">&gt;</span></span> nodeHandlerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XMLScriptBuilder的职责是解析动态SQL标签构建SqlSource。其中属性包括</p><ul><li><p>context：整个SQL的节点</p></li><li><p>isDynamic：是否是动态SQL（只要包含${}、动态SQL节点其中之一，就是true）</p></li><li><p>parameterType：SQL入参Class对象</p></li><li><p>nodeHandlerMap：处理动态SQL节点的Handler</p></li></ul><p>构造该对象的时候就会初始化动态SQL节点的Handler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initNodeHandlerMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"trim"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrimHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"where"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WhereHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SetHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"foreach"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ForEachHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"if"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IfHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"choose"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChooseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"when"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IfHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"otherwise"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OtherwiseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nodeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bind"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BindHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其主要方法是parseScriptNode，该方法会解析动态SQL节点并创建SqlSource对象</p><h4 id="NodeHandler"><a href="#NodeHandler" class="headerlink" title="NodeHandler"></a>NodeHandler</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>NodeHandler接口声明了handleNode方法，参数是动态SQL节点和接收处理结果的SqlNode集合。其子类分别是TrimHandler、WhereHandler、ForEachHandler、IfHandler、ChooseHandler、OtherwiseHandler、BindHandler。从名字已经看出来它们的处理对象是谁了。</p><p>关键的类都出来了，现在要做的是就是看看Mybatis是如何把它们组合起来的。</p><h4 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h4><p>XMLStatementBuilder解析Mapper文件SQL节点select、insert、update、delete的时候，其parseStatementNode方法创建了LanguageDriver类，如果没有另外配置默认是XMLLanguageDriver,随后通过XMLLanguageDriver的createSqlSource方法创建SqlSource</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ......</span>    <span class="token class-name">LanguageDriver</span> langDriver <span class="token operator">=</span> <span class="token function">getLanguageDriver</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> lang <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"lang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LanguageDriver</span> langDriver <span class="token operator">=</span> <span class="token function">getLanguageDriver</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> langDriver<span class="token punctuation">.</span><span class="token function">createSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> context<span class="token punctuation">,</span> parameterTypeClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ......</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随后创建了XMLScriptBuilder对象，并调用了其parseScriptNode方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">createSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">XNode</span> script<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">XMLScriptBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLScriptBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> script<span class="token punctuation">,</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">parseScriptNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先是调用自身的parseDynamicTags方法解析了整个SQL里的所有动态SQL节点，获得根节点MixedSqlNode，然后再根据isDynamic创建不同的SqlSource对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SqlSource</span> <span class="token function">parseScriptNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">MixedSqlNode</span> rootSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isDynamic<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> rootSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    sqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RawSqlSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> rootSqlNode<span class="token punctuation">,</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sqlSource<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MixedSqlNode类是SqlNode的子类，其属性contents包含了整个SQL的所有SqlNode，以及实现了apply方法，作用就是遍历所有的SqlNode然后再次调用它们的apply方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MixedSqlNode</span> <span class="token keyword">implements</span> <span class="token class-name">SqlNode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">MixedSqlNode</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>contents <span class="token operator">=</span> contents<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    contents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>node <span class="token operator">-&gt;</span> node<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parseDynamicTags每次处理一个节点，处理嵌套的节点需要递归调用该方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">MixedSqlNode</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> contents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">NodeList</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历该节点下的所有子节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">XNode</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">newXNode</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">CDATA_SECTION_NODE</span> <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">TEXT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果是CDATA或者是TEXT节点,则创建TextSqlNode节点</span>      <span class="token class-name">String</span> data <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringBody</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">TextSqlNode</span> textSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextSqlNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果包含${}或者是包含动态SQL节点的都是动态SQL</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>textSqlNode<span class="token punctuation">.</span><span class="token function">isDynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 加到结果集中</span>        contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>textSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        isDynamic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果不是动态节点则创建静态StaticTextSqlNode节点并加到结果集中</span>        contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticTextSqlNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">ELEMENT_NODE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// issue #628</span>      <span class="token comment">// 如果是元素节点,根据节点名词判断是否有合适的节点处理器,如果有就调用处理器的handleNode方法,否则抛出异常</span>      <span class="token class-name">String</span> nodeName <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">NodeHandler</span> handler <span class="token operator">=</span> nodeHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Unknown element &lt;"</span> <span class="token operator">+</span> nodeName <span class="token operator">+</span> <span class="token string">"&gt; in SQL statement."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      handler<span class="token punctuation">.</span><span class="token function">handleNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>      isDynamic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MixedSqlNode</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看NodeHandler的子类们是怎么处理节点的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">BindHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">BindHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> name <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> expression <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">VarDeclSqlNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VarDeclSqlNode</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">TrimHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">TrimHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> prefix <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"prefix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> prefixOverrides <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"prefixOverrides"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> suffix <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"suffix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> suffixOverrides <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"suffixOverrides"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TrimSqlNode</span> trim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrimSqlNode</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> mixedSqlNode<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> prefixOverrides<span class="token punctuation">,</span> suffix<span class="token punctuation">,</span> suffixOverrides<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>trim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">WhereHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">WhereHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">WhereSqlNode</span> where <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WhereSqlNode</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> mixedSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>where<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SetHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">SetHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SetSqlNode</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetSqlNode</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> mixedSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ForEachHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">ForEachHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> collection <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> item <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> index <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token keyword">open</span> <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> close <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> separator <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ForEachSqlNode</span> forEachSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForEachSqlNode</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> mixedSqlNode<span class="token punctuation">,</span> collection<span class="token punctuation">,</span> index<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token keyword">open</span><span class="token punctuation">,</span> close<span class="token punctuation">,</span> separator<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>forEachSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">IfHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">IfHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> test <span class="token operator">=</span> nodeToHandle<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IfSqlNode</span> ifSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IfSqlNode</span><span class="token punctuation">(</span>mixedSqlNode<span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ifSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">OtherwiseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">OtherwiseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MixedSqlNode</span> mixedSqlNode <span class="token operator">=</span> <span class="token function">parseDynamicTags</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mixedSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChooseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">ChooseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Prevent Synthetic Access</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNode</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> nodeToHandle<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> targetContents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> whenSqlNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> otherwiseSqlNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handleWhenOtherwiseNodes</span><span class="token punctuation">(</span>nodeToHandle<span class="token punctuation">,</span> whenSqlNodes<span class="token punctuation">,</span> otherwiseSqlNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SqlNode</span> defaultSqlNode <span class="token operator">=</span> <span class="token function">getDefaultSqlNode</span><span class="token punctuation">(</span>otherwiseSqlNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ChooseSqlNode</span> chooseSqlNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChooseSqlNode</span><span class="token punctuation">(</span>whenSqlNodes<span class="token punctuation">,</span> defaultSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    targetContents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>chooseSqlNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleWhenOtherwiseNodes</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> chooseSqlNode<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> ifSqlNodes<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> defaultSqlNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> chooseSqlNode<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> nodeName <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">NodeHandler</span> handler <span class="token operator">=</span> nodeHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">IfHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">handleNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> ifSqlNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">OtherwiseHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">handleNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> defaultSqlNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">SqlNode</span> <span class="token function">getDefaultSqlNode</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SqlNode</span><span class="token punctuation">&gt;</span></span> defaultSqlNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SqlNode</span> defaultSqlNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultSqlNodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      defaultSqlNode <span class="token operator">=</span> defaultSqlNodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultSqlNodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Too many default (otherwise) elements in choose statement."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> defaultSqlNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，SqlSource对象就已经构建好存在了MappedStatement对象里面，剩下的就是需要执行SQL语句的时候根据参数再把最终执行的SQL语句生成即可。跟踪查询过程</p><p>执行查询SQL都会经过BaseExecutor的query方法，在这里，取出了MappedStatement对象里的BoundSql对象，然后继续传递到下一个query方法。这里的getBoundSql是关键</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用了SqlSource的关键方法getBaoundSql生成BoundSql对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMappings <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> parameterMappings<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    boundSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoundSql</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterMap<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// check for nested result maps in parameter mappings (issue #30)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ParameterMapping</span> pm <span class="token operator">:</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> rmId <span class="token operator">=</span> pm<span class="token punctuation">.</span><span class="token function">getResultMapId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ResultMap</span> rm <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getResultMap</span><span class="token punctuation">(</span>rmId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>rm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hasNestedResultMaps <span class="token operator">|=</span> rm<span class="token punctuation">.</span><span class="token function">hasNestedResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包含${}、动态SQL节点的使用DynamicSqlSource、否则使用RawSqlSource</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlNode</span> rootSqlNode<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">DynamicSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> rootSqlNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rootSqlNode <span class="token operator">=</span> rootSqlNode<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建上下文保存处理结果，这里需要传递参数对象，因为${}这种直接拼接的参数是在apply方法里要拼接进去的</span>    <span class="token class-name">DynamicContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicContext</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 应用动态SQL节点</span>    rootSqlNode<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建SqlSourceBuilder</span>    <span class="token class-name">SqlSourceBuilder</span> sqlSourceParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSourceBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 参数Class对象</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType <span class="token operator">=</span> parameterObject <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> parameterObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析生成StaticSqlSource,去除多余的空格压缩SQL,把占位符#{}换成?</span>    <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> sqlSourceParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建BoundSql对象</span>    <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>boundSql<span class="token operator">::</span><span class="token function">setAdditionalParameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RawSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">RawSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> rootSqlNode<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> <span class="token function">getSql</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> rootSqlNode<span class="token punctuation">)</span><span class="token punctuation">,</span> parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">RawSqlSource</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建SqlSourceBuilder</span>    <span class="token class-name">SqlSourceBuilder</span> sqlSourceParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSourceBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 入参类型Class对象</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> parameterType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">:</span> parameterType<span class="token punctuation">;</span>    <span class="token comment">// 解析生成StaticSqlSource,去除多余的空格压缩SQL,把占位符#{}换成?</span>    sqlSource <span class="token operator">=</span> sqlSourceParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getSql</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">SqlNode</span> rootSqlNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建上下文保存处理结果，这里不需要传递参数</span>    <span class="token class-name">DynamicContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicContext</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 应用静态节点处理</span>    rootSqlNode<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建BoundSql对象</span>    <span class="token keyword">return</span> sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DynamicSqlSource和RawSqlSource不同之处很小，就三句不同而已</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token class-name">DynamicContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicContext</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> sqlSourceParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameterType<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">getBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>boundSql<span class="token operator">::</span><span class="token function">setAdditionalParameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先他们都会调用节点的apply方法，各个节点的apply实现不同处理，但是最终都会调用StaticTextSqlNode的apply方法把SQL片段拼接起来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context<span class="token punctuation">.</span><span class="token function">appendSql</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是动态SQL，那么总会有TextSqlNode这个节点，而这个节点的apply方法比较特殊,它会通过GenericTokenParser的parse方法处理${}这种拼接参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">DynamicContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">GenericTokenParser</span> parser <span class="token operator">=</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BindingTokenParser</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> injectionFilter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除反斜杠并校验${}配对情况</span>  context<span class="token punctuation">.</span><span class="token function">appendSql</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">GenericTokenParser</span> <span class="token function">createParser</span><span class="token punctuation">(</span><span class="token class-name">TokenHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GenericTokenParser</span><span class="token punctuation">(</span><span class="token string">"${"</span><span class="token punctuation">,</span> <span class="token string">"}"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理过后就会直接把参数拼接到SQL上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// search open token</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>openToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> expression <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> src<span class="token punctuation">[</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// this open token is escaped. remove the backslash and continue.</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> start <span class="token operator">-</span> offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>openToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        offset <span class="token operator">=</span> start <span class="token operator">+</span> openToken<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// found open token. let's search close token.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expression <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          expression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          expression<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> start <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        offset <span class="token operator">=</span> start <span class="token operator">+</span> openToken<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>closeToken<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> offset <span class="token operator">&amp;&amp;</span> src<span class="token punctuation">[</span>end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// this close token is escaped. remove the backslash and continue.</span>            expression<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> end <span class="token operator">-</span> offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>closeToken<span class="token punctuation">)</span><span class="token punctuation">;</span>            offset <span class="token operator">=</span> end <span class="token operator">+</span> closeToken<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            end <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>closeToken<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            expression<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> end <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// close token was not found.</span>          builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> start<span class="token punctuation">,</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>          offset <span class="token operator">=</span> src<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 直接拼接参数或者?占位符</span>          builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">handleToken</span><span class="token punctuation">(</span>expression<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          offset <span class="token operator">=</span> end <span class="token operator">+</span> closeToken<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      start <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>openToken<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> src<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> src<span class="token punctuation">.</span>length <span class="token operator">-</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后DynamicSqlSource和RawSqlSource都会调用SqlSourceBuilder的parse方法把#{}变为?占位符</p><p>到了这里，SQL就组装完成了，和普通的SQL没什么区别了，只要交给JDBC的Statement去执行即可。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三十）</title>
      <link href="/2021/08/19/architecture/architecture-30/"/>
      <url>/2021/08/19/architecture/architecture-30/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务拆分技巧"><a href="#微服务拆分技巧" class="headerlink" title="微服务拆分技巧"></a>微服务拆分技巧</h2><h3 id="微服务架构整体思路"><a href="#微服务架构整体思路" class="headerlink" title="微服务架构整体思路"></a>微服务架构整体思路</h3><p><img src="/medias/assets/architecture/20210819195711.png"></p><h3 id="常见场景实施建议"><a href="#常见场景实施建议" class="headerlink" title="常见场景实施建议"></a>常见场景实施建议</h3><p><img src="/medias/assets/architecture/20210819195911.png"></p><h3 id="DDD"><a href="#DDD" class="headerlink" title="DDD"></a>DDD</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><img src="/medias/assets/architecture/20210819202247.png"></p><h4 id="DDD难以落地核心问题"><a href="#DDD难以落地核心问题" class="headerlink" title="DDD难以落地核心问题"></a>DDD难以落地核心问题</h4><p><img src="/medias/assets/architecture/20210819202356.png"></p><h4 id="业务边界划分"><a href="#业务边界划分" class="headerlink" title="业务边界划分"></a>业务边界划分</h4><p><img src="/medias/assets/architecture/20210819202439.png"></p><p><img src="/medias/assets/architecture/20210819202514.png"></p><h3 id="按照业务拆分微服务"><a href="#按照业务拆分微服务" class="headerlink" title="按照业务拆分微服务"></a>按照业务拆分微服务</h3><p><img src="/medias/assets/architecture/20210819202605.png"></p><h4 id="拆分技巧"><a href="#拆分技巧" class="headerlink" title="拆分技巧"></a>拆分技巧</h4><p><img src="/medias/assets/architecture/20210819202659.png"></p><h5 id="三个火枪手原则"><a href="#三个火枪手原则" class="headerlink" title="三个火枪手原则"></a>三个火枪手原则</h5><p><img src="/medias/assets/architecture/20210819203155.png"></p><p>举例</p><p><img src="/medias/assets/architecture/20210819203351.png"></p><h5 id="一对一服务映射"><a href="#一对一服务映射" class="headerlink" title="一对一服务映射"></a>一对一服务映射</h5><p><img src="/medias/assets/architecture/20210819203502.png"></p><h5 id="多对一服务映射"><a href="#多对一服务映射" class="headerlink" title="多对一服务映射"></a>多对一服务映射</h5><p><img src="/medias/assets/architecture/20210819203631.png"></p><h5 id="一对多服务映射"><a href="#一对多服务映射" class="headerlink" title="一对多服务映射"></a>一对多服务映射</h5><p><img src="/medias/assets/architecture/20210819203753.png"></p><h3 id="按照质量拆分微服务"><a href="#按照质量拆分微服务" class="headerlink" title="按照质量拆分微服务"></a>按照质量拆分微服务</h3><h4 id="按性能拆分"><a href="#按性能拆分" class="headerlink" title="按性能拆分"></a>按性能拆分</h4><p><img src="/medias/assets/architecture/20210819203915.png"></p><h4 id="按业务重要程度拆分"><a href="#按业务重要程度拆分" class="headerlink" title="按业务重要程度拆分"></a>按业务重要程度拆分</h4><p><img src="/medias/assets/architecture/20210819204017.png"></p><h4 id="按可用性拆分"><a href="#按可用性拆分" class="headerlink" title="按可用性拆分"></a>按可用性拆分</h4><p><img src="/medias/assets/architecture/20210819204104.png"></p><h4 id="按稳定性拆分"><a href="#按稳定性拆分" class="headerlink" title="按稳定性拆分"></a>按稳定性拆分</h4><p><img src="/medias/assets/architecture/20210819204152.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86%E6%8A%80%E5%B7%A7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三十一）</title>
      <link href="/2021/08/18/architecture/architecture-31/"/>
      <url>/2021/08/18/architecture/architecture-31/</url>
      
        <content type="html"><![CDATA[<h2 id="中台剖析和实现技巧"><a href="#中台剖析和实现技巧" class="headerlink" title="中台剖析和实现技巧"></a>中台剖析和实现技巧</h2><h3 id="中台"><a href="#中台" class="headerlink" title="中台"></a>中台</h3><h4 id="中台发展史"><a href="#中台发展史" class="headerlink" title="中台发展史"></a>中台发展史</h4><p><img src="/medias/assets/architecture/20210819213320.png"></p><h4 id="演进过程"><a href="#演进过程" class="headerlink" title="演进过程"></a>演进过程</h4><h5 id="1-无共享架构——大烟囱架构"><a href="#1-无共享架构——大烟囱架构" class="headerlink" title="1. 无共享架构——大烟囱架构"></a>1. 无共享架构——大烟囱架构</h5><p><img src="/medias/assets/architecture/20210819213557.png"></p><h5 id="2-共享架构——IaaS架构"><a href="#2-共享架构——IaaS架构" class="headerlink" title="2. 共享架构——IaaS架构"></a>2. 共享架构——IaaS架构</h5><p><img src="/medias/assets/architecture/20210819213719.png"></p><h5 id="3-共享架构——PasS架构"><a href="#3-共享架构——PasS架构" class="headerlink" title="3. 共享架构——PasS架构"></a>3. 共享架构——PasS架构</h5><p><img src="/medias/assets/architecture/20210819213806.png"></p><h5 id="4-共享架构——SaaS架构"><a href="#4-共享架构——SaaS架构" class="headerlink" title="4. 共享架构——SaaS架构"></a>4. 共享架构——SaaS架构</h5><p><img src="/medias/assets/architecture/20210819213916.png"></p><h5 id="5-共享架构——中台架构"><a href="#5-共享架构——中台架构" class="headerlink" title="5.  共享架构——中台架构"></a>5.  共享架构——中台架构</h5><p><img src="/medias/assets/architecture/20210819214029.png"></p><h3 id="中台的定义"><a href="#中台的定义" class="headerlink" title="中台的定义"></a>中台的定义</h3><h4 id="业务中台"><a href="#业务中台" class="headerlink" title="业务中台"></a>业务中台</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>业务中台，是将企业内部多个相似业务的通用业务能力沉淀到平台，以减少重复建设，提升业务开发效率的一种架构模式</p><p><img src="/medias/assets/architecture/20210819214409.png"></p><h5 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h5><p>相似业务能力共享，避免大量重复开发，提升开发效率。</p><h5 id="指导"><a href="#指导" class="headerlink" title="指导"></a>指导</h5><ol><li>业务相似度越高，业务中台价值越大，建议相似度达到60%以上的多个业务共建中台，例如“快车+专车”，“淘宝+天猫+咸鱼”，”火山 + 抖音 + 西瓜“。</li><li>评估业务相似度，需要依赖业务专家，而不是一个单纯的技术工作。</li><li>强行将相似度低的业务塞进一个中台，不但不会提升开发效率，还会大大降低效率。</li></ol><h4 id="数据中台"><a href="#数据中台" class="headerlink" title="数据中台"></a>数据中台</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>数据中台，是将企业所有业务的数据沉淀到同一平台，支持业务间数据打通以及数据复用，提升企业运营效率的一种架构模式</p><p><img src="/medias/assets/architecture/20210819214628.png"></p><h5 id="价值-1"><a href="#价值-1" class="headerlink" title="价值"></a>价值</h5><p>数据打通和复用，避免数据孤岛，提升运营效率</p><h5 id="指导-1"><a href="#指导-1" class="headerlink" title="指导"></a>指导</h5><ol><li>使用数据中台的业务越多，数据中台价值越大。</li><li>数据中台的价值体现在：统一数据平台、跨业务的数据打通、跨业务的数据复用（挖掘）。</li><li>跨业务的数据复用：理想很丰满，现实比较骨感，受限于业务熟悉度和组织结构的相关约束。</li></ol><h3 id="中台带来的问题"><a href="#中台带来的问题" class="headerlink" title="中台带来的问题"></a>中台带来的问题</h3><h4 id="业务支撑粒度不同，小业务抱中台大腿，中台抱大业务大腿"><a href="#业务支撑粒度不同，小业务抱中台大腿，中台抱大业务大腿" class="headerlink" title="业务支撑粒度不同，小业务抱中台大腿，中台抱大业务大腿"></a>业务支撑粒度不同，小业务抱中台大腿，中台抱大业务大腿</h4><p><img src="/medias/assets/architecture/20210819215418.png"></p><h4 id="中台与业务的边界难以明确"><a href="#中台与业务的边界难以明确" class="headerlink" title="中台与业务的边界难以明确"></a>中台与业务的边界难以明确</h4><p><img src="/medias/assets/architecture/20210819215541.png"></p><h4 id="业务相互影响，中台的全流程效率并不高"><a href="#业务相互影响，中台的全流程效率并不高" class="headerlink" title="业务相互影响，中台的全流程效率并不高"></a>业务相互影响，中台的全流程效率并不高</h4><p><img src="/medias/assets/architecture/20210819215657.png"></p><h3 id="中台落地技巧"><a href="#中台落地技巧" class="headerlink" title="中台落地技巧"></a>中台落地技巧</h3><h4 id="用Pipeline封装不同的业务流程"><a href="#用Pipeline封装不同的业务流程" class="headerlink" title="用Pipeline封装不同的业务流程"></a>用Pipeline封装不同的业务流程</h4><p><img src="/medias/assets/architecture/20210819215909.png"></p><h4 id="用SPI封装不同的业务"><a href="#用SPI封装不同的业务" class="headerlink" title="用SPI封装不同的业务"></a>用SPI封装不同的业务</h4><p><img src="/medias/assets/architecture/20210819220011.png"></p><p>举例</p><p><img src="/medias/assets/architecture/20210819220047.png"></p><h4 id="Pipeline和SPI对比"><a href="#Pipeline和SPI对比" class="headerlink" title="Pipeline和SPI对比"></a>Pipeline和SPI对比</h4><p><img src="/medias/assets/architecture/20210819220124.png"></p><p><strong>实际情况Pipeline会更加合适，因为中台和业务边界很难界定，适用SPI落地开发难度会非常大</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E4%B8%AD%E5%8F%B0%E5%89%96%E6%9E%90%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%8A%80%E5%B7%A7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十九）</title>
      <link href="/2021/08/18/architecture/architecture-29/"/>
      <url>/2021/08/18/architecture/architecture-29/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务架基础设施选型"><a href="#微服务架基础设施选型" class="headerlink" title="微服务架基础设施选型"></a>微服务架基础设施选型</h2><h3 id="微服务基础设施"><a href="#微服务基础设施" class="headerlink" title="微服务基础设施"></a>微服务基础设施</h3><p><img src="/medias/assets/architecture/20210115205733.png"></p><p><strong>核心设施：服务注册、服务发现、服务路由</strong></p><h3 id="微服务框架模式"><a href="#微服务框架模式" class="headerlink" title="微服务框架模式"></a>微服务框架模式</h3><h4 id="嵌入SDK式"><a href="#嵌入SDK式" class="headerlink" title="嵌入SDK式"></a>嵌入SDK式</h4><p><img src="/medias/assets/architecture/20210818211028.png"></p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p><img src="/medias/assets/architecture/20210818211533.png"></p><p><img src="/medias/assets/architecture/20210818211703.png"></p><h4 id="反向代理式"><a href="#反向代理式" class="headerlink" title="反向代理式"></a>反向代理式</h4><p><img src="/medias/assets/architecture/20210818211150.png"></p><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><p><img src="/medias/assets/architecture/20210818211825.png"></p><h4 id="网络代理式（Service-Mesh）"><a href="#网络代理式（Service-Mesh）" class="headerlink" title="网络代理式（Service Mesh）"></a>网络代理式（Service Mesh）</h4><p><img src="/medias/assets/architecture/20210818211300.png"></p><h5 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h5><p><img src="/medias/assets/architecture/20210818211910.png"></p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="/medias/assets/architecture/20210818211332.png"></p><h3 id="常见微服务框架"><a href="#常见微服务框架" class="headerlink" title="常见微服务框架"></a>常见微服务框架</h3><h4 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h4><p><img src="/medias/assets/architecture/20210818211533.png"></p><h4 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h4><p><img src="/medias/assets/architecture/20210818211703.png"></p><h3 id="如何选择开源微服务框架"><a href="#如何选择开源微服务框架" class="headerlink" title="如何选择开源微服务框架"></a>如何选择开源微服务框架</h3><p><img src="/medias/assets/architecture/20210818212057.png"></p><p><strong>遇事不决Spring，选择太多Apache</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十八）</title>
      <link href="/2021/08/17/architecture/architecture-28/"/>
      <url>/2021/08/17/architecture/architecture-28/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务架构陷阱与挑战"><a href="#微服务架构陷阱与挑战" class="headerlink" title="微服务架构陷阱与挑战"></a>微服务架构陷阱与挑战</h2><h3 id="六大陷阱"><a href="#六大陷阱" class="headerlink" title="六大陷阱"></a>六大陷阱</h3><p><img src="/medias/assets/architecture/20210817211724.png"></p><h4 id="粒度太细，关系复杂"><a href="#粒度太细，关系复杂" class="headerlink" title="粒度太细，关系复杂"></a>粒度太细，关系复杂</h4><p><img src="/medias/assets/architecture/20210817211907.png"></p><h4 id="粒度太细，团队效率下降"><a href="#粒度太细，团队效率下降" class="headerlink" title="粒度太细，团队效率下降"></a>粒度太细，团队效率下降</h4><p><img src="/medias/assets/architecture/20210817212026.png"></p><h4 id="粒度太细，问题定位困难"><a href="#粒度太细，问题定位困难" class="headerlink" title="粒度太细，问题定位困难"></a>粒度太细，问题定位困难</h4><p><img src="/medias/assets/architecture/20210817212118.png"></p><h4 id="粒度太细，系统性能下降"><a href="#粒度太细，系统性能下降" class="headerlink" title="粒度太细，系统性能下降"></a>粒度太细，系统性能下降</h4><p><img src="/medias/assets/architecture/20210817212234.png"></p><h4 id="缺乏基础设施，无法快速交付"><a href="#缺乏基础设施，无法快速交付" class="headerlink" title="缺乏基础设施，无法快速交付"></a>缺乏基础设施，无法快速交付</h4><p><img src="/medias/assets/architecture/20210817212327.png"></p><h4 id="缺乏基础设施，服务管理混乱"><a href="#缺乏基础设施，服务管理混乱" class="headerlink" title="缺乏基础设施，服务管理混乱"></a>缺乏基础设施，服务管理混乱</h4><p><img src="/medias/assets/architecture/20210817212555.png"></p><h3 id="四大挑战"><a href="#四大挑战" class="headerlink" title="四大挑战"></a>四大挑战</h3><p><img src="/medias/assets/architecture/20210817212721.png"></p><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><p>BASE理论之最终一致性</p><p><img src="/medias/assets/architecture/20210817213011.png"></p><h5 id="本地事务消息"><a href="#本地事务消息" class="headerlink" title="本地事务消息"></a>本地事务消息</h5><p><img src="/medias/assets/architecture/20210817213105.png"></p><h5 id="消息队列事务消息"><a href="#消息队列事务消息" class="headerlink" title="消息队列事务消息"></a>消息队列事务消息</h5><p><img src="/medias/assets/architecture/20210817213205.png"></p><h5 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h5><p><img src="/medias/assets/architecture/20210817213249.png"></p><h4 id="全局幂等"><a href="#全局幂等" class="headerlink" title="全局幂等"></a>全局幂等</h4><p><img src="/medias/assets/architecture/20210817213420.png"></p><h5 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h5><p><img src="/medias/assets/architecture/20210817213534.png"></p><h5 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h5><p>正常处理</p><p><img src="/medias/assets/architecture/20210817213619.png"></p><p>异常处理</p><p><img src="/medias/assets/architecture/20210817213837.png"></p><h4 id="接口兼容"><a href="#接口兼容" class="headerlink" title="接口兼容"></a>接口兼容</h4><p><img src="/medias/assets/architecture/20210817214041.png"></p><h4 id="接口循环调用"><a href="#接口循环调用" class="headerlink" title="接口循环调用"></a>接口循环调用</h4><p><img src="/medias/assets/architecture/20210817214107.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%99%B7%E9%98%B1%E5%92%8C%E6%8C%91%E6%88%98.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十七）</title>
      <link href="/2021/08/17/architecture/architecture-27/"/>
      <url>/2021/08/17/architecture/architecture-27/</url>
      
        <content type="html"><![CDATA[<h2 id="微服务架构与SOA"><a href="#微服务架构与SOA" class="headerlink" title="微服务架构与SOA"></a>微服务架构与SOA</h2><h3 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h3><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p><img src="/medias/assets/architecture/20210817190607.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><img src="/medias/assets/architecture/20210817190743.png"></p><h4 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h4><p><img src="/medias/assets/architecture/20210817190943.png"></p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><h4 id="历史-1"><a href="#历史-1" class="headerlink" title="历史"></a>历史</h4><p><img src="/medias/assets/architecture/20210817190840.png"></p><h4 id="剖析-1"><a href="#剖析-1" class="headerlink" title="剖析"></a>剖析</h4><p><img src="/medias/assets/architecture/20210817191041.png"></p><h3 id="微服务与SOA对比"><a href="#微服务与SOA对比" class="headerlink" title="微服务与SOA对比"></a>微服务与SOA对比</h3><p><img src="/medias/assets/architecture/20210817191143.png"></p><h3 id="软件架构进化过程"><a href="#软件架构进化过程" class="headerlink" title="软件架构进化过程"></a>软件架构进化过程</h3><p><img src="/medias/assets/architecture/20210817200301.png"></p><h3 id="微服务架构与其它可扩展架构"><a href="#微服务架构与其它可扩展架构" class="headerlink" title="微服务架构与其它可扩展架构"></a>微服务架构与其它可扩展架构</h3><h4 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h4><p>端到端的架构或者单个系统的内部架构，按照某种规则划分为不同的层级</p><p><img src="/medias/assets/architecture/20210817200649.png"></p><p><img src="/medias/assets/architecture/20210817200815.png"></p><h4 id="整洁架构"><a href="#整洁架构" class="headerlink" title="整洁架构"></a>整洁架构</h4><p><img src="/medias/assets/architecture/20210817200929.png"></p><h4 id="微内核架构"><a href="#微内核架构" class="headerlink" title="微内核架构"></a>微内核架构</h4><p><img src="/medias/assets/architecture/20210817201053.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%92%8CSOA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十六）</title>
      <link href="/2021/08/17/architecture/architecture-26/"/>
      <url>/2021/08/17/architecture/architecture-26/</url>
      
        <content type="html"><![CDATA[<h2 id="计算架构模式之接口高可用"><a href="#计算架构模式之接口高可用" class="headerlink" title="计算架构模式之接口高可用"></a>计算架构模式之接口高可用</h2><h3 id="接口高可用整体框架"><a href="#接口高可用整体框架" class="headerlink" title="接口高可用整体框架"></a>接口高可用整体框架</h3><p><img src="/medias/assets/architecture/20210817115229.png"></p><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p><img src="/medias/assets/architecture/20210817115358.png"></p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p><img src="/medias/assets/architecture/20210817115548.png"></p><h4 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h4><h5 id="固定时间窗口-amp-滑动时间窗口"><a href="#固定时间窗口-amp-滑动时间窗口" class="headerlink" title="固定时间窗口&amp;滑动时间窗口"></a>固定时间窗口&amp;滑动时间窗口</h5><p><img src="/medias/assets/architecture/20210817115827.png"></p><h5 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h5><p><img src="/medias/assets/architecture/20210817115944.png"></p><p>举例</p><p><img src="/medias/assets/architecture/20210817120043.png"></p><h5 id="漏桶算法变种——写缓冲（Buffer）"><a href="#漏桶算法变种——写缓冲（Buffer）" class="headerlink" title="漏桶算法变种——写缓冲（Buffer）"></a>漏桶算法变种——写缓冲（Buffer）</h5><p><img src="/medias/assets/architecture/20210817120351.png"></p><h5 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h5><p><img src="/medias/assets/architecture/20210817120536.png"></p><h3 id="排队"><a href="#排队" class="headerlink" title="排队"></a>排队</h3><p><img src="/medias/assets/architecture/20210817120654.png"></p><p><img src="/medias/assets/architecture/20210817120756.png"></p><p><img src="/medias/assets/architecture/20210817143701.png"></p><p><img src="/medias/assets/architecture/20210817143959.png"></p><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p><img src="/medias/assets/architecture/20210817144133.png"></p><p><img src="/medias/assets/architecture/20210817144238.png"></p><h3 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h3><p><img src="/medias/assets/architecture/20210817144332.png"></p><p><img src="/medias/assets/architecture/20210817144407.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8E%A5%E5%8F%A3%E9%AB%98%E5%8F%AF%E7%94%A8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十五）</title>
      <link href="/2021/08/16/architecture/architecture-25/"/>
      <url>/2021/08/16/architecture/architecture-25/</url>
      
        <content type="html"><![CDATA[<h2 id="负载均衡技巧"><a href="#负载均衡技巧" class="headerlink" title="负载均衡技巧"></a>负载均衡技巧</h2><h3 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h3><h4 id="轮询-amp-随机"><a href="#轮询-amp-随机" class="headerlink" title="轮询&amp;随机"></a>轮询&amp;随机</h4><h5 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h5><p>轮询：将请求依次发给服务器</p><p>随机：将请求随机发给服务器</p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><p>通用，无状态的负载均衡</p><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>实现简单</li><li>不会判断服务器状态，除非服务器连接丢失</li></ol><h5 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h5><ol><li>某个服务器当前因为触发了bug进入死循环导致CPU负载很高，负载均衡系统是不感知的，还是会继续将请求源源不断发送给它</li><li>集群中新老服务器配置不一样，负载均衡系统也是不关注服务器性能差异，分配的任务都是一样</li></ol><h4 id="加权轮询"><a href="#加权轮询" class="headerlink" title="加权轮询"></a>加权轮询</h4><h5 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h5><p>按照预先配置，将请求按照权重比例发送给不同服务器</p><h5 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h5><p>服务器处理能力有差异，例如新老服务器搭配使用</p><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>实现复杂，按照权重计算</li><li>不会判断服务器状态，除非服务器连接丢失</li><li>权限配置不合理导致过载（服务器处理能力并非按照硬件性能线性增长，很难估算配置）</li></ol><h5 id="问题场景-1"><a href="#问题场景-1" class="headerlink" title="问题场景"></a>问题场景</h5><p>新服务器CPU核数是老服务器核数的2倍，运维直接配置了2倍权重，结果导致新服务器过载</p><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><h6 id="权重等于请求数量"><a href="#权重等于请求数量" class="headerlink" title="权重等于请求数量"></a>权重等于请求数量</h6><p>例如给服务器1发送40个请求，然后再给服务器2发送40个请求，然后再给服务器3发送20个请求。</p><p>实现简单，但服务器资源利用可能不均匀，会出现毛刺现象。</p><h6 id="权重概率"><a href="#权重概率" class="headerlink" title="权重概率"></a>权重概率</h6><p>将所有服务器权重加起来，然后计算各个服务器的分配概率，用随机数区间来做分配。例如服务器1[0-39],服务器2[40-79],服务器3[80-99],生成0-99的随机数，落入哪个区就用哪个服务器。</p><h5 id="权重动态调整"><a href="#权重动态调整" class="headerlink" title="权重动态调整"></a>权重动态调整</h5><p>Ngnix的实现，兼顾服务器故障后的慢启动。</p><h4 id="负载优先"><a href="#负载优先" class="headerlink" title="负载优先"></a>负载优先</h4><h5 id="基本原理-2"><a href="#基本原理-2" class="headerlink" title="基本原理"></a>基本原理</h5><p>负载均衡系统将任务分配给当前负载最低的服务器，这里的负载根据不同的任务类型和业务场景，可以选用不同的指标来衡量。</p><h5 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h5><ol><li>LVS这种4层网络负载均衡设备，可以以“连接数”来判断服务器的状态，服务器连接数越大，说明服务器压力越大。</li><li>Ngnix这种7层网络负载系统，可以以“HTTP请求数”来判断服务器状态（Nginx内置的负载均衡算法不支持这种方式，需要进行扩展）</li></ol><h5 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>实现复杂，需要管理或者获取服务器状态</li><li>可以根据服务器状态进行负载均衡</li></ol><h4 id="性能优先"><a href="#性能优先" class="headerlink" title="性能优先"></a>性能优先</h4><h5 id="基本原理-3"><a href="#基本原理-3" class="headerlink" title="基本原理"></a>基本原理</h5><p>负载均衡系统将任务分配给当前性能最好的服务器，主要是以响应时间作为衡量标准</p><h5 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h5><p>Ngnix这种7层网络负载系统，可以以“HTTP响应时间”来判断服务器状态（Nginx内置的负载均衡算法不支持这种方式，需要进行扩展）</p><h5 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>实现复杂，需要统计请求处理时间，需要消耗一定的CPU运算资源（一般通过采用方式统计）</li><li>可以根据服务器性能进行负载均衡</li><li>如果服务器响应不经过负载均衡器，则不能应用这种算法</li></ol><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><h5 id="基本原理-4"><a href="#基本原理-4" class="headerlink" title="基本原理"></a>基本原理</h5><p>基于某个参数计算Hash值，将其映射到具体的服务器</p><h5 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h5><ol><li>有状态的任务，如购物车</li><li>任务是分片的，例如某个用户请求只能在某个服务器处理</li></ol><h5 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>实现简单</li><li>不会判断服务器状态，除非服务器连接丢失</li></ol><h5 id="常见Hash键"><a href="#常见Hash键" class="headerlink" title="常见Hash键"></a>常见Hash键</h5><ol><li>URL（缓存场景）</li><li>用户IP地址（session场景）</li></ol><h3 id="业务级别负载均衡技巧"><a href="#业务级别负载均衡技巧" class="headerlink" title="业务级别负载均衡技巧"></a>业务级别负载均衡技巧</h3><p>通用负载均衡算法是基于请求的，业务级别的负载均衡是基于业务内容的，<br>更灵活</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p><img src="/medias/assets/architecture/20210816215647.png"></p><h4 id="自定义HTTP-Header"><a href="#自定义HTTP-Header" class="headerlink" title="自定义HTTP Header"></a>自定义HTTP Header</h4><p><img src="/medias/assets/architecture/20210816215843.png"></p><h4 id="HTTP-Query-String"><a href="#HTTP-Query-String" class="headerlink" title="HTTP Query String"></a>HTTP Query String</h4><p><img src="/medias/assets/architecture/20210816215951.png"></p><h4 id="服务器性能估算"><a href="#服务器性能估算" class="headerlink" title="服务器性能估算"></a>服务器性能估算</h4><p><img src="/medias/assets/architecture/20210816220201.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%8A%80%E5%B7%A7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十四）</title>
      <link href="/2021/08/16/architecture/architecture-24/"/>
      <url>/2021/08/16/architecture/architecture-24/</url>
      
        <content type="html"><![CDATA[<h2 id="计算架构模式之负载均衡架构"><a href="#计算架构模式之负载均衡架构" class="headerlink" title="计算架构模式之负载均衡架构"></a>计算架构模式之负载均衡架构</h2><h3 id="多级负载均衡架构"><a href="#多级负载均衡架构" class="headerlink" title="多级负载均衡架构"></a>多级负载均衡架构</h3><h4 id="4级负载均衡架构"><a href="#4级负载均衡架构" class="headerlink" title="4级负载均衡架构"></a>4级负载均衡架构</h4><p><img src="/medias/assets/architecture/20210816084015.png"></p><h4 id="3级负载均衡架构"><a href="#3级负载均衡架构" class="headerlink" title="3级负载均衡架构"></a>3级负载均衡架构</h4><p><img src="/medias/assets/architecture/20210816084148.png"></p><h4 id="2级负载均衡架构"><a href="#2级负载均衡架构" class="headerlink" title="2级负载均衡架构"></a>2级负载均衡架构</h4><p><img src="/medias/assets/architecture/20210816084241.png"></p><h3 id="负载均衡技术"><a href="#负载均衡技术" class="headerlink" title="负载均衡技术"></a>负载均衡技术</h3><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p><img src="/medias/assets/architecture/20210816084632.png"></p><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><p>地理位置和机房级别的负载均衡</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>标准协议</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>能力有限，不够灵活</li><li>DNS劫持</li><li>DNS缓存</li></ol><h4 id="HTTP-DNS"><a href="#HTTP-DNS" class="headerlink" title="HTTP-DNS"></a>HTTP-DNS</h4><p><img src="/medias/assets/architecture/20210816084807.png"></p><h5 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h5><p>App、客户端</p><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>可以根据业务和团队技术灵活控制</li><li>非标准协议，不通用，不太适合Web业务</li></ol><h5 id="架构设计关键点"><a href="#架构设计关键点" class="headerlink" title="架构设计关键点"></a>架构设计关键点</h5><ol><li>智能调度模块可以独立也可以嵌入到HTTP-DNS，一般独立成运维系统，因为智能调度系统有很多作用</li><li>正常走DNS，异常的时候才走HTTP-DNS</li><li>SDK会缓存HTTP-DNS解析结果</li></ol><h4 id="GSLB"><a href="#GSLB" class="headerlink" title="GSLB"></a>GSLB</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>GSLB（Global Server Load Balancing）全局负载均衡，主要用于在多地区拥有自己的服务器的节点，为了使全球用户只以一个IP地址或域名就能访问到离自己最近的服务器，从而获得最快的访问速度</p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><p>适合超大规模业务，多地甚至全球部署的业务，例如Google、Facebook等</p><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>功能强大，可以就近访问、容灾切换、流量调节</li><li>实现复杂</li></ol><h4 id="基于DNS的GSLB"><a href="#基于DNS的GSLB" class="headerlink" title="基于DNS的GSLB"></a>基于DNS的GSLB</h4><p><img src="/medias/assets/architecture/20210816092949.png"></p><h5 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>实现简单、实施容易、成本低</li><li>可能判断不准确，例如用户手工指定了DNS服务器</li></ol><h4 id="基于HTTP-redirect的GSLB"><a href="#基于HTTP-redirect的GSLB" class="headerlink" title="基于HTTP redirect的GSLB"></a>基于HTTP redirect的GSLB</h4><p><img src="/medias/assets/architecture/20210816100759.png"></p><h5 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>能够拿到用户真实ip地址，判断准确</li><li>只适用HTTP业务</li></ol><h4 id="基于IP欺骗的GSLB"><a href="#基于IP欺骗的GSLB" class="headerlink" title="基于IP欺骗的GSLB"></a>基于IP欺骗的GSLB</h4><p><img src="/medias/assets/architecture/20210816100950.png"></p><h5 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>适用所有业务</li><li>每次都经过GSLB设备，性能低（IP包欺骗需要GSLB接收所有请求，重定向跳转可以缓存，不需要每次都经过GSLB）</li><li>一般配合HTTP redirect GSLB一起应用</li></ol><h4 id="F5"><a href="#F5" class="headerlink" title="F5"></a>F5</h4><p><img src="/medias/assets/architecture/20210816104108.png"></p><h4 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h4><p><img src="/medias/assets/architecture/20210816104250.png"></p><h4 id="LVS-NAT"><a href="#LVS-NAT" class="headerlink" title="LVS-NAT"></a>LVS-NAT</h4><p><img src="/medias/assets/architecture/20210816104451.png"></p><h4 id="LVS-DR"><a href="#LVS-DR" class="headerlink" title="LVS-DR"></a>LVS-DR</h4><p><img src="/medias/assets/architecture/20210816104549.png"></p><h4 id="LVS-TUN"><a href="#LVS-TUN" class="headerlink" title="LVS-TUN"></a>LVS-TUN</h4><p><img src="/medias/assets/architecture/20210816104726.png"></p><h4 id="F5-LVS-Nginx对比"><a href="#F5-LVS-Nginx对比" class="headerlink" title="F5/LVS/Nginx对比"></a>F5/LVS/Nginx对比</h4><p><img src="/medias/assets/architecture/20210816104916.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9E%B6%E6%9E%84.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十三）</title>
      <link href="/2021/08/15/architecture/architecture-23/"/>
      <url>/2021/08/15/architecture/architecture-23/</url>
      
        <content type="html"><![CDATA[<h2 id="计算架构模式之分布式缓存架构设计"><a href="#计算架构模式之分布式缓存架构设计" class="headerlink" title="计算架构模式之分布式缓存架构设计"></a>计算架构模式之分布式缓存架构设计</h2><h3 id="分布式缓存架构模式"><a href="#分布式缓存架构模式" class="headerlink" title="分布式缓存架构模式"></a>分布式缓存架构模式</h3><h4 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h4><p><img src="/medias/assets/architecture/20210815212641.png"></p><h4 id="结果缓存"><a href="#结果缓存" class="headerlink" title="结果缓存"></a>结果缓存</h4><p><img src="/medias/assets/architecture/20210815212909.png"></p><h3 id="复杂度：数据一致性"><a href="#复杂度：数据一致性" class="headerlink" title="复杂度：数据一致性"></a>复杂度：数据一致性</h3><p><img src="/medias/assets/architecture/20210815213606.png"></p><h3 id="数据一致性解决方案"><a href="#数据一致性解决方案" class="headerlink" title="数据一致性解决方案"></a>数据一致性解决方案</h3><p><img src="/medias/assets/architecture/20210815213953.png"></p><h3 id="缓存三大问题"><a href="#缓存三大问题" class="headerlink" title="缓存三大问题"></a>缓存三大问题</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>缓存没有起作用，业务系统虽然去缓存查询数据，但缓存中没有数据，业务系统需要再次去存储系统查询数据</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><ol><li>存储系统中确实不存在被访问的数据，例如被黑客攻击，导致大量无效业务请求</li><li>存储系统中存在，但是缓存中不存在的数据，例如冷门数据、老数据，常见的一个的一个场景是爬虫或者用户翻页翻到20页以后导致系统变慢</li><li>系统刚启动的时候，大量缓存还没生成。例如抢购、秒杀等，或者缓存节点刚启动。</li><li>缓存集中失效，例如批量生成的缓存批量失效，缓存服务器挂掉。</li></ol><h5 id="应对方法"><a href="#应对方法" class="headerlink" title="应对方法"></a>应对方法</h5><ol><li>空值缓存</li><li>缓存当前数据</li><li>缓存预热</li><li>随机失效</li></ol><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>当缓存失效（过期）后引起的系统性能急剧下降的情况</p><h5 id="根因"><a href="#根因" class="headerlink" title="根因"></a>根因</h5><ol><li>生成缓存较慢（复杂的数据查询、大量的计算等）</li><li>缓存失效后并发请求量大，比如50个以上</li></ol><h5 id="应对方法-1"><a href="#应对方法-1" class="headerlink" title="应对方法"></a>应对方法</h5><h6 id="更新锁"><a href="#更新锁" class="headerlink" title="更新锁"></a>更新锁</h6><p>方案：</p><ol><li>对缓存的更新操作进行加锁保护，保证只有一个线程能够进行缓存更新</li><li>未能获取更新的线程要么等待锁释放后重新读取缓存，要么就返回空值或者默认值</li></ol><p>优缺点：</p><ol><li>需要引入分布式锁</li><li>能够保证只有一个线程能更新</li></ol><h6 id="后台更新"><a href="#后台更新" class="headerlink" title="后台更新"></a>后台更新</h6><p>方案：</p><ol><li>由后台线程来更新缓存，而不是业务线程来更新缓存</li><li>缓存有效期设置为永久，后台线程更新缓存，更新策略分为定时更新、事件触发更新</li><li>业务线程只读取缓存，缓存不存在就返回空值</li></ol><p>优缺点：</p><ol><li>实现简单</li><li>需要保证后台线程高可用</li></ol><h4 id="缓存热点"><a href="#缓存热点" class="headerlink" title="缓存热点"></a>缓存热点</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>特别热点的数据，如果大部分甚至所有的业务请求都命中同一份缓存数据，则这份数据所在的缓存服务器压力也很大，有可能撑不住。</p><h5 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h5><p>热点事件、突发事件，例如某明星吃瓜微博，短时间内上千万的用户来围观。</p><h5 id="应对方法-2"><a href="#应对方法-2" class="headerlink" title="应对方法"></a>应对方法</h5><p>多副本缓存</p><p>方案：</p><ol><li>写入的时候，缓存的key加上编号，写入到多个缓存服务器</li><li>读取的时候随机生成编号组装key，然后读取</li></ol><p>挑战：</p><p>不太好预料哪些key是热点（微博经常挂的原因），需要动态决策或者人工干预</p><p><img src="/medias/assets/architecture/20210815220914.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十二）</title>
      <link href="/2021/08/15/architecture/architecture-22/"/>
      <url>/2021/08/15/architecture/architecture-22/</url>
      
        <content type="html"><![CDATA[<h2 id="计算架构模式之多级缓存架构"><a href="#计算架构模式之多级缓存架构" class="headerlink" title="计算架构模式之多级缓存架构"></a>计算架构模式之多级缓存架构</h2><h3 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h3><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>Cache。指位于速度相差较大的两种硬件之间，用于协调两者数据传输速度差异的结构，均可称为缓存。</p><h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><p>空间换时间</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ol><li>CPU L1、L2、L3缓存</li><li>Linux文件系统page cache</li><li>innodb buffer pool</li><li>redis、memcached</li></ol><h4 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>Buffer。指某个临时存储区域，保存将要从一个设备（或者系统）传输到另一个设备（或者系统）的数据。</p><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><ol><li>Java IO BufferdInputStream等</li><li>磁盘控制器写缓存（Write cache）</li><li>MySQL log buffer</li><li>消息队列缓冲写请求</li><li>innodb buffer pool</li></ol><h3 id="缓存设计"><a href="#缓存设计" class="headerlink" title="缓存设计"></a>缓存设计</h3><h4 id="3W1H"><a href="#3W1H" class="headerlink" title="3W1H"></a>3W1H</h4><p><img src="/medias/assets/architecture/20210815181903.png"></p><h4 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a>更新机制</h4><p><img src="/medias/assets/architecture/20210815182207.png"></p><h3 id="多级缓存架构"><a href="#多级缓存架构" class="headerlink" title="多级缓存架构"></a>多级缓存架构</h3><h4 id="5级缓存架构"><a href="#5级缓存架构" class="headerlink" title="5级缓存架构"></a>5级缓存架构</h4><p><img src="/medias/assets/architecture/20210815182458.png"></p><h4 id="4级缓存架构"><a href="#4级缓存架构" class="headerlink" title="4级缓存架构"></a>4级缓存架构</h4><p><img src="/medias/assets/architecture/20210815182651.png"></p><h4 id="3级缓存架构"><a href="#3级缓存架构" class="headerlink" title="3级缓存架构"></a>3级缓存架构</h4><p><img src="/medias/assets/architecture/20210815182738.png"></p><h3 id="缓存技术"><a href="#缓存技术" class="headerlink" title="缓存技术"></a>缓存技术</h3><h4 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h4><h5 id="APP缓存"><a href="#APP缓存" class="headerlink" title="APP缓存"></a>APP缓存</h5><h6 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h6><p>App将数据缓存在本地</p><h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><p>所有能缓存的都可以缓存</p><h6 id="常见技术"><a href="#常见技术" class="headerlink" title="常见技术"></a>常见技术</h6><ol><li>SQLite缓存</li><li>本地文件缓存</li><li>图片缓存Picasso(Square)、Fresco(Facebook)、Glide(Google)</li></ol><h5 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h5><h6 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h6><p>HTTP标准协议缓存</p><h6 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h6><p>HTTP资源</p><h6 id="常见技术-1"><a href="#常见技术-1" class="headerlink" title="常见技术"></a>常见技术</h6><ol><li>参考HTTP协议、Cache-Control、Etag/If-None-Match等指令</li></ol><h4 id="CDN缓存"><a href="#CDN缓存" class="headerlink" title="CDN缓存"></a>CDN缓存</h4><p><img src="/medias/assets/architecture/20210815190434.png"></p><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>Content Delivery NetWork ，即内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需的内容，降低网络拥塞，提高用户访问响应速度和命中率，关键技术是内容存储和分发技术</p><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ol><li>功能强大，能够支撑超高流量</li><li>贵</li></ol><h5 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h5><ol><li>直播（RTMP、HLS）</li><li>视频</li><li>资讯</li></ol><h5 id="国内供应商"><a href="#国内供应商" class="headerlink" title="国内供应商"></a>国内供应商</h5><p>阿里云、网宿、腾讯云、金山云、七牛云……</p><h4 id="Web容器缓存"><a href="#Web容器缓存" class="headerlink" title="Web容器缓存"></a>Web容器缓存</h4><p>Web容器一般缓存静态资源，例如图片、Javascript、CSS等，配合HTTP协议实现缓存</p><h4 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h4><h5 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h5><p>应用在本地缓存数据</p><h5 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h5><p>所有能缓存的都可以缓存</p><h5 id="常见技术-2"><a href="#常见技术-2" class="headerlink" title="常见技术"></a>常见技术</h5><ol><li>进程内缓存、HashMap、OSCache、Ehcache等</li><li>进程外缓存，堆外内存</li><li>本地磁盘SSD缓存</li></ol><h4 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h4><h5 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h5><p>由分布式系统提供缓存功能</p><h5 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h5><p>所有能缓存的都可以缓存</p><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><ol><li>Redis</li><li>Memcached</li></ol><p><img src="/medias/assets/architecture/20210815193759.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E8%AE%A1%E7%AE%97%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9E%B6%E6%9E%84.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（六）：二级缓存</title>
      <link href="/2021/08/15/mybatis/mybatis-06/"/>
      <url>/2021/08/15/mybatis/mybatis-06/</url>
      
        <content type="html"><![CDATA[<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>二级缓存是比一级缓存更大作用范围的缓存方案，作用范围是整个namespace，通常就是一个mapper。当然也可以通过引用其它mapper扩大作用范围。但是更大的作用范围也意味着一旦出现更新，缓存就会大面积失效，缓存的效果就会大大折扣。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>二级缓存默认是开启的，但是要使用则需要进行显示配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> cacheEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="二级缓存支持的配置"><a href="#二级缓存支持的配置" class="headerlink" title="二级缓存支持的配置"></a>二级缓存支持的配置</h5><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><p>缓存实现类型，Mybatis提供了Cache接口，而唯一实现了Cache接口的子类是PerpetualCache，也就是一级缓存用的缓存类。为了丰富缓存的类型，Mybatis通过装饰器模式，增加了很多缓存类型。默认使用PerpetualCache缓存。</p><ol><li>BlockingCache：阻塞缓存，当在缓存中找不到元素时，它会在缓存键上设置锁，这样，其他线程将等待该元素被填充，而不是命中数据库。从本质上讲，此实现在不正确使用时可能导致死锁。</li><li>FifoCache：先进先出缓存，当缓存队列满了以后先删除最先放入的缓存数据。</li><li>LoggingCache：日志缓存，用于记录请求缓存Key的次数、命中Key的次数，计算命中率。如果开启debug日志，则会使用该日志缓存。</li><li>LruCache：最近最少使用缓存，通过继承LinkedHashMap并重写removeEldestEntry方法实现，当缓存大小超过了指定大小，removeEldestEntry返回true并保存最近最少使用的key，然后通过key删除缓存。</li><li>ScheduledCache：定时清除缓存，根据指定时间间隔进行清除。</li><li>SerializedCache：序列化缓存，放入缓存前先进行缓存对象序列化，取出后再反序列化为对象，缓存值必须实现序列化接口。</li><li>SoftCache：软引用缓存</li><li>SynchronizedCache：同步缓存，所有操作都加锁</li><li>TransactionCache：事务缓存，事务提交后才生效</li><li>WeakCache：弱引用缓存。</li></ol><h5 id="eviction"><a href="#eviction" class="headerlink" title="eviction"></a>eviction</h5><p>淘汰策略，默认LRU，也就是会使用LruCache。也可以配置FIFO使用FifoCache。</p><h5 id="flushInterval"><a href="#flushInterval" class="headerlink" title="flushInterval"></a>flushInterval</h5><p>刷新缓存时间间隔，配置后使用ScheduledCache。</p><h5 id="size"><a href="#size" class="headerlink" title="size"></a>size</h5><p>缓存容量大小（元素个数）</p><h5 id="readOnly"><a href="#readOnly" class="headerlink" title="readOnly"></a>readOnly</h5><p>读写缓存标识，默认是只读缓存。如果配置为true，则使用SerializedCache。</p><h5 id="blocking"><a href="#blocking" class="headerlink" title="blocking"></a>blocking</h5><p>阻塞标识，默认是非阻塞，也就是会使用BlockingCache。</p><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>二级缓存是CachingExecutor加持，通过TransactionalCacheManager进行管理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionalCacheManager</span> tcm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionalCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>TransactionalCacheManager类比较简单，维护了一个HashMap，key是namespace对应的缓存，value是事务缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionalCacheManager</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cache</span><span class="token punctuation">,</span> <span class="token class-name">TransactionalCache</span><span class="token punctuation">&gt;</span></span> transactionalCaches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getTransactionalCache</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getTransactionalCache</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getTransactionalCache</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TransactionalCache</span> txCache <span class="token operator">:</span> transactionalCaches<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      txCache<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TransactionalCache</span> txCache <span class="token operator">:</span> transactionalCaches<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      txCache<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">TransactionalCache</span> <span class="token function">getTransactionalCache</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> transactionalCaches<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> <span class="token class-name">TransactionalCache</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TransactionalCache事务缓存的特点是查询后会把数据记录在entriesToAddOnCommit属性中，只有事务提交了，才会把数据从entriesToAddOnCommit真正放入缓存队列delegate中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionalCache</span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">TransactionalCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Cache</span> delegate<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> clearOnCommit<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entriesToAddOnCommit<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entriesMissedInCache<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">TransactionalCache</span><span class="token punctuation">(</span><span class="token class-name">Cache</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clearOnCommit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>entriesToAddOnCommit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>entriesMissedInCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// issue #116</span>    <span class="token class-name">Object</span> object <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      entriesMissedInCache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// issue #146</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clearOnCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    entriesToAddOnCommit<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">removeObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    clearOnCommit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    entriesToAddOnCommit<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clearOnCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>      delegate<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">flushPendingEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">unlockMissedEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    clearOnCommit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    entriesToAddOnCommit<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    entriesMissedInCache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flushPendingEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> entriesToAddOnCommit<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      delegate<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> entry <span class="token operator">:</span> entriesMissedInCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entriesToAddOnCommit<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        delegate<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unlockMissedEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> entry <span class="token operator">:</span> entriesMissedInCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        delegate<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Unexpected exception while notifying a rollback to the cache adapter. "</span>            <span class="token operator">+</span> <span class="token string">"Consider upgrading your cache adapter to the latest version. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询流程的流程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建缓存键</span>    <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Cache</span> cache <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">flushCacheIfRequired</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">isUseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureNoOutParams</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token comment">// 从二级缓存管理器中获取查询结果</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> tcm<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 走一级缓存流程</span>          list <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 二级缓存中放入查询结果</span>          tcm<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// issue #578 and #116</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> required<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  delegate<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>required<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只有事务提交了，二级缓存才会生效</span>  tcm<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> required<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    delegate<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>required<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>      tcm<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>CachingExecutor执行query方法</li><li>调用BaseExecutor的createCacheKey方法生成缓存键，缓存键和一级缓存是一样的</li><li>先从二级缓存管理器中查询是否已经有查询结果，如果有则直接返回数据</li><li>如果没有则就会进入一级缓存的执行流程</li><li>一级缓存流程执行完成后回来，把查询结果也缓存到保存到二级缓存中，注意这个时候缓存并没有生效，还得等待事务提交</li></ol><p>更新流程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token function">flushCacheIfRequired</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次更新前都会执行flushCacheIfRequired方法，也就是清除缓存</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flushCacheIfRequired</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Cache</span> cache <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tcm<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>二级缓存是namespace级别的共享，作用范围更大。</li><li>一旦有更新，所有缓存都将失效。</li><li>二级缓存需要事务提交后才会生效。</li><li>二级缓存可搭配使用的缓存类型很多，可控性挺好。</li><li>二级缓存和一级缓存一样，都很容易产生数据脏读，使用条件非常苛刻。</li><li>二级缓存作为本地缓存，分布式环境下必定出现脏读。如果需要使用集中式缓存，需要自定义缓存实现Cache接口。一般情况下用Redis、Memcached更香。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（五）：一级缓存</title>
      <link href="/2021/08/14/mybatis/mybatis-05/"/>
      <url>/2021/08/14/mybatis/mybatis-05/</url>
      
        <content type="html"><![CDATA[<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>在一次会话中，执行多次查询条件完全相同的SQL，Mybatis提供了一级缓存的方案进行优化。如果相同的查询语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>一级缓存可配置类型有两个</p><ol><li>SESSION：在一个会话中执行的所有SQL语句都会共享同一个缓存</li><li>STATEMENT：缓存仅对当前执行的Statement有效</li></ol><p>一级缓存默认是开启的，且类型是SESSION</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">LocalCacheScope</span> localCacheScope <span class="token operator">=</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span><span class="token constant">SESSION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果需要修改类型，可以在XML种进行配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>setting name<span class="token operator">=</span><span class="token string">"localCacheScope"</span> value<span class="token operator">=</span><span class="token string">"STATEMENT"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>每个Session持有一个Executor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSession</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSession</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一级缓存是BaseExecutor的一个属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token class-name">PerpetualCache</span> localCache<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PerpetualCache实现了Cache接口，内部就是一个HashMap而已</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PerpetualCache</span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">PerpetualCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">removeObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cache<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CacheException</span><span class="token punctuation">(</span><span class="token string">"Cache instances require an ID."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Cache</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Cache</span> otherCache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cache</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>otherCache<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CacheException</span><span class="token punctuation">(</span><span class="token string">"Cache instances require an ID."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行查询的时候，SqlSession委托Executor执行查询,首先会进入BaseExecutor的query方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>   <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一级缓存键</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">CacheKey</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">CacheKey</span> cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cacheKey<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cacheKey<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>rowBounds<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cacheKey<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>rowBounds<span class="token punctuation">.</span><span class="token function">getLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cacheKey<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">TypeHandlerRegistry</span> typeHandlerRegistry <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// mimic DefaultParameterHandler logic</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ParameterMapping</span> parameterMapping <span class="token operator">:</span> parameterMappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterMapping<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">ParameterMode</span><span class="token punctuation">.</span><span class="token constant">OUT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Object</span> value<span class="token punctuation">;</span>      <span class="token class-name">String</span> propertyName <span class="token operator">=</span> parameterMapping<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>boundSql<span class="token punctuation">.</span><span class="token function">hasAdditionalParameter</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getAdditionalParameter</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>typeHandlerRegistry<span class="token punctuation">.</span><span class="token function">hasTypeHandler</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> parameterObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">MetaObject</span> metaObject <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      cacheKey<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// issue #176</span>    cacheKey<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> cacheKey<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，如果一条SQL的<strong>StatementId + Offset + Limmit + Sql + Params + environment</strong>一样，则认为是相同的SQL</p><p>继续执行BaseExecutor的query方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"executing a query"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    queryStack<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 从一级缓存中获取查询结果</span>    list <span class="token operator">=</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 存储过程相关</span>      <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 从数据库中查询</span>      list <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    queryStack<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DeferredLoad</span> deferredLoad <span class="token operator">:</span> deferredLoads<span class="token punctuation">)</span> <span class="token punctuation">{</span>      deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// issue #601</span>    deferredLoads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果一级缓存设置的是有效范围是STATEMENT，则清除一级缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span><span class="token constant">STATEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// issue #482</span>      <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>真正去数据库中查询前先在一级缓存中检查是否已存在查询结果，只有不存在的时候才会调用queryFromDatabase方法去数据库中查询，当然最终的查询还得委派给BaseExecutor的子类去执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>  <span class="token comment">// 一级缓存：放入占位缓存值</span>  localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">EXECUTION_PLACEHOLDER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment">// 一级缓存：保证清除占位缓存值</span>    localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 一级缓存：放入查询结果</span>  localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储过程输出参数缓存</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span><span class="token constant">CALLABLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中看到，一级缓存是在queryFromDatabase方法中存入的。</p><p>缓存只对查询有效，一旦执行了增删改的操作，缓存就应该失效了。增删改对应的都是BaseExecutor的update方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"executing an update"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中看到每次执行更新操作前，都会去清除一级缓存。</p><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>一级缓存如果设置是SESSION级别，则它的有效范围是整个会话，如果同时有多个会话去修改数据，那么一级缓存可能会引起脏读</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>开启两个session，session1查询后让一级缓存生效，然后session2对数据进行更新，session1、session2再进行查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session1 <span class="token operator">=</span> sqlMapper<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">SqlSession</span> session2 <span class="token operator">=</span> sqlMapper<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">AuthorMapper</span> mapper1 <span class="token operator">=</span> session1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">AuthorMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AuthorMapper</span> mapper2 <span class="token operator">=</span> session2<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">AuthorMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Author</span> expected <span class="token operator">=</span> mapper1<span class="token punctuation">.</span><span class="token function">selectAuthor</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session1--&gt;"</span> <span class="token operator">+</span> expected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Author</span> updateAuthor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateAuthor<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>expected<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateAuthor<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"NewUsername"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateAuthor<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"newEmail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateAuthor<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"newPassword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateAuthor<span class="token punctuation">.</span><span class="token function">setBio</span><span class="token punctuation">(</span><span class="token string">"newBio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">updateAuthor</span><span class="token punctuation">(</span>updateAuthor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session2 update--&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session1--&gt;"</span> <span class="token operator">+</span> mapper1<span class="token punctuation">.</span><span class="token function">selectAuthor</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"session2--&gt;"</span> <span class="token operator">+</span> mapper2<span class="token punctuation">.</span><span class="token function">selectAuthor</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">session1--&gt;Author : 101 : jim : jim@ibatis.apache.orgsession2 update--&gt;session1--&gt;Author : 101 : jim : jim@ibatis.apache.orgsession2--&gt;Author : 101 : NewUsername : newEmail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看到，session2进行了更新二session1还是查到了老数据，这就产生了脏读</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>一级缓存生命周期和SqlSession的一致</li><li>一级缓存有两种配置，SESSION和STATEMENT，SESSION是会话中所有的SQL共享，STATEMENT只是当前Statement有效</li><li>一级缓存在多会话中会引起脏读，建议把它设置为STATEMENT</li><li>一级缓存内部设计简单，只是一个没有容量限定的HashMap，在缓存的功能性上有所欠缺。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（四）：SQL执行流程</title>
      <link href="/2021/08/13/mybatis/mybatis-04/"/>
      <url>/2021/08/13/mybatis/mybatis-04/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL执行流程"><a href="#SQL执行流程" class="headerlink" title="SQL执行流程"></a>SQL执行流程</h2><p>执行SQL一般是通过mapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Mapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Blog</span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectBlogByPrimaryKeyColumnPrefix</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>开启会话</li><li>获取mapper接口</li><li>通过mapper接口执行SQL</li></ol><p>这个mapper其实是Mybatis通过动态代理生成的一个代理类，默认使用的的是JDK动态代理。所以调用接口的方法最终都会调用到MapperProxy这个InvocationHandler</p><p>这里有个Mapper类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mapper</span> <span class="token punctuation">{</span>  <span class="token class-name">Blog</span> <span class="token function">selectBlogByPrimaryKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> aId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Blog</span> <span class="token function">selectBlogByPrimaryKeyColumnPrefix</span><span class="token punctuation">(</span><span class="token keyword">int</span> aId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行的程序前增加JVM参数把代理类保存到文件</p><p><strong>-Djdk.proxy.ProxyGenerator.saveGeneratedFiles=true</strong></p><p>生成的代理类长这样子的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">UndeclaredThrowableException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>submitted<span class="token punctuation">.</span>parent_reference_3level<span class="token punctuation">.</span></span><span class="token class-name">Blog</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>submitted<span class="token punctuation">.</span>parent_reference_3level<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy16</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Mapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m0<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m4<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token class-name">Proxy16</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Blog</span> <span class="token function">selectBlogByPrimaryKeyColumnPrefix</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Blog</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Blog</span> <span class="token function">selectBlogByPrimaryKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Blog</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m4<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">Error</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            m1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.ibatis.submitted.parent_reference_3level.Mapper"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"selectBlogByPrimaryKeyColumnPrefix"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m4 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.ibatis.submitted.parent_reference_3level.Mapper"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"selectBlogByPrimaryKey"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MapperProxy通过代理对象调用就被引出来了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperProxy</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4724728412955527868L</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ALLOWED_MODES</span> <span class="token operator">=</span> <span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">.</span><span class="token constant">PRIVATE</span> <span class="token operator">|</span> <span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">.</span><span class="token constant">PROTECTED</span>      <span class="token operator">|</span> <span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">.</span><span class="token constant">PACKAGE</span> <span class="token operator">|</span> <span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">.</span><span class="token constant">PUBLIC</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lookup</span><span class="token punctuation">&gt;</span></span> lookupConstructor<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Method</span> privateLookupInMethod<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MapperMethodInvoker</span><span class="token punctuation">&gt;</span></span> methodCache<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">MapperProxy</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">MapperMethodInvoker</span><span class="token punctuation">&gt;</span></span> methodCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface <span class="token operator">=</span> mapperInterface<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache <span class="token operator">=</span> methodCache<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token class-name">Method</span> privateLookupIn<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      privateLookupIn <span class="token operator">=</span> <span class="token class-name">MethodHandles</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"privateLookupIn"</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      privateLookupIn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    privateLookupInMethod <span class="token operator">=</span> privateLookupIn<span class="token punctuation">;</span>    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lookup</span><span class="token punctuation">&gt;</span></span> lookup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>privateLookupInMethod <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// JDK 1.8</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        lookup <span class="token operator">=</span> <span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lookup<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>            <span class="token string">"There is neither 'privateLookupIn(Class, Lookup)' nor 'Lookup(Class, int)' method in java.lang.invoke.MethodHandles."</span><span class="token punctuation">,</span>            e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lookup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    lookupConstructor <span class="token operator">=</span> lookup<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">cachedInvoker</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">MapperMethodInvoker</span> <span class="token function">cachedInvoker</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// A workaround for https://bugs.openjdk.java.net/browse/JDK-8161372</span>      <span class="token comment">// It should be removed once the fix is backported to Java 8 or</span>      <span class="token comment">// MyBatis drops Java 8 support. See gh-1929</span>      <span class="token class-name">MapperMethodInvoker</span> invoker <span class="token operator">=</span> methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>invoker <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> invoker<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> methodCache<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> m <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>privateLookupInMethod <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMethodInvoker</span><span class="token punctuation">(</span><span class="token function">getMethodHandleJava8</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMethodInvoker</span><span class="token punctuation">(</span><span class="token function">getMethodHandleJava9</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span>              <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PlainMethodInvoker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapperMethod</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">,</span> method<span class="token punctuation">,</span> sqlSession<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> re<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> cause <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> re <span class="token operator">:</span> cause<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">MethodHandle</span> <span class="token function">getMethodHandleJava9</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaringClass <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Lookup</span><span class="token punctuation">)</span> privateLookupInMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> declaringClass<span class="token punctuation">,</span> <span class="token class-name">MethodHandles</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findSpecial</span><span class="token punctuation">(</span>        declaringClass<span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        declaringClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">MethodHandle</span> <span class="token function">getMethodHandleJava8</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> declaringClass <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lookupConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">,</span> <span class="token constant">ALLOWED_MODES</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unreflectSpecial</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> declaringClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">interface</span> <span class="token class-name">MapperMethodInvoker</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PlainMethodInvoker</span> <span class="token keyword">implements</span> <span class="token class-name">MapperMethodInvoker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MapperMethod</span> mapperMethod<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PlainMethodInvoker</span><span class="token punctuation">(</span><span class="token class-name">MapperMethod</span> mapperMethod<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mapperMethod <span class="token operator">=</span> mapperMethod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultMethodInvoker</span> <span class="token keyword">implements</span> <span class="token class-name">MapperMethodInvoker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MethodHandle</span> methodHandle<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DefaultMethodInvoker</span><span class="token punctuation">(</span><span class="token class-name">MethodHandle</span> methodHandle<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>methodHandle <span class="token operator">=</span> methodHandle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> methodHandle<span class="token punctuation">.</span><span class="token function">bindTo</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invokeWithArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重要的是invoke方法，而这里的invoke方法就干了两件事</p><ol><li>包装接口的Method为MapperMethodInvoker并缓存，主要为加速后续相同方法调用</li><li>执行MapperMethodInvoker的invoke方法</li></ol><p>然后通过MapperMethodInvoker里的MapperMethod执行execute方法最终又调用了session的CRUD方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperMethod</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SqlCommand</span> command<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MethodSignature</span> method<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">MapperMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodSignature</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> result<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token constant">INSERT</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> <span class="token constant">UPDATE</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> <span class="token constant">DELETE</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">case</span> <span class="token constant">SELECT</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          result <span class="token operator">=</span> <span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          result <span class="token operator">=</span> <span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          result <span class="token operator">=</span> <span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token class-name">Object</span> param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token constant">FLUSH</span><span class="token operator">:</span>        result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Mapper method '"</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">+</span> <span class="token string">" attempted to return null from a method with a primitive return type ("</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>兜兜转转又回到了session，到目前为止，完整的流程是这个样子的</p><p><img src="/medias/assets/mybatis/202108041121.png"></p><p>接下来看看session执行CRUD的过程，这里以select语句执行为例进行跟踪</p><p>DefaultSqlSession执行selectOne查询单个结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Popular vote was to return null on 0 results and throw exception on too many.</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TooManyResultsException</span><span class="token punctuation">(</span><span class="token string">"Expected one result (or null) to be returned by selectOne(), but found: "</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着调用DefaultSqlSession的selectList方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token constant">NO_RESULT_HANDLER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来委托给BaseExecutor去执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CacheKey</span> key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"executing a query"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      queryStack<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 从一级缓存中获取查询结果</span>      list <span class="token operator">=</span> resultHandler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 存储过程相关</span>        <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 从数据库中查询</span>        list <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      queryStack<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">DeferredLoad</span> deferredLoad <span class="token operator">:</span> deferredLoads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// issue #601</span>      deferredLoads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 如果一级缓存设置的是有效范围是STATEMENT，则清除一级缓存</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span><span class="token constant">STATEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// issue #482</span>        <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>  <span class="token comment">// 一级缓存：放入占位缓存值</span>  localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token constant">EXECUTION_PLACEHOLDER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment">// 一级缓存：保证清除占位缓存值</span>    localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 一级缓存：放入查询结果</span>  localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储过程输出参数缓存</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span><span class="token constant">CALLABLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BaseExecutor的子类SimpleExecutor接管执行doQuery</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">doQuery</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StatementHandler</span> handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着又委托给了StatementHandler进行处理，默认是PreparedStatementHandler子类处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span><span class="token punctuation">)</span> statement<span class="token punctuation">;</span>  ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于通过PreparedStatement执行SQL了，接下来是对执行结果的封装处理，默认是ResultSetHandler的子类DefaultResultSetHandler进行封装处理，执行handleResultSets方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResultSets</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"handling results"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> multipleResults <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> resultSetCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token class-name">ResultSetWrapper</span> rsw <span class="token operator">=</span> <span class="token function">getFirstResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMap</span><span class="token punctuation">&gt;</span></span> resultMaps <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> resultMapCount <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">validateResultMapsCount</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMapCount<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> resultMapCount <span class="token operator">&gt;</span> resultSetCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ResultMap</span> resultMap <span class="token operator">=</span> resultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSetCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> multipleResults<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultSets <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getResultSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSets <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rsw <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> resultSetCount <span class="token operator">&lt;</span> resultSets<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">ResultMapping</span> parentMapping <span class="token operator">=</span> nextResultMaps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resultSets<span class="token punctuation">[</span>resultSetCount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> nestedResultMapId <span class="token operator">=</span> parentMapping<span class="token punctuation">.</span><span class="token function">getNestedResultMapId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultMap</span> resultMap <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getResultMap</span><span class="token punctuation">(</span>nestedResultMapId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">handleResultSet</span><span class="token punctuation">(</span>rsw<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> parentMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      rsw <span class="token operator">=</span> <span class="token function">getNextResultSet</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">cleanUpAfterHandlingResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      resultSetCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">collapseSingleResultList</span><span class="token punctuation">(</span>multipleResults<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过这层层处理，终于获得了查询结果。其中每个环节都有很多细致的流程处理，相当复杂。总结以下执行的大体流程如下</p><p><img src="/medias/assets/mybatis/202108141202.png"></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（三）：Mapper配置解析详解</title>
      <link href="/2021/08/12/mybatis/mybatis-03/"/>
      <url>/2021/08/12/mybatis/mybatis-03/</url>
      
        <content type="html"><![CDATA[<h1 id="Mapper配置解析详解"><a href="#Mapper配置解析详解" class="headerlink" title="Mapper配置解析详解"></a>Mapper配置解析详解</h1><p>mapper解析的目的：</p><ol><li>注册mapper接口</li><li>解析二级缓存</li><li>解析参数映射</li><li>解析结果映射</li><li>解析sql片段</li><li>解析sql语句</li></ol><p>解析完后填充到configuration的这些成员变量里</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">MapperRegistry</span> mapperRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span><span class="token punctuation">&gt;</span></span> mappedStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Mapped Statements collection"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">conflictMessageProducer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>savedValue<span class="token punctuation">,</span> targetValue<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>          <span class="token string">". please check "</span> <span class="token operator">+</span> savedValue<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> targetValue<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Cache</span><span class="token punctuation">&gt;</span></span> caches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Caches collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ResultMap</span><span class="token punctuation">&gt;</span></span> resultMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Result Maps collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ParameterMap</span><span class="token punctuation">&gt;</span></span> parameterMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Parameter Maps collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">&gt;</span></span> keyGenerators <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Key Generators collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> sqlFragments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"XML fragments parsed from previous mappers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看具体的解析过程，为了专注mapper的解析，忽略XML的node节点的读取</p><p>mapper的解析分为4种配置情形，分别是下面四种</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/apache/ibatis/builder/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:./src/test/java/org/apache/ibatis/builder/NestedBlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CachedAuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应代码解析代码片段，这里简称package、resource、url、class方式进行解析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mapperElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> parent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> child <span class="token operator">:</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 通过包名去添加mapper接口</span>        <span class="token class-name">String</span> mapperPackage <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addMappers</span><span class="token punctuation">(</span>mapperPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> mapperClass <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// resource方式</span>          <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// url方式</span>          <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getUrlAsStream</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> url<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 通过类名直接添加</span>          <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperInterface <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"A mapper element may only specify a url, resource or class, but not more than one."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pakcage方式的注册过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">XMLConfigBuilder</span>类的mapperElement直接传入包名调用<span class="token class-name">MapperRegistry</span>的addMappers方法  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMappers</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mapperRegistry<span class="token punctuation">.</span><span class="token function">addMappers</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token number">2.</span> 指定包名下的<span class="token class-name">Object</span>子类都是<span class="token class-name">Mapper</span>接口  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMappers</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">addMappers</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token number">3.</span> 通过resolverUtil去扫描指定包路径下的类添加到<span class="token class-name">MapperRegistry</span>中    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMappers</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ResolverUtil</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resolverUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResolverUtil</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolverUtil<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResolverUtil<span class="token punctuation">.</span>IsA</span><span class="token punctuation">(</span>superType<span class="token punctuation">)</span><span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mapperSet <span class="token operator">=</span> resolverUtil<span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mapperClass <span class="token operator">:</span> mapperSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">addMapper</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token number">4.</span> 生成对应的动态代理工厂保存到<span class="token class-name">MapperRegistry</span>的属性knownMappers中完成mapper接口的注册  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" is already known to the MapperRegistry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">boolean</span> loadCompleted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        knownMappers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxyFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// It's important that the type is added before the parser is run</span>        <span class="token comment">// otherwise the binding may automatically be attempted by the</span>        <span class="token comment">// mapper parser. If the type is already known, it won't try.</span>        <span class="token class-name">MapperAnnotationBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperAnnotationBuilder</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loadCompleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadCompleted<span class="token punctuation">)</span> <span class="token punctuation">{</span>          knownMappers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token number">5.</span> 接下来通过<span class="token class-name">MapperAnnotationBuilder</span>类解析对应的mapper配置 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> resource <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断mapper接口是否已经加载过了，如果没加载过，则加载后再解析，如果已经加载过了，那么通过抢占互斥锁来完成已加载而未解析完成的操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 解析接口命名空间对应下的XML，调用的就是XML解析方式</span>      <span class="token function">loadXmlResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      assistant<span class="token punctuation">.</span><span class="token function">setCurrentNamespace</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 解析二级缓存配置</span>      <span class="token function">parseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 解析二级缓存引入配置（多个mapper共享二级缓存）</span>      <span class="token function">parseCacheRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 扫描接口下的所有方法</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> type<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 排除桥接、默认方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canHaveStatement</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 解析包含@Select、@SelectProvider的方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAnnotationWrapper</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Select</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SelectProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ResultMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 解析select应该对应的resultMap</span>          <span class="token function">parseResultMap</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment">// 解析SQL</span>          <span class="token function">parseStatement</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          configuration<span class="token punctuation">.</span><span class="token function">addIncompleteMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 抢占互斥锁解析</span>    <span class="token function">parsePendingMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>class方式注册过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 直接把类添加到<span class="token class-name">MapperRegistry</span>即可    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">addMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mapperRegistry<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token number">2.</span> 后续步骤和<span class="token keyword">package</span>方式的<span class="token number">4</span>、<span class="token number">5</span>步骤一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>resource、url注册过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 通过resource、url获取配置mapper配置文件流，然后通过<span class="token class-name">XMLMapperBuilder</span>类的parse方法进行解析  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// resource方式</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// url方式</span>    <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getUrlAsStream</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">XMLMapperBuilder</span> mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> url<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token number">2.</span> parse方法具体解析和<span class="token keyword">package</span>的步骤<span class="token number">5</span>意思是一样的，只不过这里是<span class="token constant">XML</span>方式的  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">configurationElement</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 注册mapper接口</span>      <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 解析resultMap</span>    <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析二级缓存</span>    <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析SQL节点</span>    <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到了mapper解析的大致流程，发现是有两种方式，XML和注解方式（注解方式包含注解和XML，因为注解毕竟不能全部表达全部的意思）。</p><p>重点跟踪XML方式，XML方式是通过XMLMapperBuilder类来解析的，具体就是它的parse方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 判断资源是否已经加载</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 初次解析</span>    <span class="token function">configurationElement</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把resource添加到已加载资源中</span>    configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注册mapper接口</span>    <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 重试：解析未完成的resultMap</span>  <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 重试：解析未完成的二级缓存</span>  <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 重试：解析未完成的SQL节点</span>  <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初次解析把各个节点都解析了一个遍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configurationElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 判断是否配置了namespace，没有配置抛出异常终止解析</span>    <span class="token class-name">String</span> namespace <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> namespace<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Mapper's namespace cannot be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 校验并保存命名空间</span>    builderAssistant<span class="token punctuation">.</span><span class="token function">setCurrentNamespace</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析二级缓存引用配置（跨mapper，多个mapper共用一个缓存，缓存影响范围更大）</span>    <span class="token function">cacheRefElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache-ref"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析二级缓存配置</span>    <span class="token function">cacheElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析参数映射配置</span>    <span class="token function">parameterMapElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/parameterMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析结果映射配置</span>    <span class="token function">resultMapElements</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/resultMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sql片段配置解析</span>    <span class="token function">sqlElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/sql"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解析sql语句</span>    <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"select|insert|update|delete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing Mapper XML. The XML location is '"</span> <span class="token operator">+</span> resource <span class="token operator">+</span> <span class="token string">"'. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析二级缓存引用配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheRefElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 添加到Configuration成员变量cacheRefMap中</span>    configuration<span class="token punctuation">.</span><span class="token function">addCacheRef</span><span class="token punctuation">(</span>builderAssistant<span class="token punctuation">.</span><span class="token function">getCurrentNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建一个CacheRefResolver</span>    <span class="token class-name">CacheRefResolver</span> cacheRefResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheRefResolver</span><span class="token punctuation">(</span>builderAssistant<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 真正解析</span>      cacheRefResolver<span class="token punctuation">.</span><span class="token function">resolveCacheRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果抛出IncompleteElementException异常，表示引用的是还未解析的mapper，则把它加入到未解析完成列表中</span>      configuration<span class="token punctuation">.</span><span class="token function">addIncompleteCacheRef</span><span class="token punctuation">(</span>cacheRefResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析二级缓存配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 读取缓存类型，如果未配置则使用默认PerpetualCache</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"PERPETUAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取缓存类型的Class对象</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cache</span><span class="token punctuation">&gt;</span></span> typeClass <span class="token operator">=</span> typeAliasRegistry<span class="token punctuation">.</span><span class="token function">resolveAlias</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取缓存淘汰策略，如果没有配置，则使用LRU（最近最少使用）</span>    <span class="token class-name">String</span> eviction <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"eviction"</span><span class="token punctuation">,</span> <span class="token string">"LRU"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取指定淘汰策略缓存类型Class对象</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cache</span><span class="token punctuation">&gt;</span></span> evictionClass <span class="token operator">=</span> typeAliasRegistry<span class="token punctuation">.</span><span class="token function">resolveAlias</span><span class="token punctuation">(</span>eviction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取缓存刷新间隔</span>    <span class="token class-name">Long</span> flushInterval <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getLongAttribute</span><span class="token punctuation">(</span><span class="token string">"flushInterval"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 缓存容量大小（元素个数）</span>    <span class="token class-name">Integer</span> size <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getIntAttribute</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取读写缓存标识，默认是只读缓存</span>    <span class="token keyword">boolean</span> readWrite <span class="token operator">=</span> <span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"readOnly"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取阻塞缓存标识，默认是非阻塞缓存</span>    <span class="token keyword">boolean</span> blocking <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"blocking"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 属性配置</span>    <span class="token class-name">Properties</span> props <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建新缓存</span>    builderAssistant<span class="token punctuation">.</span><span class="token function">useNewCache</span><span class="token punctuation">(</span>typeClass<span class="token punctuation">,</span> evictionClass<span class="token punctuation">,</span> flushInterval<span class="token punctuation">,</span> size<span class="token punctuation">,</span> readWrite<span class="token punctuation">,</span> blocking<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析参数映射配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parameterMapElement</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 遍历参数映射节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> parameterMapNode <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 读取唯一id</span>    <span class="token class-name">String</span> id <span class="token operator">=</span> parameterMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取参数类型</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> parameterMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取参数类型Class对象</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> parameterClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取parameter子节点</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> parameterNodes <span class="token operator">=</span> parameterMapNode<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"parameter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历parameter子节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> parameterNode <span class="token operator">:</span> parameterNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 读取属性</span>      <span class="token class-name">String</span> property <span class="token operator">=</span> parameterNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 读取java类型</span>      <span class="token class-name">String</span> javaType <span class="token operator">=</span> parameterNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"javaType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 读取jdbc类型</span>      <span class="token class-name">String</span> jdbcType <span class="token operator">=</span> parameterNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"jdbcType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 读取resultMap</span>      <span class="token class-name">String</span> resultMap <span class="token operator">=</span> parameterNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 参数方式（入参、出参、出入参）</span>      <span class="token class-name">String</span> mode <span class="token operator">=</span> parameterNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// java类型jdbc类型转换处理器</span>      <span class="token class-name">String</span> typeHandler <span class="token operator">=</span> parameterNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"typeHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 数字精度</span>      <span class="token class-name">Integer</span> numericScale <span class="token operator">=</span> parameterNode<span class="token punctuation">.</span><span class="token function">getIntAttribute</span><span class="token punctuation">(</span><span class="token string">"numericScale"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取参数枚举</span>      <span class="token class-name">ParameterMode</span> modeEnum <span class="token operator">=</span> <span class="token function">resolveParameterMode</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取java类型class对象</span>      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> javaTypeClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>javaType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取jdbc类型枚举</span>      <span class="token class-name">JdbcType</span> jdbcTypeEnum <span class="token operator">=</span> <span class="token function">resolveJdbcType</span><span class="token punctuation">(</span>jdbcType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取java类型jdbc类型转换处理器class对象</span>      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typeHandlerClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 创建一个参数映射</span>      <span class="token class-name">ParameterMapping</span> parameterMapping <span class="token operator">=</span> builderAssistant<span class="token punctuation">.</span><span class="token function">buildParameterMapping</span><span class="token punctuation">(</span>parameterClass<span class="token punctuation">,</span> property<span class="token punctuation">,</span> javaTypeClass<span class="token punctuation">,</span> jdbcTypeEnum<span class="token punctuation">,</span> resultMap<span class="token punctuation">,</span> modeEnum<span class="token punctuation">,</span> typeHandlerClass<span class="token punctuation">,</span> numericScale<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 加入参数映射节点集合中</span>      parameterMappings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parameterMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 加入到configuration的成员属性parameterMaps中</span>    builderAssistant<span class="token punctuation">.</span><span class="token function">addParameterMap</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> parameterClass<span class="token punctuation">,</span> parameterMappings<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析结果映射配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resultMapElements</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 遍历resultMap节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> resultMapNode <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 逐个节点解析</span>      <span class="token function">resultMapElement</span><span class="token punctuation">(</span>resultMapNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// ignore, it will be retried</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">ResultMap</span> <span class="token function">resultMapElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> resultMapNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">resultMapElement</span><span class="token punctuation">(</span>resultMapNode<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">ResultMap</span> <span class="token function">resultMapElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> resultMapNode<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMapping</span><span class="token punctuation">&gt;</span></span> additionalResultMappings<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> enclosingType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"processing "</span> <span class="token operator">+</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getValueBasedIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取结果类型(会递归调用)</span>  <span class="token comment">// 对于resultMap 获取 type</span>  <span class="token comment">// 对于collection 获取 ofType 或 javaType</span>  <span class="token comment">// 对于association 获取 javaType</span>  <span class="token class-name">String</span> type <span class="token operator">=</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span>    resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"ofType"</span><span class="token punctuation">,</span>      resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultType"</span><span class="token punctuation">,</span>        resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"javaType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取结果类型class对象</span>  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> typeClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>typeClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里enclosingType一般都是父节点的type</span>    <span class="token comment">// 比如&lt;resultMap type="test"&gt;</span>    <span class="token comment">//        &lt;collection/&gt;</span>    <span class="token comment">// 那么enclosingType便是test</span>    <span class="token comment">// 如果有些节点没有配置type，允许的情况下，可以直接使用父节点的type</span>    <span class="token comment">// 例如：</span>    <span class="token comment">//     &lt;discriminator javaType="int" column="draft"&gt;</span>    <span class="token comment">//         &lt;case value="1" resultType="DraftPost"/&gt;</span>    <span class="token comment">//     &lt;/discriminator&gt;</span>    <span class="token comment">//  case节点中就没有配置type</span>    typeClass <span class="token operator">=</span> <span class="token function">inheritEnclosingType</span><span class="token punctuation">(</span>resultMapNode<span class="token punctuation">,</span> enclosingType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 鉴别器</span>  <span class="token class-name">Discriminator</span> discriminator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 结果属性映射</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMapping</span><span class="token punctuation">&gt;</span></span> resultMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>additionalResultMappings<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> resultChildren <span class="token operator">=</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历子节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> resultChild <span class="token operator">:</span> resultChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"constructor"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultChild<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 解析构造函数配置</span>      <span class="token function">processConstructorElement</span><span class="token punctuation">(</span>resultChild<span class="token punctuation">,</span> typeClass<span class="token punctuation">,</span> resultMappings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"discriminator"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultChild<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 解析鉴别器</span>      discriminator <span class="token operator">=</span> <span class="token function">processDiscriminatorElement</span><span class="token punctuation">(</span>resultChild<span class="token punctuation">,</span> typeClass<span class="token punctuation">,</span> resultMappings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// 普通属性</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultFlag</span><span class="token punctuation">&gt;</span></span> flags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultChild<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flags<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ResultFlag</span><span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 添加单个结果属性映射</span>      resultMappings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">buildResultMappingFromContext</span><span class="token punctuation">(</span>resultChild<span class="token punctuation">,</span> typeClass<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 唯一id</span>  <span class="token class-name">String</span> id <span class="token operator">=</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>    resultMapNode<span class="token punctuation">.</span><span class="token function">getValueBasedIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 继承类</span>  <span class="token class-name">String</span> extend <span class="token operator">=</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"extends"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 自动映射</span>  <span class="token class-name">Boolean</span> autoMapping <span class="token operator">=</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"autoMapping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建ResultMapResolver</span>  <span class="token class-name">ResultMapResolver</span> resultMapResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultMapResolver</span><span class="token punctuation">(</span>builderAssistant<span class="token punctuation">,</span> id<span class="token punctuation">,</span> typeClass<span class="token punctuation">,</span> extend<span class="token punctuation">,</span> discriminator<span class="token punctuation">,</span> resultMappings<span class="token punctuation">,</span> autoMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 添加resultMap到configuration的resultMaps属性中</span>    <span class="token keyword">return</span> resultMapResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果解析失败，则把它加入到未完成列表，后面可进行重试</span>    configuration<span class="token punctuation">.</span><span class="token function">addIncompleteResultMap</span><span class="token punctuation">(</span>resultMapResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">inheritEnclosingType</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> resultMapNode<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> enclosingType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"association"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultMapNode<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultMap"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> property <span class="token operator">=</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"property"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> enclosingType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">MetaClass</span> metaResultType <span class="token operator">=</span> <span class="token class-name">MetaClass</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span>enclosingType<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getReflectorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> metaResultType<span class="token punctuation">.</span><span class="token function">getSetterType</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"case"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultMapNode<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultMapNode<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resultMap"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> enclosingType<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析sql片段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sqlElement</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 配置了全局databaseId</span>    <span class="token function">sqlElement</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 没有全局databaseId</span>  <span class="token function">sqlElement</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sqlElement</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> requiredDatabaseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 遍历sql节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> context <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 数据库id</span>    <span class="token class-name">String</span> databaseId <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"databaseId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sql的id</span>    <span class="token class-name">String</span> id <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 全限定id</span>    id <span class="token operator">=</span> builderAssistant<span class="token punctuation">.</span><span class="token function">applyCurrentNamespace</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查数据库id是不是匹配，如果匹配就放入sqlFragments，否则忽略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">databaseIdMatchesCurrent</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> databaseId<span class="token punctuation">,</span> requiredDatabaseId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sqlFragments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析sql语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 区别有无数据库id</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">String</span> requiredDatabaseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 遍历sql节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> context <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建XMLStatementBuilder用来解析sql</span>    <span class="token keyword">final</span> <span class="token class-name">XMLStatementBuilder</span> statementParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> builderAssistant<span class="token punctuation">,</span> context<span class="token punctuation">,</span> requiredDatabaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">// 解析</span>      statementParser<span class="token punctuation">.</span><span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 解析异常则放入未完成解析列表中，后续重试</span>      configuration<span class="token punctuation">.</span><span class="token function">addIncompleteStatement</span><span class="token punctuation">(</span>statementParser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析过程中出现异常或者解析过程中发现依赖未解析的mapper，那么会在初次解析完成后重试把未解析的继续解析完成</p><p>重试未完成的resultMap</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMapResolver</span><span class="token punctuation">&gt;</span></span> incompleteResultMaps <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getIncompleteResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>incompleteResultMaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMapResolver</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> incompleteResultMaps<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// ResultMap is still missing a resource...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重试未完成的二级缓存引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CacheRefResolver</span><span class="token punctuation">&gt;</span></span> incompleteCacheRefs <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getIncompleteCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>incompleteCacheRefs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CacheRefResolver</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> incompleteCacheRefs<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolveCacheRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Cache ref is still missing a resource...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重试未完成的sql语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">&gt;</span></span> incompleteStatements <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getIncompleteStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>incompleteStatements<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> incompleteStatements<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseStatementNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncompleteElementException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Statement is still missing a resource...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，mapper的解析就完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（二）：Configuration配置详细解析</title>
      <link href="/2021/08/10/mybatis/mybatis-02/"/>
      <url>/2021/08/10/mybatis/mybatis-02/</url>
      
        <content type="html"><![CDATA[<h2 id="Configuration配置详细解析"><a href="#Configuration配置详细解析" class="headerlink" title="Configuration配置详细解析"></a>Configuration配置详细解析</h2><h3 id="Mybatis的一般使用过程"><a href="#Mybatis的一般使用过程" class="headerlink" title="Mybatis的一般使用过程"></a>Mybatis的一般使用过程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"org/apache/ibatis/builder/MapperConfig.xml"</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>sqlMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> sqlMapper<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> count <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"org.apache.ibatis.domain.blog.mappers.BlogMapper.selectCountOfPosts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上代码所示，这是Mybatis的一般使用步骤</p><ol><li>读取配置文件流</li><li>通过XMLConfigBuilder解析XML文件并生成Configuration对象</li><li>SqlSessionFactoryBuilder根据Configuration生成一个SqlSessionFactory,默认是DefaultSqlSessionFactory</li><li>通过DefaultSqlSessionFactory生成SqlSession</li><li>SqlSession通过statementId匹配到相应的SQL语句进行增删查改操作</li></ol><h3 id="Configuration的生成"><a href="#Configuration的生成" class="headerlink" title="Configuration的生成"></a>Configuration的生成</h3><p>Configuration是Mybatis存储所有配置的类。</p><p>Configuration是由XMLConfigBuilder类创建并填充的。XMLConfigBuilder类构造函数有多个，可传递配置文件流、环境变量、额外属性配置。创建XMLConfigBuilder的时候就创建了一个Configuration对象，用来储存解析出来的全部配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XPathParser</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperEntityResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> environment<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XPathParser</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperEntityResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> environment<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token class-name">XPathParser</span> parser<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"SQL Mapper Configuration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>parsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>parser <span class="token operator">=</span> parser<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析是通过XMLConfigBuilder的parse方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Configuration</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Each XMLConfigBuilder can only be used once."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  parsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/configuration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> configuration<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// issue #117 read properties first</span>    <span class="token comment">// 属性配置</span>    <span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// setting配置</span>    <span class="token class-name">Properties</span> settings <span class="token operator">=</span> <span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">loadCustomLogImpl</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 别名注册</span>    <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 插件</span>    <span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对象工厂</span>    <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对象包装工厂</span>    <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反射工厂</span>    <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// read it after objectFactory and objectWrapperFactory issue #631</span>    <span class="token comment">// 环境</span>    <span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数据库提供商</span>    <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 类型转换器</span>    <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// mapper</span>    <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就完全对应了配置文件XML中的configuration标签，一个个标签顺序进行解析。下面是一个包含全部节点的configuration配置文件样例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>    <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/apache/ibatis/builder/jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prop1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaaa<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NULL<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autoMappingBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NONE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autoMappingUnknownColumnBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARNING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>proxyFactory<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CGLIB<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipleResultSetsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultExecutorType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BATCH<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultStatementTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultFetchSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultResultSetType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SCROLL_INSENSITIVE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>safeRowBoundsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localCacheScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STATEMENT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbcTypeForNull}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>equals,clone,hashCode,toString,xxx<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>safeResultHandlerEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultScriptingLanguage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.scripting.defaults.RawLanguageDriver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>callSettersOnNulls<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logPrefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybatis_<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SLF4J<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vfsImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.io.JBoss6VFS<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configurationFactory<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEnumTypeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.type.EnumOrdinalTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shrinkWhitespacesInSql<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultSqlProviderType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.XmlConfigBuilderTest$MySqlProvider<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BlogAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Author<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Blog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Post<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.jpetstore<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomStringTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomStringTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomLongTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.typehandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.ExampleObjectFactory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectFactoryProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>objectFactory</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectWrapperFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomObjectWrapperFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reflectorFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomReflectorFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.ExamplePlugin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pluginProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UNPOOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Apache Derby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>derby<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/apache/ibatis/builder/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:./src/test/java/org/apache/ibatis/builder/NestedBlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CachedAuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节点解析详细说明"><a href="#节点解析详细说明" class="headerlink" title="节点解析详细说明"></a>节点解析详细说明</h3><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxxxx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxxxx<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/apache/ibatis/builder/jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prop1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aaaa<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NULL<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>properties支持三种方式配置，称为resource、url、直接配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">propertiesElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 子节点配置</span>    <span class="token class-name">Properties</span> defaults <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// resource</span>    <span class="token class-name">String</span> resource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// url</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不支持同时使用resource、url方式配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// resource方式读取</span>      defaults<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// url方式读取</span>      defaults<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getUrlAsProperties</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 已有属性</span>    <span class="token class-name">Properties</span> vars <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vars <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 如果非空则加入已有的属性中</span>      defaults<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>vars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    parser<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存到configuration的variables属性中</span>    configuration<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span>defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码可以看出，resource和url不能同时配置，配置优先级由高到低为</p><p>Configuration -&gt; resource/url -&gt; 直接配置</p><h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autoMappingBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NONE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autoMappingUnknownColumnBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARNING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>proxyFactory<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CGLIB<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipleResultSetsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultExecutorType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BATCH<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultStatementTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultFetchSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultResultSetType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SCROLL_INSENSITIVE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>safeRowBoundsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localCacheScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STATEMENT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbcTypeForNull}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>equals,clone,hashCode,toString,xxx<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>safeResultHandlerEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultScriptingLanguage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.scripting.defaults.RawLanguageDriver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>callSettersOnNulls<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logPrefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybatis_<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SLF4J<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vfsImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.io.JBoss6VFS<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configurationFactory<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEnumTypeHandler<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.type.EnumOrdinalTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shrinkWhitespacesInSql<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultSqlProviderType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.XmlConfigBuilderTest$MySqlProvider<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setting节点直接对应Configuration里面的成员属性，读取后直接赋值到成员</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">settingsElement</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  configuration<span class="token punctuation">.</span><span class="token function">setAutoMappingBehavior</span><span class="token punctuation">(</span><span class="token class-name">AutoMappingBehavior</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"autoMappingBehavior"</span><span class="token punctuation">,</span> <span class="token string">"PARTIAL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setAutoMappingUnknownColumnBehavior</span><span class="token punctuation">(</span><span class="token class-name">AutoMappingUnknownColumnBehavior</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"autoMappingUnknownColumnBehavior"</span><span class="token punctuation">,</span> <span class="token string">"NONE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setCacheEnabled</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"cacheEnabled"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ProxyFactory</span><span class="token punctuation">)</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"proxyFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setLazyLoadingEnabled</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"lazyLoadingEnabled"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setAggressiveLazyLoading</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"aggressiveLazyLoading"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setMultipleResultSetsEnabled</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"multipleResultSetsEnabled"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setUseColumnLabel</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"useColumnLabel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setUseGeneratedKeys</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"useGeneratedKeys"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setDefaultExecutorType</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"defaultExecutorType"</span><span class="token punctuation">,</span> <span class="token string">"SIMPLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setDefaultStatementTimeout</span><span class="token punctuation">(</span><span class="token function">integerValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"defaultStatementTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setDefaultFetchSize</span><span class="token punctuation">(</span><span class="token function">integerValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"defaultFetchSize"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setDefaultResultSetType</span><span class="token punctuation">(</span><span class="token function">resolveResultSetType</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"defaultResultSetType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"mapUnderscoreToCamelCase"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setSafeRowBoundsEnabled</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"safeRowBoundsEnabled"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setLocalCacheScope</span><span class="token punctuation">(</span><span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"localCacheScope"</span><span class="token punctuation">,</span> <span class="token string">"SESSION"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setJdbcTypeForNull</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbcTypeForNull"</span><span class="token punctuation">,</span> <span class="token string">"OTHER"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setLazyLoadTriggerMethods</span><span class="token punctuation">(</span><span class="token function">stringSetValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"lazyLoadTriggerMethods"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"equals,clone,hashCode,toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setSafeResultHandlerEnabled</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"safeResultHandlerEnabled"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setDefaultScriptingLanguage</span><span class="token punctuation">(</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"defaultScriptingLanguage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setDefaultEnumTypeHandler</span><span class="token punctuation">(</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"defaultEnumTypeHandler"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setCallSettersOnNulls</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"callSettersOnNulls"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setUseActualParamName</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"useActualParamName"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setReturnInstanceForEmptyRow</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"returnInstanceForEmptyRow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setLogPrefix</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"logPrefix"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setConfigurationFactory</span><span class="token punctuation">(</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"configurationFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setShrinkWhitespacesInSql</span><span class="token punctuation">(</span><span class="token function">booleanValueOf</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"shrinkWhitespacesInSql"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setDefaultSqlProviderType</span><span class="token punctuation">(</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"defaultSqlProviderType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有配置以及默认值</p><p><img src="/medias/assets/mybatis/20210812095200.png"></p><h4 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h4><p>typeAliases用来设置别名，有了别名就不用指定完整的全限定名。例如org.apache.ibatis.domain.blog.Author可以用简短的BlogAuthor表示，非常方便。别名的注册，最终是注册到configuration的成员属性上</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BlogAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Author<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Blog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.blog.Post<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.domain.jpetstore<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>TypeAliasRegistry就是用一个HashMap保存别名对应的类对象而已</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeAliasRegistry</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typeAliases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">TypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"byte"</span><span class="token punctuation">,</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"integer"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"boolean"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"byte[]"</span><span class="token punctuation">,</span> <span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"long[]"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"short[]"</span><span class="token punctuation">,</span> <span class="token class-name">Short</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"int[]"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"integer[]"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"double[]"</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"float[]"</span><span class="token punctuation">,</span> <span class="token class-name">Float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"boolean[]"</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_byte"</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_long"</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_short"</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_int"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_integer"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_double"</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_float"</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_boolean"</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_byte[]"</span><span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_long[]"</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_short[]"</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_int[]"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_integer[]"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_double[]"</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_float[]"</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"_boolean[]"</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"decimal"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"bigdecimal"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"biginteger"</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"object"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"date[]"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"decimal[]"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"bigdecimal[]"</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"biginteger[]"</span><span class="token punctuation">,</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"object[]"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"hashmap"</span><span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"arraylist"</span><span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"collection"</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"iterator"</span><span class="token punctuation">,</span> <span class="token class-name">Iterator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token string">"ResultSet"</span><span class="token punctuation">,</span> <span class="token class-name">ResultSet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> child <span class="token operator">:</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果是包名，则把包中的所有类都注册</span>        <span class="token class-name">String</span> typeAliasPackage <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">getTypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerAliases</span><span class="token punctuation">(</span>typeAliasPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果是类，则单独注册一个</span>        <span class="token class-name">String</span> alias <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"alias"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> type <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>alias <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果没有配置别名，则自动生成别名</span>            typeAliasRegistry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 直接按照别名进行注册</span>            typeAliasRegistry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error registering typeAlias for '"</span> <span class="token operator">+</span> alias <span class="token operator">+</span> <span class="token string">"'. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体操作就委托给了TypeAliasRegistry的各个registryAlias方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerAliases</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">registerAliases</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerAliases</span><span class="token punctuation">(</span><span class="token class-name">String</span> packageName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">ResolverUtil</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resolverUtil <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResolverUtil</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  resolverUtil<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResolverUtil<span class="token punctuation">.</span>IsA</span><span class="token punctuation">(</span>superType<span class="token punctuation">)</span><span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typeSet <span class="token operator">=</span> resolverUtil<span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">:</span> typeSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Ignore inner classes and interfaces (including package-info.java)</span>    <span class="token comment">// Skip also inner classes. See issue #6</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">isMemberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">registerAlias</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 加单类名当作初始别名</span>  <span class="token class-name">String</span> alias <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 检查Alias注解</span>  <span class="token class-name">Alias</span> aliasAnnotation <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Alias</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>aliasAnnotation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果有配置Alias注解，则取value值覆盖初始别名</span>    alias <span class="token operator">=</span> aliasAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 注册</span>  <span class="token function">registerAlias</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token class-name">String</span> alias<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>alias <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">"The parameter alias cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// issue #748</span>  <span class="token class-name">String</span> key <span class="token operator">=</span> alias<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">ENGLISH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>typeAliases<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> typeAliases<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>typeAliases<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">"The alias '"</span> <span class="token operator">+</span> alias <span class="token operator">+</span> <span class="token string">"' is already mapped to the value '"</span> <span class="token operator">+</span> typeAliases<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  typeAliases<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerAlias</span><span class="token punctuation">(</span><span class="token class-name">String</span> alias<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">registerAlias</span><span class="token punctuation">(</span>alias<span class="token punctuation">,</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeException</span><span class="token punctuation">(</span><span class="token string">"Error registering type alias "</span> <span class="token operator">+</span> alias <span class="token operator">+</span> <span class="token string">" for "</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">". Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h4><p>类型转换器用来处理数据库字段和java属性之间的转换，默认已经注册了常用的类型转换器。最终保存在configuration中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomStringTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomStringTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomLongTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.typehandler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">TypeHandlerRegistry</span> typeHandlerRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TypeHandlerRegistry</span> <span class="token punctuation">{</span>  <span class="token comment">// jdbc type 对应的TypeHandler</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JdbcType</span><span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>  jdbcTypeHandlerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// java type对应的jdbc TypeHandler</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Type</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">JdbcType</span><span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> typeHandlerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 未知类型</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> unknownTypeHandler<span class="token punctuation">;</span>  <span class="token comment">// 全部类型转换器</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allTypeHandlersMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// null对应应的转换器</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JdbcType</span><span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">NULL_TYPE_HANDLER_MAP</span> <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 默认枚举类型转换器</span>  <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&gt;</span></span> defaultEnumTypeHandler <span class="token operator">=</span> <span class="token class-name">EnumTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>  <span class="token comment">/**   * The default constructor.   */</span>  <span class="token keyword">public</span> <span class="token class-name">TypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * The constructor that pass the MyBatis configuration.   *   * @param configuration a MyBatis configuration   * @since 3.5.4   */</span>  <span class="token keyword">public</span> <span class="token class-name">TypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>unknownTypeHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnknownTypeHandler</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">BIT</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BooleanTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ByteTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ByteTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">TINYINT</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ByteTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ShortTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ShortTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">SMALLINT</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ShortTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntegerTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntegerTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IntegerTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LongTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LongTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FloatTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FloatTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">FLOAT</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FloatTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DoubleTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DoubleTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">DOUBLE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DoubleTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClobReaderTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">CHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">CLOB</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">LONGVARCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">NVARCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NStringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">NCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NStringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">NCLOB</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NClobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">CHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">CLOB</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">LONGVARCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">NVARCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NStringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">NCHAR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NStringTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">NCLOB</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NClobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">ARRAY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">ARRAY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigIntegerTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">BIGINT</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LongTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimalTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">REAL</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimalTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">DECIMAL</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimalTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">NUMERIC</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimalTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlobInputStreamTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ByteObjectArrayTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">BLOB</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlobByteObjectArrayTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">LONGVARBINARY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlobByteObjectArrayTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">BLOB</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">LONGVARBINARY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">LONGVARBINARY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">BLOB</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlobTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> unknownTypeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">OTHER</span><span class="token punctuation">,</span> unknownTypeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">OTHER</span><span class="token punctuation">,</span> unknownTypeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateOnlyTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">TIME</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TimeOnlyTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">TIMESTAMP</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DateOnlyTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">TIME</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TimeOnlyTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SqlDateTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Time</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SqlTimeTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Timestamp</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SqlTimestampTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">SQLXML</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SqlxmlTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InstantTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalTimeTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">OffsetDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OffsetDateTimeTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">OffsetTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OffsetTimeTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ZonedDateTimeTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Month</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MonthTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Year</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">YearTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">YearMonth</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">YearMonthTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JapaneseDate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JapaneseDateTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// issue #273</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CharacterTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CharacterTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> child <span class="token operator">:</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果配置是包的话，把包下的全部类作为为typeHandler</span>        <span class="token class-name">String</span> typeHandlerPackage <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typeHandlerRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>typeHandlerPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果配置的是单个，那就单个注册</span>        <span class="token class-name">String</span> javaTypeName <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"javaType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> jdbcTypeName <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"jdbcType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> handlerTypeName <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> javaTypeClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>javaTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JdbcType</span> jdbcType <span class="token operator">=</span> <span class="token function">resolveJdbcType</span><span class="token punctuation">(</span>jdbcTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> typeHandlerClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>handlerTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>javaTypeClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>jdbcType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            typeHandlerRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>javaTypeClass<span class="token punctuation">,</span> typeHandlerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            typeHandlerRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>javaTypeClass<span class="token punctuation">,</span> jdbcType<span class="token punctuation">,</span> typeHandlerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          typeHandlerRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>typeHandlerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>委托给TypeHandlerRegistry的各个register方法完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  jdbcTypeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jdbcType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//</span><span class="token comment">// REGISTER INSTANCE</span><span class="token comment">//</span><span class="token comment">// Only handler</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> typeHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">boolean</span> mappedTypeFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token class-name">MappedTypes</span> mappedTypes <span class="token operator">=</span> typeHandler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MappedTypes</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedTypes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> handledType <span class="token operator">:</span> mappedTypes<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">register</span><span class="token punctuation">(</span>handledType<span class="token punctuation">,</span> typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>      mappedTypeFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// @since 3.1.0 - try to auto-discover the mapped type</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedTypeFound <span class="token operator">&amp;&amp;</span> typeHandler <span class="token keyword">instanceof</span> <span class="token class-name">TypeReference</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> typeReference <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> typeHandler<span class="token punctuation">;</span>      <span class="token function">register</span><span class="token punctuation">(</span>typeReference<span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>      mappedTypeFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// maybe users define the TypeReference with a different type and are not assignable, so just ignore it</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedTypeFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">,</span> typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// java type + handler</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> javaType<span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> typeHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">)</span> javaType<span class="token punctuation">,</span> typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Type</span> javaType<span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> typeHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">MappedJdbcTypes</span> mappedJdbcTypes <span class="token operator">=</span> typeHandler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MappedJdbcTypes</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedJdbcTypes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JdbcType</span> handledJdbcType <span class="token operator">:</span> mappedJdbcTypes<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">register</span><span class="token punctuation">(</span>javaType<span class="token punctuation">,</span> handledJdbcType<span class="token punctuation">,</span> typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedJdbcTypes<span class="token punctuation">.</span><span class="token function">includeNullJdbcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">register</span><span class="token punctuation">(</span>javaType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">register</span><span class="token punctuation">(</span>javaType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> javaTypeReference<span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">register</span><span class="token punctuation">(</span>javaTypeReference<span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// java type + jdbc type + handler</span><span class="token comment">// Cast is required here</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"cast"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Type</span><span class="token punctuation">)</span> type<span class="token punctuation">,</span> jdbcType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Type</span> javaType<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>javaType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JdbcType</span><span class="token punctuation">,</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> typeHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>javaType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> map <span class="token operator">==</span> <span class="token constant">NULL_TYPE_HANDLER_MAP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>jdbcType<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    typeHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>javaType<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  allTypeHandlersMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//</span><span class="token comment">// REGISTER CLASS</span><span class="token comment">//</span><span class="token comment">// Only handler type</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> typeHandlerClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">boolean</span> mappedTypeFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token class-name">MappedTypes</span> mappedTypes <span class="token operator">=</span> typeHandlerClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MappedTypes</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedTypes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> javaTypeClass <span class="token operator">:</span> mappedTypes<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">register</span><span class="token punctuation">(</span>javaTypeClass<span class="token punctuation">,</span> typeHandlerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>      mappedTypeFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedTypeFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">register</span><span class="token punctuation">(</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> typeHandlerClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// java type + handler type</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> javaTypeClassName<span class="token punctuation">,</span> <span class="token class-name">String</span> typeHandlerClassName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>  <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>javaTypeClassName<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>typeHandlerClassName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> javaTypeClass<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> typeHandlerClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">register</span><span class="token punctuation">(</span>javaTypeClass<span class="token punctuation">,</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>javaTypeClass<span class="token punctuation">,</span> typeHandlerClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// java type + jdbc type + handler type</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> javaTypeClass<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> typeHandlerClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">register</span><span class="token punctuation">(</span>javaTypeClass<span class="token punctuation">,</span> jdbcType<span class="token punctuation">,</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>javaTypeClass<span class="token punctuation">,</span> typeHandlerClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mybatis3.4.5默认支持了JSR-310（日期和时间API），全部类型处理器如下</p><p><img src="/medias/assets/mybatis/20210812101836.png"></p><h4 id="objectFactory"><a href="#objectFactory" class="headerlink" title="objectFactory"></a>objectFactory</h4><p>每次创建结果对象的时候，Mybatis都会使用对象工厂来完成实例化工作。默认的对象工厂仅仅实例化目标类，通过无参构造方法或者通过指定参数的构造方法进行实例化。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.ExampleObjectFactory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectFactoryProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>objectFactory</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解析过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 对象工厂类型</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对象工厂属性</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实例化对象工厂</span>    <span class="token class-name">ObjectFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ObjectFactory</span><span class="token punctuation">)</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置对象工厂属性</span>    factory<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存到configuration中</span>    configuration<span class="token punctuation">.</span><span class="token function">setObjectFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="objectWrapperFactory"><a href="#objectWrapperFactory" class="headerlink" title="objectWrapperFactory"></a>objectWrapperFactory</h4><p>objectWrapperFactory是创建包装类工厂</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectWrapperFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomObjectWrapperFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解析过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 类型</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实例化</span>    <span class="token class-name">ObjectWrapperFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ObjectWrapperFactory</span><span class="token punctuation">)</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存到configuration中</span>    configuration<span class="token punctuation">.</span><span class="token function">setObjectWrapperFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="reflectorFactory"><a href="#reflectorFactory" class="headerlink" title="reflectorFactory"></a>reflectorFactory</h4><p>ReflectorFactory接口主要是为了实现对Reflector对象的创建和缓存，Mybatis为ReflectorFactory接口提供了一个默认实现类DefaultReflectorFactory，其中findForClass()方法实现会为指定的Class创建Reflector对象，并将Reflector 对象缓存到reflectorMap中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reflectorFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CustomReflectorFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解析过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 类型</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实例化</span>    <span class="token class-name">ReflectorFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ReflectorFactory</span><span class="token punctuation">)</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存到configuration中</span>    configuration<span class="token punctuation">.</span><span class="token function">setReflectorFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Executor</span> <span class="token punctuation">(</span>update<span class="token punctuation">,</span> query<span class="token punctuation">,</span> flushStatements<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> rollback<span class="token punctuation">,</span> getTransaction<span class="token punctuation">,</span> close<span class="token punctuation">,</span> isClosed<span class="token punctuation">)</span><span class="token class-name">ParameterHandler</span> <span class="token punctuation">(</span>getParameterObject<span class="token punctuation">,</span> setParameters<span class="token punctuation">)</span><span class="token class-name">ResultSetHandler</span> <span class="token punctuation">(</span>handleResultSets<span class="token punctuation">,</span> handleOutputParameters<span class="token punctuation">)</span><span class="token class-name">StatementHandler</span> <span class="token punctuation">(</span>prepare<span class="token punctuation">,</span> parameterize<span class="token punctuation">,</span> batch<span class="token punctuation">,</span> update<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>插件保存在configuration的interceptorChain中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">InterceptorChain</span> interceptorChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorChain</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interceptor</span><span class="token punctuation">&gt;</span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pluginAll</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Interceptor</span> interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      target <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Interceptor</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.ExamplePlugin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pluginProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pluginElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> parent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> child <span class="token operator">:</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 拦截器</span>      <span class="token class-name">String</span> interceptor <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"interceptor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 拦截器属性</span>      <span class="token class-name">Properties</span> properties <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 初始化拦截器</span>      <span class="token class-name">Interceptor</span> interceptorInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Interceptor</span><span class="token punctuation">)</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置拦截器属性</span>      interceptorInstance<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 保存到configuration中</span>      configuration<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptorInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h4><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UNPOOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">environmentsElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>environment <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">XNode</span> child <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> id <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSpecifiedEnvironment</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 事务工厂</span>        <span class="token class-name">TransactionFactory</span> txFactory <span class="token operator">=</span> <span class="token function">transactionManagerElement</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"transactionManager"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数据源工厂</span>        <span class="token class-name">DataSourceFactory</span> dsFactory <span class="token operator">=</span> <span class="token function">dataSourceElement</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建数据源</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> dsFactory<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建环境对象</span>        <span class="token class-name">Environment<span class="token punctuation">.</span>Builder</span> environmentBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Environment<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">transactionFactory</span><span class="token punctuation">(</span>txFactory<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 保存到configuration中</span>        configuration<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environmentBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析事务工厂</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">TransactionFactory</span> <span class="token function">transactionManagerElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> props <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TransactionFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TransactionFactory</span><span class="token punctuation">)</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> factory<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Environment declaration requires a TransactionFactory."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析数据源工厂</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">DataSourceFactory</span> <span class="token function">dataSourceElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> props <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataSourceFactory</span> factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSourceFactory</span><span class="token punctuation">)</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    factory<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> factory<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Environment declaration requires a DataSourceFactory."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终保存再Environment对象中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Environment</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h4><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB_VENDOR<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Apache Derby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>derby<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>databaseIdProvider</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解析过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span><span class="token class-name">XNode</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>  <span class="token class-name">DatabaseIdProvider</span> databaseIdProvider <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 类型</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保持向下兼容VENDOR</span>    <span class="token comment">// awful patch to keep backward compatibility</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"VENDOR"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      type <span class="token operator">=</span> <span class="token string">"DB_VENDOR"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 属性</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实例化DatabaseIdProvider</span>    databaseIdProvider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DatabaseIdProvider</span><span class="token punctuation">)</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置属性</span>    databaseIdProvider<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>environment <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> databaseIdProvider <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> databaseId <span class="token operator">=</span> databaseIdProvider<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存到configuration中</span>    configuration<span class="token punctuation">.</span><span class="token function">setDatabaseId</span><span class="token punctuation">(</span>databaseId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h4><p>告诉Mybatis去哪里找mapper</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/apache/ibatis/builder/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file:./src/test/java/org/apache/ibatis/builder/NestedBlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.CachedAuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.ibatis.builder.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis（一）：总体架构</title>
      <link href="/2021/08/07/mybatis/mybatis-01/"/>
      <url>/2021/08/07/mybatis/mybatis-01/</url>
      
        <content type="html"><![CDATA[<h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p><img src="/medias/assets/mybatis/20210807150324.png"></p><p><img src="/medias/assets/mybatis/20210807151528.png"></p><h2 id="核心组件说明"><a href="#核心组件说明" class="headerlink" title="核心组件说明"></a>核心组件说明</h2><h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>顶层API，表示和数据库的会话，提供增删查改的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SqlSession</span> <span class="token keyword">extends</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">String</span> mapKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">String</span> mapKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">String</span> mapKey<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectCursor</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectCursor</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectCursor</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> force<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> force<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BatchResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Configuration</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>执行器，接受SqlSession的委托，负责调度，包揽SQL语句的生成和维护查询缓存等操作。总共有四个执行器，分别是SimpleExecutor、ReuseExecutor、CachingExecutor、BatchExecutor。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>  <span class="token class-name">ResultHandler</span> <span class="token constant">NO_RESULT_HANDLER</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> cacheKey<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryCursor</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BatchResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> required<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> required<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token class-name">CacheKey</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">,</span> <span class="token class-name">RowBounds</span> rowBounds<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">isCached</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">deferLoad</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> ms<span class="token punctuation">,</span> <span class="token class-name">MetaObject</span> resultObject<span class="token punctuation">,</span> <span class="token class-name">String</span> property<span class="token punctuation">,</span> <span class="token class-name">CacheKey</span> key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Transaction</span> <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forceRollback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">setExecutorWrapper</span><span class="token punctuation">(</span><span class="token class-name">Executor</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h3><p>封装JDBC的Statement操作，接受Executor的委托，负责对Statement进行操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StatementHandler</span> <span class="token punctuation">{</span>  <span class="token class-name">Statement</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">Integer</span> transactionTimeout<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">parameterize</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">batch</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span> resultHandler<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Cursor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryCursor</span><span class="token punctuation">(</span><span class="token class-name">Statement</span> statement<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ParameterHandler</span> <span class="token function">getParameterHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ResultHandler"><a href="#ResultHandler" class="headerlink" title="ResultHandler"></a>ResultHandler</h3><p>负责将JDBC返回的结果ResultSet转换为List集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResultHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token class-name">ResultContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> resultContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TypeHandler"><a href="#TypeHandler" class="headerlink" title="TypeHandler"></a>TypeHandler</h3><p>负责Java类型和JDBC类型之间的转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TypeHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> parameter<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span>  <span class="token class-name">T</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MapedStatement"><a href="#MapedStatement" class="headerlink" title="MapedStatement"></a>MapedStatement</h3><p>封装了一条SQL语句，对应XML中的insert、delete、update、select节点或者注解方式的配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MappedStatement</span> <span class="token punctuation">{</span>  <span class="token comment">// mapper配置文件名，如：UserMapper.xml</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> resource<span class="token punctuation">;</span>  <span class="token comment">// 全局配置</span>  <span class="token keyword">private</span> <span class="token class-name">Configuration</span> configuration<span class="token punctuation">;</span>  <span class="token comment">// 节点的id属性加命名空间,如：com.lucky.mybatis.dao.UserMapper.selectByExample</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>  <span class="token comment">// 获取数据大小</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> fetchSize<span class="token punctuation">;</span>  <span class="token comment">// 执行超时时间</span>  <span class="token keyword">private</span> <span class="token class-name">Integer</span> timeout<span class="token punctuation">;</span>  <span class="token comment">// 操作SQL的对象的类型</span>  <span class="token keyword">private</span> <span class="token class-name">StatementType</span> statementType<span class="token punctuation">;</span>  <span class="token comment">// 结果类型</span>  <span class="token keyword">private</span> <span class="token class-name">ResultSetType</span> resultSetType<span class="token punctuation">;</span>  <span class="token comment">// sql语句</span>  <span class="token keyword">private</span> <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>  <span class="token comment">// 缓存</span>  <span class="token keyword">private</span> <span class="token class-name">Cache</span> cache<span class="token punctuation">;</span>  <span class="token comment">// 参数映射</span>  <span class="token keyword">private</span> <span class="token class-name">ParameterMap</span> parameterMap<span class="token punctuation">;</span>  <span class="token comment">// 结果集映射</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMap</span><span class="token punctuation">&gt;</span></span> resultMaps<span class="token punctuation">;</span>  <span class="token comment">// 是否清除缓存</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> flushCacheRequired<span class="token punctuation">;</span>  <span class="token comment">// 是否使用缓存</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> useCache<span class="token punctuation">;</span>  <span class="token comment">// 结果集是否排序</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> resultOrdered<span class="token punctuation">;</span>  <span class="token comment">// sql语句类型</span>  <span class="token keyword">private</span> <span class="token class-name">SqlCommandType</span> sqlCommandType<span class="token punctuation">;</span>  <span class="token comment">// 主键生成器</span>  <span class="token keyword">private</span> <span class="token class-name">KeyGenerator</span> keyGenerator<span class="token punctuation">;</span>  <span class="token comment">// 主键属性</span>  <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyProperties<span class="token punctuation">;</span>  <span class="token comment">// 主键列</span>  <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyColumns<span class="token punctuation">;</span>  <span class="token comment">// 是否有嵌套结果映射</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasNestedResultMaps<span class="token punctuation">;</span>  <span class="token comment">// 数据库id</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> databaseId<span class="token punctuation">;</span>  <span class="token comment">// 日志对象</span>  <span class="token keyword">private</span> <span class="token class-name">Log</span> statementLog<span class="token punctuation">;</span>  <span class="token comment">// sql语句解析驱动</span>  <span class="token keyword">private</span> <span class="token class-name">LanguageDriver</span> lang<span class="token punctuation">;</span>  <span class="token comment">// 结果集</span>  <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resultSets<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SqlSource"><a href="#SqlSource" class="headerlink" title="SqlSource"></a>SqlSource</h3><p>根据传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">{</span>  <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BoundSql"><a href="#BoundSql" class="headerlink" title="BoundSql"></a>BoundSql</h3><p>表示动态生成的SQL语句以及相应的参数信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoundSql</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sql<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> additionalParameters<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MetaObject</span> metaParameters<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">BoundSql</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> parameterMappings<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sql <span class="token operator">=</span> sql<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parameterMappings <span class="token operator">=</span> parameterMappings<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parameterObject <span class="token operator">=</span> parameterObject<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>additionalParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>metaParameters <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newMetaObject</span><span class="token punctuation">(</span>additionalParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sql<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterMapping</span><span class="token punctuation">&gt;</span></span> <span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> parameterMappings<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> parameterObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasAdditionalParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> paramName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyTokenizer</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> additionalParameters<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAdditionalParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    metaParameters<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getAdditionalParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> metaParameters<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Configration"><a href="#Configration" class="headerlink" title="Configration"></a>Configration</h3><p>全局配置，所有的配置信息都在这个对象中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Configuration</span> <span class="token punctuation">{</span>  <span class="token comment">// 环境配置,比如prod、stage、dev，可配置不同事务管理器工厂和数据源</span>  <span class="token keyword">protected</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>  <span class="token comment">// 允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> safeRowBoundsEnabled<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> safeResultHandlerEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> mapUnderscoreToCamelCase<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> aggressiveLazyLoading<span class="token punctuation">;</span>  <span class="token comment">// 是否允许单一语句返回多结果集（需要兼容驱动）</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> multipleResultSetsEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 允许JDBC支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> useGeneratedKeys<span class="token punctuation">;</span>  <span class="token comment">// 使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> useColumnLabel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 是否开启二级缓存</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> cacheEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> callSettersOnNulls<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> useActualParamName <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> returnInstanceForEmptyRow<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> shrinkWhitespacesInSql<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">String</span> logPrefix<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Log</span><span class="token punctuation">&gt;</span></span> logImpl<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> VFS<span class="token punctuation">&gt;</span></span> vfsImpl<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> defaultSqlProviderType<span class="token punctuation">;</span>  <span class="token comment">// MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据</span>  <span class="token keyword">protected</span> <span class="token class-name">LocalCacheScope</span> localCacheScope <span class="token operator">=</span> <span class="token class-name">LocalCacheScope</span><span class="token punctuation">.</span><span class="token constant">SESSION</span><span class="token punctuation">;</span>  <span class="token comment">// 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</span>  <span class="token keyword">protected</span> <span class="token class-name">JdbcType</span> jdbcTypeForNull <span class="token operator">=</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">OTHER</span><span class="token punctuation">;</span>  <span class="token comment">// 指定哪个对象的方法触发一次延迟加载</span>  <span class="token keyword">protected</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lazyLoadTriggerMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token string">"clone"</span><span class="token punctuation">,</span> <span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置超时时间，它决定驱动等待数据库响应的秒数</span>  <span class="token keyword">protected</span> <span class="token class-name">Integer</span> defaultStatementTimeout<span class="token punctuation">;</span>  <span class="token comment">// 为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖</span>  <span class="token keyword">protected</span> <span class="token class-name">Integer</span> defaultFetchSize<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">ResultSetType</span> defaultResultSetType<span class="token punctuation">;</span>  <span class="token comment">// 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新</span>  <span class="token keyword">protected</span> <span class="token class-name">ExecutorType</span> defaultExecutorType <span class="token operator">=</span> <span class="token class-name">ExecutorType</span><span class="token punctuation">.</span><span class="token constant">SIMPLE</span><span class="token punctuation">;</span>  <span class="token comment">// 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。</span>  <span class="token keyword">protected</span> <span class="token class-name">AutoMappingBehavior</span> autoMappingBehavior <span class="token operator">=</span> <span class="token class-name">AutoMappingBehavior</span><span class="token punctuation">.</span><span class="token constant">PARTIAL</span><span class="token punctuation">;</span>  <span class="token comment">// 指定发现自动映射目标未知列（或者未知属性类型）的行为。NONE: 不做任何反应、WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior'的日志等级必须设置为 WARN)、FAILING: 映射失败 (抛出 SqlSessionException)</span>  <span class="token keyword">protected</span> <span class="token class-name">AutoMappingUnknownColumnBehavior</span> autoMappingUnknownColumnBehavior <span class="token operator">=</span> <span class="token class-name">AutoMappingUnknownColumnBehavior</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">Properties</span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">ReflectorFactory</span> reflectorFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultReflectorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">ObjectFactory</span> objectFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">ObjectWrapperFactory</span> objectWrapperFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultObjectWrapperFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态</span>  <span class="token keyword">protected</span> <span class="token keyword">boolean</span> lazyLoadingEnabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token class-name">ProxyFactory</span> proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavassistProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// #224 Using internal Javassist instead of OGNL</span>  <span class="token keyword">protected</span> <span class="token class-name">String</span> databaseId<span class="token punctuation">;</span>  <span class="token comment">/**   * Configuration factory class.   * Used to create Configuration for loading deserialized unread properties.   *   * @see &lt;a href='https://github.com/mybatis/old-google-code-issues/issues/300'&gt;Issue 300 (google code)&lt;/a&gt;   */</span>  <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configurationFactory<span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">MapperRegistry</span> mapperRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">InterceptorChain</span> interceptorChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">TypeHandlerRegistry</span> typeHandlerRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">TypeAliasRegistry</span> typeAliasRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">LanguageDriverRegistry</span> languageRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LanguageDriverRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span><span class="token punctuation">&gt;</span></span> mappedStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MappedStatement</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Mapped Statements collection"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">conflictMessageProducer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>savedValue<span class="token punctuation">,</span> targetValue<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>          <span class="token string">". please check "</span> <span class="token operator">+</span> savedValue<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> targetValue<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Cache</span><span class="token punctuation">&gt;</span></span> caches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Caches collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ResultMap</span><span class="token punctuation">&gt;</span></span> resultMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Result Maps collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ParameterMap</span><span class="token punctuation">&gt;</span></span> parameterMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Parameter Maps collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">&gt;</span></span> keyGenerators <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"Key Generators collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> loadedResources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">XNode</span><span class="token punctuation">&gt;</span></span> sqlFragments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrictMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"XML fragments parsed from previous mappers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XMLStatementBuilder</span><span class="token punctuation">&gt;</span></span> incompleteStatements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CacheRefResolver</span><span class="token punctuation">&gt;</span></span> incompleteCacheRefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultMapResolver</span><span class="token punctuation">&gt;</span></span> incompleteResultMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodResolver</span><span class="token punctuation">&gt;</span></span> incompleteMethods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*   * A map holds cache-ref relationship. The key is the namespace that   * references a cache bound to another namespace and the value is the   * namespace which the actual cache is bound to.   */</span>  <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cacheRefMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>Mybatis通过暴露SqlSession接口给用户完成数据增删查改操作。</li><li>Executor执行器包含4个，分别是SimpleExecutor、CachingExecutor、ReuseExecutor、BatchExecutor。</li><li>StatementHandler封装JDBC Statement，负责处理Statement相关处理，比如参数设置。</li><li>ResultHandler负责把JDBC的执行结果ResultSet转换为List集合。</li><li>MapedStatement封装了XML中的insert、delete、update、select节点。</li><li>SqlSource负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中。</li><li>BoundSql表示动态生成的SQL语句以及相应的参数信息</li><li>Configuration全局配置对象，包含所有配置信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十）</title>
      <link href="/2021/08/06/architecture/architecture-20/"/>
      <url>/2021/08/06/architecture/architecture-20/</url>
      
        <content type="html"><![CDATA[<h2 id="如何设计存储架构"><a href="#如何设计存储架构" class="headerlink" title="如何设计存储架构"></a>如何设计存储架构</h2><h3 id="存储架构设计总体思路"><a href="#存储架构设计总体思路" class="headerlink" title="存储架构设计总体思路"></a>存储架构设计总体思路</h3><h4 id="存储架构设计三个步骤"><a href="#存储架构设计三个步骤" class="headerlink" title="存储架构设计三个步骤"></a>存储架构设计三个步骤</h4><p><img src="/medias/assets/architecture/20210806083217.png"></p><h5 id="估算性能需求"><a href="#估算性能需求" class="headerlink" title="估算性能需求"></a>估算性能需求</h5><h6 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h6><p>基于具体业务场景来估算性能需求，包括存储量、读写性能等。</p><h6 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h6><ol><li>不知道如何估算</li><li>担心估算不准</li></ol><h5 id="选择存储系统"><a href="#选择存储系统" class="headerlink" title="选择存储系统"></a>选择存储系统</h5><h6 id="任务-1"><a href="#任务-1" class="headerlink" title="任务"></a>任务</h6><p>根据技术储备、方案优缺点选择合适的存储系统</p><h6 id="挑战-1"><a href="#挑战-1" class="headerlink" title="挑战"></a>挑战</h6><ol><li>不知道有哪些存储系统</li><li>知道但是不知道怎么选</li></ol><h5 id="设计存储方案"><a href="#设计存储方案" class="headerlink" title="设计存储方案"></a>设计存储方案</h5><h6 id="任务-2"><a href="#任务-2" class="headerlink" title="任务"></a>任务</h6><p>基于选择的存储系统，设计具体的存储方案，如果发现不行，回到步骤2再换一个</p><h6 id="挑战-2"><a href="#挑战-2" class="headerlink" title="挑战"></a>挑战</h6><ol><li>不知道如何设计存储方案</li></ol><h3 id="如何估算业务所需存储性能"><a href="#如何估算业务所需存储性能" class="headerlink" title="如何估算业务所需存储性能"></a>如何估算业务所需存储性能</h3><h4 id="性能估算步骤"><a href="#性能估算步骤" class="headerlink" title="性能估算步骤"></a>性能估算步骤</h4><p><img src="/medias/assets/architecture/20210806083647.png"></p><h5 id="用户量预估"><a href="#用户量预估" class="headerlink" title="用户量预估"></a>用户量预估</h5><p><img src="/medias/assets/architecture/20210806084244.png"></p><h5 id="用户行为建模"><a href="#用户行为建模" class="headerlink" title="用户行为建模"></a>用户行为建模</h5><p><img src="/medias/assets/architecture/20210806084416.png"></p><h5 id="存储性能需求计算"><a href="#存储性能需求计算" class="headerlink" title="存储性能需求计算"></a>存储性能需求计算</h5><p><img src="/medias/assets/architecture/20210806084546.png"></p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img src="/medias/assets/architecture/20210806084850.png"></p><h3 id="如何选择存储架构"><a href="#如何选择存储架构" class="headerlink" title="如何选择存储架构"></a>如何选择存储架构</h3><h4 id="选存储架构选择逻辑"><a href="#选存储架构选择逻辑" class="headerlink" title="选存储架构选择逻辑"></a>选存储架构选择逻辑</h4><p><img src="/medias/assets/architecture/20210806085628.png"></p><h4 id="常见存储系统分类"><a href="#常见存储系统分类" class="headerlink" title="常见存储系统分类"></a>常见存储系统分类</h4><p><img src="/medias/assets/architecture/20210806090626.png"></p><h4 id="如何选择合适的存储系统"><a href="#如何选择合适的存储系统" class="headerlink" title="如何选择合适的存储系统"></a>如何选择合适的存储系统</h4><p><img src="/medias/assets/architecture/20210806090812.png"></p><h3 id="如何设计存储方案"><a href="#如何设计存储方案" class="headerlink" title="如何设计存储方案"></a>如何设计存储方案</h3><p><img src="/medias/assets/architecture/20210806091213.png"></p><p>案例：Redis存储粉丝列表</p><p><img src="/medias/assets/architecture/20210806091610.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十九）</title>
      <link href="/2021/08/05/architecture/architecture-19/"/>
      <url>/2021/08/05/architecture/architecture-19/</url>
      
        <content type="html"><![CDATA[<h2 id="存储架构模式之分片架构和分区架构"><a href="#存储架构模式之分片架构和分区架构" class="headerlink" title="存储架构模式之分片架构和分区架构"></a>存储架构模式之分片架构和分区架构</h2><h3 id="分片架构"><a href="#分片架构" class="headerlink" title="分片架构"></a>分片架构</h3><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p><img src="/medias/assets/architecture/20210805172733.png"></p><h4 id="核心设计"><a href="#核心设计" class="headerlink" title="核心设计"></a>核心设计</h4><p><img src="/medias/assets/architecture/20210805172813.png"></p><h5 id="分片规则"><a href="#分片规则" class="headerlink" title="分片规则"></a>分片规则</h5><p><img src="/medias/assets/architecture/20210805173354.png"></p><h5 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h5><p><img src="/medias/assets/architecture/20210805173623.png"></p><p>配置中心案例</p><p><img src="/medias/assets/architecture/20210805173745.png"></p><p>路由转发案例</p><p><img src="/medias/assets/architecture/20210805174351.png"></p><p><strong>节点直接相互连接获取分片信息，集群规模大了同步信息太多，性能下降</strong></p><h4 id="分片架构高可用"><a href="#分片架构高可用" class="headerlink" title="分片架构高可用"></a>分片架构高可用</h4><h5 id="独立备份"><a href="#独立备份" class="headerlink" title="独立备份"></a>独立备份</h5><p><img src="/medias/assets/architecture/20210805174955.png"></p><h5 id="相互备份"><a href="#相互备份" class="headerlink" title="相互备份"></a>相互备份</h5><p><img src="/medias/assets/architecture/20210805175025.png"></p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p><img src="/medias/assets/architecture/20210805175136.png"></p><h3 id="分区架构"><a href="#分区架构" class="headerlink" title="分区架构"></a>分区架构</h3><h4 id="本质-1"><a href="#本质-1" class="headerlink" title="本质"></a>本质</h4><p><img src="/medias/assets/architecture/20210805175456.png"></p><h4 id="全局路由"><a href="#全局路由" class="headerlink" title="全局路由"></a>全局路由</h4><p><img src="/medias/assets/architecture/20210805175612.png"></p><h4 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h4><h5 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h5><p><img src="/medias/assets/architecture/20210805180051.png"></p><ol><li>设计简单，各分区之间并无直接联系，可以做到互不影响</li><li>扩展容易，如果需要增加新分区，只需将新增的分区也复制到备份中心即可，其它分区不受影响</li><li>成本较高，需要建立一个独立的备份中心</li></ol><h5 id="互备式"><a href="#互备式" class="headerlink" title="互备式"></a>互备式</h5><p><img src="/medias/assets/architecture/20210805180308.png"></p><ol><li>设计比较复杂，各个分区除了要承担业务数据存储，还需要承担备份功能，相互之间相互关联和影响</li><li>扩展麻烦，增加分区的时候需要调整其它分区</li><li>成本低，直接利用现有机房和网络</li></ol><h5 id="独立式"><a href="#独立式" class="headerlink" title="独立式"></a>独立式</h5><p><img src="/medias/assets/architecture/20210805180535.png"></p><ol><li>设计简单，各分区互不影响</li><li>扩展容易，新增分区只需要搭建自己的备份中心即可</li><li>成本高，每个分区需要独立的备份中心，备份中心的场地成本是主要成本</li></ol><h4 id="备份策略对比"><a href="#备份策略对比" class="headerlink" title="备份策略对比"></a>备份策略对比</h4><p><img src="/medias/assets/architecture/20210805180834.png"></p><p><strong>实际中集中式应用更多</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%86%E7%89%87%E6%9E%B6%E6%9E%84%E5%92%8C%E5%88%86%E5%8C%BA%E6%9E%B6%E6%9E%84.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十八）</title>
      <link href="/2021/08/05/architecture/architecture-18/"/>
      <url>/2021/08/05/architecture/architecture-18/</url>
      
        <content type="html"><![CDATA[<h2 id="存储架构模式之复制架构"><a href="#存储架构模式之复制架构" class="headerlink" title="存储架构模式之复制架构"></a>存储架构模式之复制架构</h2><h3 id="存储类问题处理框架图"><a href="#存储类问题处理框架图" class="headerlink" title="存储类问题处理框架图"></a>存储类问题处理框架图</h3><p><img src="/medias/assets/architecture/20210805145233.png"></p><h3 id="高可用存储核心指标"><a href="#高可用存储核心指标" class="headerlink" title="高可用存储核心指标"></a>高可用存储核心指标</h3><p><img src="/medias/assets/architecture/20210805145704.png"></p><p><strong>高可用计算不涉及RPO</strong></p><h3 id="主备-amp-主从架构"><a href="#主备-amp-主从架构" class="headerlink" title="主备&amp;主从架构"></a>主备&amp;主从架构</h3><h4 id="主备-amp-主从复制"><a href="#主备-amp-主从复制" class="headerlink" title="主备&amp;主从复制"></a>主备&amp;主从复制</h4><p><img src="/medias/assets/architecture/20210805150124.png"></p><h4 id="主备级联复制"><a href="#主备级联复制" class="headerlink" title="主备级联复制"></a>主备级联复制</h4><p><img src="/medias/assets/architecture/20210805150251.png"></p><h4 id="主备架构的灾备部署"><a href="#主备架构的灾备部署" class="headerlink" title="主备架构的灾备部署"></a>主备架构的灾备部署</h4><p><img src="/medias/assets/architecture/20210805150444.png"></p><h4 id="主从架构的灾备部署"><a href="#主从架构的灾备部署" class="headerlink" title="主从架构的灾备部署"></a>主从架构的灾备部署</h4><p><img src="/medias/assets/architecture/20210805150534.png"></p><h4 id="双机切换架构——主备切换"><a href="#双机切换架构——主备切换" class="headerlink" title="双机切换架构——主备切换"></a>双机切换架构——主备切换</h4><p><img src="/medias/assets/architecture/20210805151552.png"></p><h4 id="双机切换架构——主从切换"><a href="#双机切换架构——主从切换" class="headerlink" title="双机切换架构——主从切换"></a>双机切换架构——主从切换</h4><p><img src="/medias/assets/architecture/20210805151832.png"></p><h4 id="集群选举"><a href="#集群选举" class="headerlink" title="集群选举"></a>集群选举</h4><p><img src="/medias/assets/architecture/20210805152239.png"></p><p>案例</p><p><img src="/medias/assets/architecture/20210805153058.png"></p><p><img src="/medias/assets/architecture/20210805160507.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%8D%E5%88%B6%E6%9E%B6%E6%9E%84.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十七）</title>
      <link href="/2021/08/05/architecture/architecture-17/"/>
      <url>/2021/08/05/architecture/architecture-17/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库存储架构"><a href="#数据库存储架构" class="headerlink" title="数据库存储架构"></a>数据库存储架构</h2><h3 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h3><p><img src="/medias/assets/architecture/20210805103555.png"></p><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><p><img src="/medias/assets/architecture/20210805103751.png"></p><h4 id="复制延迟应对之道"><a href="#复制延迟应对之道" class="headerlink" title="复制延迟应对之道"></a>复制延迟应对之道</h4><p><img src="/medias/assets/architecture/20210805104014.png"></p><h4 id="任务分解应对之道"><a href="#任务分解应对之道" class="headerlink" title="任务分解应对之道"></a>任务分解应对之道</h4><p><img src="/medias/assets/architecture/20210805104220.png"></p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>单机写入性能有限</li><li>单机存储容量有限</li></ul><h3 id="数据库分库分表"><a href="#数据库分库分表" class="headerlink" title="数据库分库分表"></a>数据库分库分表</h3><h4 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h4><p><img src="/medias/assets/architecture/20210805105916.png"></p><h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><p><img src="/medias/assets/architecture/20210805110243.png"></p><h4 id="复杂度和应对之道"><a href="#复杂度和应对之道" class="headerlink" title="复杂度和应对之道"></a>复杂度和应对之道</h4><p><img src="/medias/assets/architecture/20210805110538.png"></p><h4 id="伸缩瓶颈"><a href="#伸缩瓶颈" class="headerlink" title="伸缩瓶颈"></a>伸缩瓶颈</h4><p><img src="/medias/assets/architecture/20210805110714.png"></p><h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4><h5 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h5><p><img src="/medias/assets/architecture/20210805110952.png"></p><p>样例</p><p><img src="/medias/assets/architecture/20210805111504.png"></p><h5 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h5><p><img src="/medias/assets/architecture/20210805111314.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E6%9E%B6%E6%9E%84.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二十一）</title>
      <link href="/2021/08/05/architecture/architecture-21/"/>
      <url>/2021/08/05/architecture/architecture-21/</url>
      
        <content type="html"><![CDATA[<h2 id="常见存储系统剖析"><a href="#常见存储系统剖析" class="headerlink" title="常见存储系统剖析"></a>常见存储系统剖析</h2><h3 id="如何学习存储系统"><a href="#如何学习存储系统" class="headerlink" title="如何学习存储系统"></a>如何学习存储系统</h3><h4 id="学习步骤"><a href="#学习步骤" class="headerlink" title="学习步骤"></a>学习步骤</h4><p><img src="/medias/assets/architecture/20210806111832.png"></p><h3 id="常见存储系统剖析-1"><a href="#常见存储系统剖析-1" class="headerlink" title="常见存储系统剖析"></a>常见存储系统剖析</h3><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p><img src="/medias/assets/architecture/20210806112308.png"></p><p><img src="/medias/assets/architecture/20210806112439.png"></p><p><img src="/medias/assets/architecture/20210806112608.png"></p><p><img src="/medias/assets/architecture/20210806112734.png"></p><h4 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h4><p><img src="/medias/assets/architecture/20210806113003.png"></p><p><img src="/medias/assets/architecture/20210806113037.png"></p><p><img src="/medias/assets/architecture/20210806113111.png"></p><p><img src="/medias/assets/architecture/20210806113248.png"></p><p><img src="/medias/assets/architecture/20210806113338.png"></p><h4 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h4><p><img src="/medias/assets/architecture/20210806113508.png"></p><p><img src="/medias/assets/architecture/20210806113550.png"></p><p><img src="/medias/assets/architecture/20210806113630.png"></p><h4 id="ClickHouse"><a href="#ClickHouse" class="headerlink" title="ClickHouse"></a>ClickHouse</h4><p><img src="/medias/assets/architecture/20210806113803.png"></p><p><img src="/medias/assets/architecture/20210806113843.png"></p><p><img src="/medias/assets/architecture/20210806113927.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%B8%B8%E8%A7%81%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F%E5%89%96%E6%9E%90.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2021/08/05/design-pattern/design-pattern-proxy/"/>
      <url>/2021/08/05/design-pattern/design-pattern-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在不改变原始类代码情况下，通过引入代理类来给原始类附加功能</p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p><img src="/medias/assets/design-pattern/20210805093311.png"></p><ul><li>Subject：定义 RealSubject 和 Proxy 角色都应该实现的接口</li><li>Real Subject：原始类，真正完成业务服务功能</li><li>Proxy：代理类，将自身的请求用Real Subject对应的功能来实现，代理类对象并不真正的去实现其业务功能</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>业务系统的非功能性需求开发，比如监控、统计、鉴权、限流、事务、幂等、日志……</li><li>RPC</li><li>缓存</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>必须实现接口</li><li>每个原始类都要创建一个对应的代理类，类数量爆炸。且每个代理类中的代码有点像模板式代码，增加了维护成本和开发成本</li><li>接口一旦增加新方法，原始类和代理类都得修改，不符合开闭原则</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>动态代理是在运行时动态生成类字节码，并加载到 JVM中，生成Class对象</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>动态代理更加灵活，不需要必须实现接口。既可代理接口也可直接代理原始类</li><li>不用每个原始类都创建一个对应的代理类，减少了开发和维护成本</li><li>接口新增方法，代理类不用修改，符合开闭原则</li></ul><h4 id="字节码生成框架"><a href="#字节码生成框架" class="headerlink" title="字节码生成框架"></a>字节码生成框架</h4><ul><li>ASM</li><li>CGLIB</li><li>Javassist</li></ul><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><h4 id="角色-1"><a href="#角色-1" class="headerlink" title="角色"></a>角色</h4><p><img src="/medias/assets/design-pattern/20210805094841.png"></p><ul><li>Subject</li><li>Real Subject</li><li>InvocationHandler：创建一个处理类并实现 InvocationHandler 接口，将原始类注入处理类，重写其 invoke 方法，在 invoke 方法中利用反射机制调用原始类的方法，并自定义一些处理逻辑</li><li>Proxy</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>只能代理接口的实现类，且只能代理接口中的方法，原始类的其它方法不能代理</p><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><h4 id="角色-2"><a href="#角色-2" class="headerlink" title="角色"></a>角色</h4><p><img src="/medias/assets/design-pattern/20210805100845.png"></p><ul><li>Subject</li><li>Real Subject</li><li>MethodInterceptor：创建一个方法拦截器实现MethodInterceptor接口，并重写 intercept 方法，intercept用于拦截并增强原始类的方法</li><li>Proxy</li></ul><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>一个UserMapper接口是提供对用户数据的增删查改功能，现在要统计增删查改的执行次数，典型的代理模式使用场景</p><h4 id="共用代码"><a href="#共用代码" class="headerlink" title="共用代码"></a>共用代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>metric</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrudMetric</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> insertCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> updateCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> deleteCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> selectCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increaseInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        insertCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increaseUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        updateCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increaseDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        deleteCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">increaseSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selectCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">metric</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------metric-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert count : "</span> <span class="token operator">+</span> insertCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update count : "</span> <span class="token operator">+</span> updateCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete count : "</span> <span class="token operator">+</span> deleteCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"select count : "</span> <span class="token operator">+</span> selectCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------metric-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        insertCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        updateCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deleteCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selectCount<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态代理方式实现"><a href="#静态代理方式实现" class="headerlink" title="静态代理方式实现"></a>静态代理方式实现</h4><p>Subject</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Real Subject</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapper</span> <span class="token keyword">implements</span> <span class="token class-name">IUserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"insert : "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update : "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maps<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete id : "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"select id : "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"select all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>maps<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Proxy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>staticproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span></span><span class="token class-name">IUserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>metric<span class="token punctuation">.</span></span><span class="token class-name">CrudMetric</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IUserMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserMapperProxy</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper <span class="token operator">=</span> userMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>staticproxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>metric<span class="token punctuation">.</span></span><span class="token class-name">CrudMetric</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserMapperProxy</span> userMapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserMapperProxy</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"sky"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapperProxy<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"人皇sky"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapperProxy<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapperProxy<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapperProxy<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapperProxy<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">metric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">insert : User{name='sky', age=18}update : User{name='人皇sky', age=18}select id : 1select alldelete id : 1----------------metric-------------------insert count : 1update count : 1delete count : 1select count : 2----------------metric-------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JDK动态代理实现方式"><a href="#JDK动态代理实现方式" class="headerlink" title="JDK动态代理实现方式"></a>JDK动态代理实现方式</h4><p>InvocationHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>dynamicproxy<span class="token punctuation">.</span>jdk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>metric<span class="token punctuation">.</span></span><span class="token class-name">CrudMetric</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperInvocationHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">T</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MapperInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">T</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"insert"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建工厂</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>dynamicproxy<span class="token punctuation">.</span>jdk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkMapperProxyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">T</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MapperInvocationHandler</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>dynamicproxy<span class="token punctuation">.</span>jdk</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span></span><span class="token class-name">IUserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>metric<span class="token punctuation">.</span></span><span class="token class-name">CrudMetric</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">IUserMapper</span> userMapper <span class="token operator">=</span> <span class="token class-name">JdkMapperProxyFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"sky"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"人皇sky"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">metric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">insert : User{name='sky', age=18}update : User{name='人皇sky', age=18}select id : 1select alldelete id : 1----------------metric-------------------insert count : 1update count : 1delete count : 1select count : 2----------------metric-------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CGLIB动态代理实现方式"><a href="#CGLIB动态代理实现方式" class="headerlink" title="CGLIB动态代理实现方式"></a>CGLIB动态代理实现方式</h4><p>MethodInterceptor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>dynamicproxy<span class="token punctuation">.</span>cglib</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>metric<span class="token punctuation">.</span></span><span class="token class-name">CrudMetric</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"insert"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">increaseSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建工厂</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>dynamicproxy<span class="token punctuation">.</span>cglib</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CGLIBMapperProxyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapperInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>dynamicproxy<span class="token punctuation">.</span>cglib</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span></span><span class="token class-name">InnerUserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>metric<span class="token punctuation">.</span></span><span class="token class-name">CrudMetric</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CGLIBMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InnerUserMapper</span> innerUserMapper <span class="token operator">=</span> <span class="token class-name">CGLIBMapperProxyFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">InnerUserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"sky"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerUserMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"人皇sky"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerUserMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        innerUserMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerUserMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerUserMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">metric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserMapper</span> userMapper <span class="token operator">=</span> <span class="token class-name">CGLIBMapperProxyFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"sky"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CrudMetric</span><span class="token punctuation">.</span><span class="token function">metric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">insert : User{name='sky', age=18}update : User{name='人皇sky', age=18}select id : 1select alldelete id : 1----------------metric-------------------insert count : 1update count : 1delete count : 1select count : 2----------------metric-------------------*****************************************insert : User{name='人皇sky', age=18}update : User{name='sky', age=18}select id : 1select alldelete id : 1----------------metric-------------------insert count : 1update count : 1delete count : 1select count : 2----------------metric-------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/design-pattern/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png"></p>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十六）</title>
      <link href="/2021/07/22/architecture/architecture-16/"/>
      <url>/2021/07/22/architecture/architecture-16/</url>
      
        <content type="html"><![CDATA[<h2 id="架构设计后期"><a href="#架构设计后期" class="headerlink" title="架构设计后期"></a>架构设计后期</h2><h3 id="输出详细架构设计文档"><a href="#输出详细架构设计文档" class="headerlink" title="输出详细架构设计文档"></a>输出详细架构设计文档</h3><p><img src="/medias/assets/architecture/20210722085640.png"></p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><img src="/medias/assets/architecture/20210722085724.png"></p><p><img src="/medias/assets/architecture/20210722085854.png"></p><h3 id="详细架构设计文档结构"><a href="#详细架构设计文档结构" class="headerlink" title="详细架构设计文档结构"></a>详细架构设计文档结构</h3><p><img src="/medias/assets/architecture/20210722090141.png"></p><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><h5 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h5><ol><li>解决什么问题</li><li>带来什么价值</li><li>达成什么目标</li><li>完成什么任务</li><li>处于什么地位</li></ol><h6 id="典型案例"><a href="#典型案例" class="headerlink" title="典型案例"></a>典型案例</h6><ol><li>推荐系统：实现千人千面</li><li>消息队列：解耦服务间依赖</li><li>XX系统重构：提升团队开发效率</li><li>XX买菜：从0到1构建业务系统</li></ol><h6 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h6><p>系统边界黑盒图描述系统定位（Rank和业务背景）</p><h6 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h6><p><img src="/medias/assets/architecture/20210722102628.png"></p><h5 id="约束-amp-限制"><a href="#约束-amp-限制" class="headerlink" title="约束&amp;限制"></a>约束&amp;限制</h5><ol><li>成本</li><li>时间</li><li>技术</li><li>质量</li></ol><h6 id="典型案例-1"><a href="#典型案例-1" class="headerlink" title="典型案例"></a>典型案例</h6><ol><li>必须在2021-08-01前完成</li><li>完成成本不能超过1000万</li><li>数据必须采用Oracle</li><li>质量标准符合 ISO9001-XXXX 标准</li></ol><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><h5 id="总体架构设计"><a href="#总体架构设计" class="headerlink" title="总体架构设计"></a>总体架构设计</h5><ol><li>Rank</li><li>Role</li><li>Relation</li></ol><h6 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h6><ol><li>来源于备选架构设计文档</li><li>用系统边界白盒图来展示Rank</li><li>用系统架构图来展示Role和Relation</li></ol><h6 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h6><p><img src="/medias/assets/architecture/20210722103200.png"></p><h5 id="详细架构设计"><a href="#详细架构设计" class="headerlink" title="详细架构设计"></a>详细架构设计</h5><ol><li>Rule</li><li>架构规范</li></ol><h6 id="详细说明-1"><a href="#详细说明-1" class="headerlink" title="详细说明"></a>详细说明</h6><ol><li>结合备选架构的Rule和架构规范</li><li>用系统序列图来展示Rule</li></ol><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><h5 id="架构质量设计"><a href="#架构质量设计" class="headerlink" title="架构质量设计"></a>架构质量设计</h5><ol><li>可测试性设计</li><li>可维护性设计</li><li>可运维性设计</li><li>安全/成本设计</li><li>可观测性设计</li></ol><h6 id="详细说明-2"><a href="#详细说明-2" class="headerlink" title="详细说明"></a>详细说明</h6><ol><li>可能会增加新的Role，例如管理后台</li><li>不要面面俱到，看实际需要</li></ol><h5 id="架构演进规划"><a href="#架构演进规划" class="headerlink" title="架构演进规划"></a>架构演进规划</h5><p>架构分期落地规划</p><h6 id="详细说明-3"><a href="#详细说明-3" class="headerlink" title="详细说明"></a>详细说明</h6><p>主要为了设定项目计划</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%90%8E%E6%9C%9F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十五）</title>
      <link href="/2021/07/21/architecture/architecture-15/"/>
      <url>/2021/07/21/architecture/architecture-15/</url>
      
        <content type="html"><![CDATA[<h2 id="架构设计中期"><a href="#架构设计中期" class="headerlink" title="架构设计中期"></a>架构设计中期</h2><h3 id="设计备选架构"><a href="#设计备选架构" class="headerlink" title="设计备选架构"></a>设计备选架构</h3><h4 id="错误思维"><a href="#错误思维" class="headerlink" title="错误思维"></a>错误思维</h4><ol><li>用最牛的：直接照搬业界最牛的公司的架构，或者用最牛的技术</li><li>用最热的：采用最近很火热的技术，例如中台</li><li>用最熟的：自己以前熟悉什么就用什么，例如 MySQL 搞定一切存储</li></ol><h4 id="备选架构"><a href="#备选架构" class="headerlink" title="备选架构"></a>备选架构</h4><p><img src="/medias/assets/architecture/20210721164803.png"></p><h4 id="备选架构设计过程"><a href="#备选架构设计过程" class="headerlink" title="备选架构设计过程"></a>备选架构设计过程</h4><p><img src="/medias/assets/architecture/20210721165018.png"></p><h4 id="备选架构设计技巧"><a href="#备选架构设计技巧" class="headerlink" title="备选架构设计技巧"></a>备选架构设计技巧</h4><p><img src="/medias/assets/architecture/20210721165359.png"></p><h5 id="备选方案常见困难和应对技巧"><a href="#备选方案常见困难和应对技巧" class="headerlink" title="备选方案常见困难和应对技巧"></a>备选方案常见困难和应对技巧</h5><p><img src="/medias/assets/architecture/20210721165528.png"></p><p><img src="/medias/assets/architecture/20210721165727.png"></p><h3 id="评估备选方案"><a href="#评估备选方案" class="headerlink" title="评估备选方案"></a>评估备选方案</h3><h4 id="错误的方法"><a href="#错误的方法" class="headerlink" title="错误的方法"></a>错误的方法</h4><p><img src="/medias/assets/architecture/20210721165846.png"></p><h4 id="正确的方法"><a href="#正确的方法" class="headerlink" title="正确的方法"></a>正确的方法</h4><p><img src="/medias/assets/architecture/20210721165951.png"></p><h4 id="360度环评样例"><a href="#360度环评样例" class="headerlink" title="360度环评样例"></a>360度环评样例</h4><p><img src="/medias/assets/architecture/20210721170250.png"></p><h4 id="维度排序样例"><a href="#维度排序样例" class="headerlink" title="维度排序样例"></a>维度排序样例</h4><p><img src="/medias/assets/architecture/20210721170422.png"></p><h4 id="常见架构评估维度和注意事项"><a href="#常见架构评估维度和注意事项" class="headerlink" title="常见架构评估维度和注意事项"></a>常见架构评估维度和注意事项</h4><p><img src="/medias/assets/architecture/20210721171141.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%AD%E6%9C%9F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十四）</title>
      <link href="/2021/07/20/architecture/architecture-14/"/>
      <url>/2021/07/20/architecture/architecture-14/</url>
      
        <content type="html"><![CDATA[<h2 id="架构设计前期"><a href="#架构设计前期" class="headerlink" title="架构设计前期"></a>架构设计前期</h2><h3 id="利益干系人"><a href="#利益干系人" class="headerlink" title="利益干系人"></a>利益干系人</h3><p><img src="/medias/assets/architecture/20210721083954.png"></p><h4 id="投资人"><a href="#投资人" class="headerlink" title="投资人"></a>投资人</h4><h5 id="内部投资人"><a href="#内部投资人" class="headerlink" title="内部投资人"></a>内部投资人</h5><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><p>俗称“老板”，指决定投入人力物力财力开发系统的管理者</p><h6 id="诉求"><a href="#诉求" class="headerlink" title="诉求"></a>诉求</h6><ol><li>成本</li><li>时间</li><li>竞争力</li></ol><h6 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h6><ol><li>你的直接上级</li><li>业务负责人</li></ol><h5 id="外部投资人"><a href="#外部投资人" class="headerlink" title="外部投资人"></a>外部投资人</h5><h6 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h6><p>也称“老板”，决定购买系统的金主，适应于B2B领域</p><h6 id="诉求-1"><a href="#诉求-1" class="headerlink" title="诉求"></a>诉求</h6><ol><li>价格</li><li>时间</li><li>竞争力</li></ol><h6 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h6><ol><li>张老板</li><li>王老板</li></ol><h4 id="监管者"><a href="#监管者" class="headerlink" title="监管者"></a>监管者</h4><h5 id="政府监管者"><a href="#政府监管者" class="headerlink" title="政府监管者"></a>政府监管者</h5><h6 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h6><p>按照法规法律对系统进行监管的政府组织</p><h6 id="诉求-2"><a href="#诉求-2" class="headerlink" title="诉求"></a>诉求</h6><ol><li>合规</li><li>处理投诉</li></ol><h6 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h6><ol><li>消费委</li><li>银监会</li></ol><h5 id="媒体监管者"><a href="#媒体监管者" class="headerlink" title="媒体监管者"></a>媒体监管者</h5><h6 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h6><p>对系统相关事件进行广泛报道的媒体</p><h6 id="诉求-3"><a href="#诉求-3" class="headerlink" title="诉求"></a>诉求</h6><ol><li>消息披露</li><li>事件回应</li></ol><h6 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h6><ol><li>315晚会</li><li>焦点访谈</li></ol><h4 id="构建者"><a href="#构建者" class="headerlink" title="构建者"></a>构建者</h4><h6 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h6><p>负责构建系统的人员</p><h6 id="诉求-4"><a href="#诉求-4" class="headerlink" title="诉求"></a>诉求</h6><ol><li>技术</li><li>复杂度</li><li>时间</li></ol><h6 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h6><ol><li>开发团队</li><li>施工团队</li><li>生产商/供应商</li></ol><h4 id="维护者"><a href="#维护者" class="headerlink" title="维护者"></a>维护者</h4><h6 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h6><p>负责维护系统的人员或其他系统</p><h5 id="诉求-5"><a href="#诉求-5" class="headerlink" title="诉求"></a>诉求</h5><ol><li>可维护性</li><li>高可用</li></ol><h6 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h6><ol><li>运维团队</li><li>IT部门</li><li>IT系统</li></ol><h4 id="使用者"><a href="#使用者" class="headerlink" title="使用者"></a>使用者</h4><h6 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h6><p>使用系统完成业务功能的人员或者其它系统</p><h6 id="诉求-6"><a href="#诉求-6" class="headerlink" title="诉求"></a>诉求</h6><ol><li>易用性</li><li>高可用</li></ol><h6 id="举例-6"><a href="#举例-6" class="headerlink" title="举例"></a>举例</h6><ol><li>用户</li><li>下游系统</li></ol><h4 id="评估者"><a href="#评估者" class="headerlink" title="评估者"></a>评估者</h4><h6 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h6><p>对系统进行评估的人员或者其它系统</p><h6 id="诉求-7"><a href="#诉求-7" class="headerlink" title="诉求"></a>诉求</h6><ol><li>可测试性</li><li>可观测性</li></ol><h6 id="举例-7"><a href="#举例-7" class="headerlink" title="举例"></a>举例</h6><ol><li>评测团队/测试团队</li><li>运维监控系统</li></ol><h3 id="诉求优先级排序"><a href="#诉求优先级排序" class="headerlink" title="诉求优先级排序"></a>诉求优先级排序</h3><h4 id="诉利益干系人诉求处理流程"><a href="#诉利益干系人诉求处理流程" class="headerlink" title="诉利益干系人诉求处理流程"></a>诉利益干系人诉求处理流程</h4><p><img src="/medias/assets/architecture/20210721103644.png"></p><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><p><img src="/medias/assets/architecture/20210721103849.png"></p><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p><img src="/medias/assets/architecture/20210721104003.png"></p><p>原则：</p><ol><li>取舍原则：无法做到面面俱到，需要根据业务目标决定哪个优先</li><li>影响力原则： 按照影响力大小排序：监管者-&gt;投资者-&gt;评估者-&gt;使用者-&gt;构建者-&gt;维护者</li></ol><h5 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h5><p><img src="/medias/assets/architecture/20210721104325.png"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><img src="/medias/assets/architecture/20210721104424.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%89%8D%E6%9C%9F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十三）</title>
      <link href="/2021/07/20/architecture/architecture-13/"/>
      <url>/2021/07/20/architecture/architecture-13/</url>
      
        <content type="html"><![CDATA[<h2 id="架构师核心能力和主要职责"><a href="#架构师核心能力和主要职责" class="headerlink" title="架构师核心能力和主要职责"></a>架构师核心能力和主要职责</h2><h3 id="核心能力"><a href="#核心能力" class="headerlink" title="核心能力"></a>核心能力</h3><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><ol><li>业务理解能力</li><li>技术能力</li><li>沟通能力</li></ol><h4 id="拆解"><a href="#拆解" class="headerlink" title="拆解"></a>拆解</h4><ol><li>技术深度</li><li>技术宽度</li><li>技术广度</li></ol><h4 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h4><ol><li>设计理念</li><li>说服能力</li><li>决断能力</li></ol><h3 id="核心思维"><a href="#核心思维" class="headerlink" title="核心思维"></a>核心思维</h3><ol><li>确定性思维：消除模糊、不确定的说法和信息，列入“大量用户”应该明确为“XX万用户”</li><li>创造性思维：通过排列组合创新，得到更多方案</li><li>系统性思维：系统思考，有逻辑和推导过程，例如“为什么不用Native而要用H5”</li></ol><h3 id="架构设计流程"><a href="#架构设计流程" class="headerlink" title="架构设计流程"></a>架构设计流程</h3><p><img src="/medias/assets/architecture/20210720100443.png"></p><p><img src="/medias/assets/architecture/20210720100945.png"></p><h3 id="主要职责"><a href="#主要职责" class="headerlink" title="主要职责"></a>主要职责</h3><h4 id="架构设计前期"><a href="#架构设计前期" class="headerlink" title="架构设计前期"></a>架构设计前期</h4><h5 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h5><h6 id="澄清不确定性"><a href="#澄清不确定性" class="headerlink" title="澄清不确定性"></a>澄清不确定性</h6><ol><li>明确利益干系人的诉求</li><li>消除冲突的诉求</li><li>诉求优先级排序</li></ol><h6 id="识别复杂度"><a href="#识别复杂度" class="headerlink" title="识别复杂度"></a>识别复杂度</h6><ol><li>识别核心场景</li><li>明确或者预估质量需求</li><li>识别复杂度</li></ol><h5 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h5><ol><li>与业务方交流</li><li>与利益干系人交流</li></ol><h5 id="关键输出"><a href="#关键输出" class="headerlink" title="关键输出"></a>关键输出</h5><ol><li>总体业务架构图</li><li>核心场景流程</li></ol><h4 id="架构设计中期"><a href="#架构设计中期" class="headerlink" title="架构设计中期"></a>架构设计中期</h4><h5 id="主要任务-1"><a href="#主要任务-1" class="headerlink" title="主要任务"></a>主要任务</h5><h6 id="设计备选方案"><a href="#设计备选方案" class="headerlink" title="设计备选方案"></a>设计备选方案</h6><ol><li><p>头脑风暴</p></li><li><p>筛选方案</p></li><li><p>设计备选方案</p></li></ol><h6 id="选择备选方案"><a href="#选择备选方案" class="headerlink" title="选择备选方案"></a>选择备选方案</h6><ol><li>360度评估</li><li>明确选择标准</li><li>选择最终方案并汇报</li></ol><h5 id="工作模式-1"><a href="#工作模式-1" class="headerlink" title="工作模式"></a>工作模式</h5><ol><li>架构小组讨论</li><li>架构小组写文档</li><li>向利益干系人汇报</li></ol><h5 id="关键输出-1"><a href="#关键输出-1" class="headerlink" title="关键输出"></a>关键输出</h5><ol><li>备选方案</li><li>方案评估结论</li><li>方案汇报结论</li></ol><h4 id="架构设计后期"><a href="#架构设计后期" class="headerlink" title="架构设计后期"></a>架构设计后期</h4><h5 id="主要任务-2"><a href="#主要任务-2" class="headerlink" title="主要任务"></a>主要任务</h5><h6 id="细化架构"><a href="#细化架构" class="headerlink" title="细化架构"></a>细化架构</h6><ol><li>按照4R架构定义细化架构</li></ol><h6 id="完善架构"><a href="#完善架构" class="headerlink" title="完善架构"></a>完善架构</h6><ol><li>可维护性、可测试性、可观测性、可运维性、成本、安全</li></ol><h5 id="工作模式-2"><a href="#工作模式-2" class="headerlink" title="工作模式"></a>工作模式</h5><ol><li>写架构设计文档</li><li>给技术团队宣讲架构</li></ol><h5 id="关键输出-2"><a href="#关键输出-2" class="headerlink" title="关键输出"></a>关键输出</h5><ol><li>完整的架构设计方案</li></ol><h4 id="架构验证阶段"><a href="#架构验证阶段" class="headerlink" title="架构验证阶段"></a>架构验证阶段</h4><h5 id="主要任务-3"><a href="#主要任务-3" class="headerlink" title="主要任务"></a>主要任务</h5><h6 id="收集架构意见"><a href="#收集架构意见" class="headerlink" title="收集架构意见"></a>收集架构意见</h6><ol><li>开发人员意见</li><li>运维人员意见</li><li>测试人员意见</li></ol><h6 id="跟进架构落地效果"><a href="#跟进架构落地效果" class="headerlink" title="跟进架构落地效果"></a>跟进架构落地效果</h6><ol><li>性能测试结果</li><li>压力测试结果</li><li>线上运维情况</li></ol><h5 id="工作模式-3"><a href="#工作模式-3" class="headerlink" title="工作模式"></a>工作模式</h5><ol><li>总结复盘</li><li>收集吐槽</li></ol><h5 id="关键输出-3"><a href="#关键输出-3" class="headerlink" title="关键输出"></a>关键输出</h5><ol><li>架构优化建议</li><li>架构迭代计划</li></ol><h3 id="架构设计和方案设计区别"><a href="#架构设计和方案设计区别" class="headerlink" title="架构设计和方案设计区别"></a>架构设计和方案设计区别</h3><p>架构设计是影响系统结构的设计，而方案设计是不影响系统结构的设计。</p><p>举例：</p><ol><li>Rank：改变系统分层的设计属于架构设计，例如将支付宝提升到和淘宝同级别</li><li>Role：修改（增删改拆合）角色属于架构设计，例如微服务拆分</li><li>Relation：修改角色关系属于架构设计，例如用消息队列代替接口访问</li><li>Rule: 修改角色之间的运作规则属于架构设计，例如 MongoDB 将选举算法从<br>Bully 改为 Raft</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E5%B8%88%E8%81%8C%E8%B4%A3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十二）</title>
      <link href="/2021/07/16/architecture/architecture-12/"/>
      <url>/2021/07/16/architecture/architecture-12/</url>
      
        <content type="html"><![CDATA[<h2 id="香港支付宝钱包高可用架构设计"><a href="#香港支付宝钱包高可用架构设计" class="headerlink" title="香港支付宝钱包高可用架构设计"></a>香港支付宝钱包高可用架构设计</h2><h3 id="容忍度"><a href="#容忍度" class="headerlink" title="容忍度"></a>容忍度</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>用户能够接受业务不可用程度，包括时长和影响</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>不同文化、不同法律、不同用户、不同业务，容忍度差异很大</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol><li>香港的银行对接 AlipayHK，晚上出故障，要第二天9点上班才开始处理</li><li>内部运营系统能够接受不可用时长可以达到2小时</li><li>支付业务能够容忍的时间是分钟级</li><li>游戏业务可以停服更新</li></ol><h3 id="容忍度排序"><a href="#容忍度排序" class="headerlink" title="容忍度排序"></a>容忍度排序</h3><p>生命-&gt;安全-&gt;金钱-&gt;付费-&gt;免费-&gt;内部</p><h3 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h3><p><img src="/medias/assets/architecture/20210716111445.png"></p><h3 id="面向复杂度架构设计步骤"><a href="#面向复杂度架构设计步骤" class="headerlink" title="面向复杂度架构设计步骤"></a>面向复杂度架构设计步骤</h3><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><img src="/medias/assets/architecture/20210716104331.png"></p><p><strong>钱包业务业务复杂度不高，质量复杂度要求高</strong></p><h3 id="分析质量复杂度"><a href="#分析质量复杂度" class="headerlink" title="分析质量复杂度"></a>分析质量复杂度</h3><p><img src="/medias/assets/architecture/20210716115006.png"></p><h3 id="高可用架构设计套路"><a href="#高可用架构设计套路" class="headerlink" title="高可用架构设计套路"></a>高可用架构设计套路</h3><p><img src="/medias/assets/architecture/20210716115353.png"></p><h4 id="余额转账"><a href="#余额转账" class="headerlink" title="余额转账"></a>余额转账</h4><p><img src="/medias/assets/architecture/20210716115509.png"></p><p><img src="/medias/assets/architecture/20210716115713.png"></p><h4 id="银行卡支付"><a href="#银行卡支付" class="headerlink" title="银行卡支付"></a>银行卡支付</h4><p><img src="/medias/assets/architecture/20210716115847.png"></p><p><img src="/medias/assets/architecture/20210716115933.png"></p><p>虽然一致性要求不高，但是都上了OceanBase，那就共用好了，保持架构一致</p><h4 id="运营后台"><a href="#运营后台" class="headerlink" title="运营后台"></a>运营后台</h4><p><img src="/medias/assets/architecture/20210716120103.png"></p><p><img src="/medias/assets/architecture/20210716120128.png"></p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="/medias/assets/architecture/20210716120209.png"></p><p><img src="/medias/assets/architecture/20210716120243.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十一）</title>
      <link href="/2021/07/16/architecture/architecture-11/"/>
      <url>/2021/07/16/architecture/architecture-11/</url>
      
        <content type="html"><![CDATA[<h2 id="微信红包架构设计"><a href="#微信红包架构设计" class="headerlink" title="微信红包架构设计"></a>微信红包架构设计</h2><h3 id="面向复杂度架构设计步骤"><a href="#面向复杂度架构设计步骤" class="headerlink" title="面向复杂度架构设计步骤"></a>面向复杂度架构设计步骤</h3><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><img src="/medias/assets/architecture/20210716104331.png"></p><p><strong>红包业务业务复杂度不高，质量复杂度要求高</strong></p><h3 id="分析质量复杂度"><a href="#分析质量复杂度" class="headerlink" title="分析质量复杂度"></a>分析质量复杂度</h3><p><img src="/medias/assets/architecture/20210716104514.png"></p><p>从描述可看出红包业务性能要求高</p><p><img src="/medias/assets/architecture/20210716104613.png"></p><p>高性能指标估算</p><h3 id="高性能架构设计套路"><a href="#高性能架构设计套路" class="headerlink" title="高性能架构设计套路"></a>高性能架构设计套路</h3><p><img src="/medias/assets/architecture/20210716104902.png"></p><h3 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h3><h4 id="发红包"><a href="#发红包" class="headerlink" title="发红包"></a>发红包</h4><p><img src="/medias/assets/architecture/20210716105007.png"></p><p><img src="/medias/assets/architecture/20210716105103.png"></p><h4 id="抢红包"><a href="#抢红包" class="headerlink" title="抢红包"></a>抢红包</h4><p><img src="/medias/assets/architecture/20210716105248.png"></p><p><img src="/medias/assets/architecture/20210716105319.png"></p><h4 id="看红包"><a href="#看红包" class="headerlink" title="看红包"></a>看红包</h4><p><img src="/medias/assets/architecture/20210716105430.png"></p><p><img src="/medias/assets/architecture/20210716105453.png"></p><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="/medias/assets/architecture/20210716105539.png"></p><p><img src="/medias/assets/architecture/20210716105646.png"></p><h3 id="成本因素影响架构方案"><a href="#成本因素影响架构方案" class="headerlink" title="成本因素影响架构方案"></a>成本因素影响架构方案</h3><p>去掉Redis Cluster，全部用关系型数据库存储</p><p><img src="/medias/assets/architecture/20210716105857.png"></p><h3 id="方案优化"><a href="#方案优化" class="headerlink" title="方案优化"></a>方案优化</h3><p>无锁化提升处理性能</p><p><img src="/medias/assets/architecture/20210716110056.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（十）</title>
      <link href="/2021/07/14/architecture/architecture-10/"/>
      <url>/2021/07/14/architecture/architecture-10/</url>
      
        <content type="html"><![CDATA[<h2 id="如何全面提升架构设计的质量"><a href="#如何全面提升架构设计的质量" class="headerlink" title="如何全面提升架构设计的质量"></a>如何全面提升架构设计的质量</h2><h3 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h3><h4 id="低成本复杂度本质"><a href="#低成本复杂度本质" class="headerlink" title="低成本复杂度本质"></a>低成本复杂度本质</h4><p><img src="/medias/assets/architecture/20210714152754.png"></p><h4 id="低成本手段"><a href="#低成本手段" class="headerlink" title="低成本手段"></a>低成本手段</h4><p><img src="/medias/assets/architecture/20210715102303.png"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p><img src="/medias/assets/architecture/20210716093050.png"></p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h4 id="安全性复杂度本质"><a href="#安全性复杂度本质" class="headerlink" title="安全性复杂度本质"></a>安全性复杂度本质</h4><p><img src="/medias/assets/architecture/20210716093320.png"></p><h4 id="架构安全"><a href="#架构安全" class="headerlink" title="架构安全"></a>架构安全</h4><p><img src="/medias/assets/architecture/20210716093511.png"></p><h4 id="业务安全"><a href="#业务安全" class="headerlink" title="业务安全"></a>业务安全</h4><p><img src="/medias/assets/architecture/20210716093637.png"></p><h3 id="可测试性"><a href="#可测试性" class="headerlink" title="可测试性"></a>可测试性</h3><p><img src="/medias/assets/architecture/20210716094317.png"></p><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><p><img src="/medias/assets/architecture/20210716094528.png"></p><h3 id="可观测性"><a href="#可观测性" class="headerlink" title="可观测性"></a>可观测性</h3><p><img src="/medias/assets/architecture/20210716094609.png"></p><h3 id="设计更好的架构步骤"><a href="#设计更好的架构步骤" class="headerlink" title="设计更好的架构步骤"></a>设计更好的架构步骤</h3><p><img src="/medias/assets/architecture/20210716094743.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/20210716094743.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（九）</title>
      <link href="/2021/07/14/architecture/architecture-09/"/>
      <url>/2021/07/14/architecture/architecture-09/</url>
      
        <content type="html"><![CDATA[<h2 id="如何设计高可用架构"><a href="#如何设计高可用架构" class="headerlink" title="如何设计高可用架构"></a>如何设计高可用架构</h2><h3 id="高可用复杂度模型"><a href="#高可用复杂度模型" class="headerlink" title="高可用复杂度模型"></a>高可用复杂度模型</h3><p><img src="/medias/assets/architecture/20210714081548.png"></p><h3 id="计算高可用"><a href="#计算高可用" class="headerlink" title="计算高可用"></a>计算高可用</h3><h4 id="任务分配"><a href="#任务分配" class="headerlink" title="任务分配"></a>任务分配</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>将任务分给不同的服务器执行</p><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ol><li>增加“任务分配器”节点，可以是独立的服务器，也可以是 SDK</li><li>任务分配器需要管理所有的服务器，可以通过配置文件，也可以通过配置服务器（例如 ZooKeeper）</li><li>任务分配器需要根据不同的需求采用不同的算法分配</li><li>任务分配器需要监控业务服务器的状态，在故障时进行切换</li></ol><p><strong>高性能任务分配考虑的是正常处理，高可用任务分配考虑的是异常处理</strong></p><h5 id="设计关键点"><a href="#设计关键点" class="headerlink" title="设计关键点"></a>设计关键点</h5><p><img src="/medias/assets/architecture/20210714082257.png"></p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p><img src="/medias/assets/architecture/20210714082520.png"></p><h4 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>将服务器拆分为不同的角色，不同服务器处理不同业务</p><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ol><li>增加“任务分解器”节点，可以是独立的服务器，也可以是 SDK</li><li>任务分解器需要管理所有的服务器，可以通过配置文件，也可以通过配置服务器（例如 ZooKeeper）</li><li>任务分解器需要根据不同的需求采用不同的算法分配</li><li>任务分解器需要监控业务服务器的状态，在故障时进行切换</li><li>需要设计拆分任务的方式，任务分解器需要记录“任务”和“服务器”的映射关系</li></ol><h5 id="设计关键点-1"><a href="#设计关键点-1" class="headerlink" title="设计关键点"></a>设计关键点</h5><p><img src="/medias/assets/architecture/20210714082746.png"></p><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p><img src="/medias/assets/architecture/20210714082826.png"></p><h3 id="存储高可用"><a href="#存储高可用" class="headerlink" title="存储高可用"></a>存储高可用</h3><h4 id="复杂度模型"><a href="#复杂度模型" class="headerlink" title="复杂度模型"></a>复杂度模型</h4><p><img src="/medias/assets/architecture/20210714083039.png"></p><h4 id="数据复制"><a href="#数据复制" class="headerlink" title="数据复制"></a>数据复制</h4><h5 id="数据复制格式"><a href="#数据复制格式" class="headerlink" title="数据复制格式"></a>数据复制格式</h5><p><img src="/medias/assets/architecture/20210714083545.png"></p><h5 id="数据复制方式"><a href="#数据复制方式" class="headerlink" title="数据复制方式"></a>数据复制方式</h5><p><img src="/medias/assets/architecture/20210714083814.png"></p><p><img src="/medias/assets/architecture/20210714083900.png"></p><h5 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h5><p><img src="/medias/assets/architecture/20210714084125.png"></p><h4 id="状态决策"><a href="#状态决策" class="headerlink" title="状态决策"></a>状态决策</h4><h5 id="独裁式"><a href="#独裁式" class="headerlink" title="独裁式"></a>独裁式</h5><p><img src="/medias/assets/architecture/20210714085358.png"></p><h5 id="协商式"><a href="#协商式" class="headerlink" title="协商式"></a>协商式</h5><p><img src="/medias/assets/architecture/20210714085534.png"></p><h5 id="民主式-选举式"><a href="#民主式-选举式" class="headerlink" title="民主式/选举式"></a>民主式/选举式</h5><p><img src="/medias/assets/architecture/20210714085701.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（八）</title>
      <link href="/2021/07/12/architecture/architecture-08/"/>
      <url>/2021/07/12/architecture/architecture-08/</url>
      
        <content type="html"><![CDATA[<h2 id="如何设计高性能架构"><a href="#如何设计高性能架构" class="headerlink" title="如何设计高性能架构"></a>如何设计高性能架构</h2><h3 id="高性能架构复杂度模型"><a href="#高性能架构复杂度模型" class="headerlink" title="高性能架构复杂度模型"></a>高性能架构复杂度模型</h3><p><img src="/medias/assets/architecture/20210712085012.png"></p><h3 id="高性能架构复杂度模型分析"><a href="#高性能架构复杂度模型分析" class="headerlink" title="高性能架构复杂度模型分析"></a>高性能架构复杂度模型分析</h3><p><img src="/medias/assets/architecture/20210712085101.png"></p><h3 id="集群高性能架构设计"><a href="#集群高性能架构设计" class="headerlink" title="集群高性能架构设计"></a>集群高性能架构设计</h3><h4 id="指导理论"><a href="#指导理论" class="headerlink" title="指导理论"></a>指导理论</h4><p>鸡蛋篮子理论第二法则——叠加法则</p><p><img src="/medias/assets/architecture/20210712085546.png"></p><h4 id="任务分配"><a href="#任务分配" class="headerlink" title="任务分配"></a>任务分配</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>将任务分配给多个服务器执行</p><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ol><li><p>增加“任务分配器”节点，可以是独立的服务器也可以是SDK</p></li><li><p>任务分配器需要管理所有服务器，可以通过配置文件，也可以通过配置服务器，例如Zookeeper</p></li><li><p>任务分配器需要根据不同的需求采用不同的算法分配</p></li></ol><p><img src="/medias/assets/architecture/20210712091927.png"></p><p><img src="/medias/assets/architecture/20210712092039.png"></p><h5 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h5><p><img src="/medias/assets/architecture/20210712092223.png"></p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><p><img src="/medias/assets/architecture/20210712092705.png"></p><p><img src="/medias/assets/architecture/20210712092812.png"></p><p><img src="/medias/assets/architecture/20210712092906.png"></p><h4 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>将服务器拆分为不同的角色，不同服务器处理不同业务</p><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ol><li>增加“任务分解器”节点，可以是独立的服务器也可以是SDK</li><li>任务分解器需要管理所有服务器，可以通过配置文件，也可以通过配置服务器，例如Zookeeper</li><li>需要设计拆分任务的方式，任务分解器需要记录“任务”和“服务器”的映射关系</li><li>任务分解器需要根据不同需求采用不同的算法分配</li></ol><p><img src="/medias/assets/architecture/20210712093533.png"></p><h5 id="关键点-1"><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h5><p><img src="/medias/assets/architecture/20210712093637.png"></p><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><p><img src="/medias/assets/architecture/20210712094216.png"></p><p><img src="/medias/assets/architecture/20210712094256.png"></p><p><img src="/medias/assets/architecture/20210712094359.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（七）</title>
      <link href="/2021/07/10/architecture/architecture-07/"/>
      <url>/2021/07/10/architecture/architecture-07/</url>
      
        <content type="html"><![CDATA[<h2 id="如何设计可扩展架构"><a href="#如何设计可扩展架构" class="headerlink" title="如何设计可扩展架构"></a>如何设计可扩展架构</h2><h3 id="复杂度模型"><a href="#复杂度模型" class="headerlink" title="复杂度模型"></a>复杂度模型</h3><p><img src="/medias/assets/architecture/20210710150101.png"></p><h4 id="业务复杂度"><a href="#业务复杂度" class="headerlink" title="业务复杂度"></a>业务复杂度</h4><p>业务固有的复杂度，主要体现为难以理解，难以扩展，例如业务数量多（微信），业务流程长（支付宝），业务之间关系复杂（例如ERP）</p><h4 id="质量复杂度"><a href="#质量复杂度" class="headerlink" title="质量复杂度"></a>质量复杂度</h4><p>高性能、高可用、成本、安全等质量属性要求</p><h3 id="架构复杂度应对之道"><a href="#架构复杂度应对之道" class="headerlink" title="架构复杂度应对之道"></a>架构复杂度应对之道</h3><p><img src="/medias/assets/architecture/20210710150858.png"></p><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png"></p><h3 id="可扩展（extensibility）"><a href="#可扩展（extensibility）" class="headerlink" title="可扩展（extensibility）"></a>可扩展（extensibility）</h3><p>系统适应变化的能力，包含可理解和可复用两个部分</p><h3 id="可伸缩（scalability）"><a href="#可伸缩（scalability）" class="headerlink" title="可伸缩（scalability）"></a>可伸缩（scalability）</h3><p>系统通过添加更多的资源来提升性能的能力</p><h3 id="可扩展复杂度模型"><a href="#可扩展复杂度模型" class="headerlink" title="可扩展复杂度模型"></a>可扩展复杂度模型</h3><p><img src="/medias/assets/architecture/20210710152734.png"></p><h3 id="可扩展架构设计"><a href="#可扩展架构设计" class="headerlink" title="可扩展架构设计"></a>可扩展架构设计</h3><h4 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h4><h5 id="拆分复杂度模型"><a href="#拆分复杂度模型" class="headerlink" title="拆分复杂度模型"></a>拆分复杂度模型</h5><p><img src="/medias/assets/architecture/20210710153155.png"></p><h5 id="拆分粒度"><a href="#拆分粒度" class="headerlink" title="拆分粒度"></a>拆分粒度</h5><h6 id="内部复杂度"><a href="#内部复杂度" class="headerlink" title="内部复杂度"></a>内部复杂度</h6><p>又称为“单体复杂度”，指单个对象内部的复杂度，例如传统的单体系统，所以业务都在一个系统里面。可以用参与的开发人数来衡量单个拆分对象的复杂度。例如：3个人负责一个子系统/子模块是比较合理的，20个人来在同一个子系统上开发，则内部复杂度过高</p><h6 id="外部复杂度"><a href="#外部复杂度" class="headerlink" title="外部复杂度"></a>外部复杂度</h6><p>又称为“群体复杂度”，指拆分后的多个对象之间的关系复杂度。可以用业务流程涉及对象数量来衡量外部复杂度。例如：一次用户请求需要5个子系统参与比较合理的，如果需要20个子系统参与，则外部复杂度过高。</p><h5 id="拆分原则"><a href="#拆分原则" class="headerlink" title="拆分原则"></a>拆分原则</h5><ol><li>内外平衡原则</li><li>先粗后细原则</li></ol><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h5 id="封装复杂度模型"><a href="#封装复杂度模型" class="headerlink" title="封装复杂度模型"></a>封装复杂度模型</h5><p><img src="/medias/assets/architecture/20210710154359.png"></p><h5 id="预测原则"><a href="#预测原则" class="headerlink" title="预测原则"></a>预测原则</h5><ol><li>2年原则</li></ol><p>只预测2年内的可能变化，不要试图预测10年后的变化。例如你准备接入微信支付，那么预测接入支付宝是很自然的，但数字钱包就没那么必要了</p><ol><li>3次法则</li></ol><p>预测没有把握就不要封装，等到需要的时候重构即可。例如要不要支持数据库为 Oracle、MySQL、PostgreSQL。(Martin Fowler)Rule of three: Three strikes and you refactor （1写2抄3封装）。</p><h5 id="封装技巧"><a href="#封装技巧" class="headerlink" title="封装技巧"></a>封装技巧</h5><p><img src="/medias/assets/architecture/20210710155106.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（六）</title>
      <link href="/2021/07/01/architecture/architecture-06/"/>
      <url>/2021/07/01/architecture/architecture-06/</url>
      
        <content type="html"><![CDATA[<h2 id="学生管理云平台系统架构设计"><a href="#学生管理云平台系统架构设计" class="headerlink" title="学生管理云平台系统架构设计"></a>学生管理云平台系统架构设计</h2><h3 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h3><p>你们是一家创业公司，公司老板具备丰富的高校人脉资源，老板看到各个高校都在重复建设各自的学生管理系统，建设周期长，功能不完善，老板认为做一个学生管理云平台，既能够减少高校这方面的投入，又可以让高校也“上云”。全中国有 3000 多所高校，这是一个很大的市场。</p><h3 id="功能需求"><a href="#功能需求" class="headerlink" title="功能需求"></a>功能需求</h3><p>和外包学生管理系统一样</p><h3 id="平台需求"><a href="#平台需求" class="headerlink" title="平台需求"></a>平台需求</h3><ol><li>云平台要具备高可用、高性能；</li><li>云平台要能够隔离各个高校，避免互相影响。</li></ol><h3 id="面向复杂度架构设计"><a href="#面向复杂度架构设计" class="headerlink" title="面向复杂度架构设计"></a>面向复杂度架构设计</h3><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png"></p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ol><li>高性能？一个学校一般也就几万学生，3000多所高校，用户量5w * 3000 = 1.5亿，亿级。需要高性能。</li><li>高可用？3000多高校，一旦宕机影响太广。为减少相互影响，需要分区、分机房部署来保证高可用。</li><li>可扩展？整体业务复杂度比较高，且高校间肯定有各种不一样的定制需求。需要可扩展。</li><li>成本？老板有丰富的高校人脉资源，有钱又舍得投入，不是问题。</li><li>安全性？学生管理系统里面都是学生的一些公开信息，不涉及什么隐私、金钱等，安全性要求不高。</li><li>其它？各高校之间数据不能相互影响，数据隔离必须保证。</li></ol><h4 id="设计备选方案"><a href="#设计备选方案" class="headerlink" title="设计备选方案"></a>设计备选方案</h4><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p><img src="/medias/assets/architecture/20210701103457.png"></p><ol><li>服务不隔离</li><li>数据隔离，每个学校建立一个独立的数据库</li><li>MySQL主备复制+每日备份保证数据安全</li></ol><h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5><p><img src="/medias/assets/architecture/20210701103723.png"></p><ol><li>docker做服务隔离</li><li>数据隔离，每个学校建立一个独立的数据库</li><li>MySQL主备复制+每日备份保证数据安全</li></ol><h5 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h5><p><img src="/medias/assets/architecture/20210701103859.png"></p><ol><li>服务不隔离</li><li>数据隔离，每个学校建立一个独立的数据库</li><li>双机房部署</li></ol><h5 id="方案4"><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h5><p><img src="/medias/assets/architecture/20210701104035.png"></p><ol><li>docker做服务隔离</li><li>数据隔离，每个学校建立一个独立的数据库</li><li>双机房部署</li></ol><h5 id="判断维度"><a href="#判断维度" class="headerlink" title="判断维度"></a>判断维度</h5><h6 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h6><ol><li>业务当前量级</li><li>业务发展速度</li><li>业务发展形态</li></ol><h6 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h6><ol><li>团队的规模</li><li>团队能力水平</li><li>投入的资源</li></ol><h6 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h6><ol><li>已有的技术体系</li><li>当前技术能力</li><li>技术成熟度</li></ol><p><strong>根据上面三个维度分析判断，最终选择方案1</strong></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><h6 id="合适原则"><a href="#合适原则" class="headerlink" title="合适原则"></a>合适原则</h6><ol><li>符合团队技术水平积累</li><li>开发成本低</li><li>运维成本低</li></ol><h6 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h6><ol><li>服务不隔离，只做数据隔离，单机房部署，开发、运维都相对简单</li></ol><h6 id="演化原则"><a href="#演化原则" class="headerlink" title="演化原则"></a>演化原则</h6><ol><li>不可能一下子接下3000多个高校，先满足几个或者十几个学校的需求，系统短时间内完全够用，后续再重构</li><li>创业公司，先用单机房架构方案，快速开发上线。双机房成本太高、架构也更为复杂，不要一步到位。</li></ol><h4 id="输出4R架构文档交付开发实现"><a href="#输出4R架构文档交付开发实现" class="headerlink" title="输出4R架构文档交付开发实现"></a>输出4R架构文档交付开发实现</h4>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（五）</title>
      <link href="/2021/07/01/architecture/architecture-05/"/>
      <url>/2021/07/01/architecture/architecture-05/</url>
      
        <content type="html"><![CDATA[<h2 id="外包学生管理系统架构设计"><a href="#外包学生管理系统架构设计" class="headerlink" title="外包学生管理系统架构设计"></a>外包学生管理系统架构设计</h2><h3 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h3><p>随着学校的规模的不断扩大，学生数量的增加，需要处理的信息也日趋增大。不仅花费大量的教师资源，处理效率也十分低下。为提高学生管理的管理水平，优化资源，尽可能降低管理成本成为学生管理的新课题，学生管理系统是从学生管理现状出发，根据学生管理的新要求进行开发设计的，它需要解决学生信息管理数据信息量大修改不方便，对一系列数据进行分析时花费时间长等问题，帮助学生管理人员有效管理学生信息。因此学生信息管理系统可以通过系统规范化地管理、科学性统计和快速查询、修改、增加、删除等，提高信息的准确度以及日常管理的工作效率。本系统主要是应用于学生各类信息的管理，总体任务是实现学生信息关系的系统化、规范化、自动化，其主要任务是统计学生各类信息进行日常管理，如查询、修改、增加、删除、以及学生选课、成绩的查询等<br>功能设计的管理系统。</p><h3 id="系统总体需求"><a href="#系统总体需求" class="headerlink" title="系统总体需求"></a>系统总体需求</h3><p>系统主要应用于学校学生信息管理，总体任务是实现学生信息管理的系统化、规范化和自动化，其主要任务是管理学生相关信息，如学籍、课程、成绩、奖惩</p><h3 id="系统详细需求"><a href="#系统详细需求" class="headerlink" title="系统详细需求"></a>系统详细需求</h3><h4 id="学生管理"><a href="#学生管理" class="headerlink" title="学生管理"></a>学生管理</h4><ol><li>系统登录：此功能面向所有用户角色，根据用户角色权限不一，功能权限也不一样。</li><li>账号分配：学生账号由系统生成，给定相应权限，可进行密码更改，无法对系统成绩评定等功能做出相应干<br>涉。教师账号由管理者（教务）通过系统生成，教师有对学生成绩评定和试卷评定的权限，同时兼容学生权<br>限。管理（教务）权限由系统固有账号，是系统 root 权限，对教师有分配管理权限，对数据有增加、修改、删除、查询权限。</li><li>账号绑定：学生账号可通过第三方如：手机号码、微信等自行绑定，可实现账号自助找回等。</li><li>组织管理层级：按学生实际情况划分归属。 例如：软件学院—数字传媒方向（专业）—软件1306—苗雨<br>乔。</li><li>文件上传/下载：此功能针对所有用户开放，学生可以将自己课堂笔记、日常作业等相关信息在线传输，教<br>师通过学生上传的相关作业、试卷信息进行相应评定，完成对学生平时成绩的评定。此功能一旦评定结束，所有用户只有查询、浏览的权限，除管理员外其他用户没有对成绩修改的权限。</li><li>信息查询：此项功能包含课程查询（含课程体系、课时安排、课表、教师、教材等）、成绩查询、文件查<br>询。</li></ol><h4 id="课程管理"><a href="#课程管理" class="headerlink" title="课程管理"></a>课程管理</h4><ol><li>课程录入：由管理员对相应课程体系进行录入，供学生、教师进行在线选择。</li><li>选课功能：学生可以在线对自己的课程体系进行选择，相对应的课程选择功能类比。</li><li>排课功能：此功能根据学生选定的课程和教学体系安排，对相应教师、教室、时间进行统一规划安排。<br>排课功能备选开发方向为在线排课和人工录入，在线排课是系统根据课程要设置课程的名称、课时、上课<br>的班级、代课老师等信息，除此之外，还可以选填排课时的优选项，例如：上课时间有限上午等系统自动<br>生成课程信息，管理员有权限对课程安排作出添加、删除、修改等判定。</li><li>教材选择：此功能由教务统一管理，根据每门课程选定相应教材。</li></ol><h4 id="考试管理"><a href="#考试管理" class="headerlink" title="考试管理"></a>考试管理</h4><ol><li>试卷区域分割：发起考试：期中的时候，教师可以创建一次考试；而在月考时可以根据上课的周数进行考<br>试安排，如一般可以在在第八周、十二周、十六周分别创建三次考试。其中这些考试题目是在事先录入好的<br>题库中按照教师设定的知识点、范围、难易程度以及题型自动生成的试卷。每创建一次考试之后，教师需要<br>将出好的考试题进行分割点标注，然后印刷试卷，考试。考试过后，试卷会被扫描，然后教师需要将扫描件<br>试卷录入系统之中，系统会根据标注点对试卷进行预处理和分割。教师进入系统，可以对已经分割好的试卷<br>进行判分。</li><li>平时成绩：此项功能包含学生平时所有相关成绩信息，例如：考勤主要是由教师终端自动生成的或者教师<br>手动输入，时间期限为当天；课堂笔记主要是由学生在当堂课程结束后将自己的笔记上传然后由教师批阅给<br>予成绩在下次上课前完成自动签名；课后作业主要是在每堂课之后，教师可以发起一次作业任务，学生应老<br>师设定的时间内提交作业，老师会对作业进行批阅，在下次课前给予成绩评分，将以上方式计算得到的总成<br>绩计入平时成绩。最后按照系统判定的平时成绩结合月考、期中、期末试卷成绩按相应比例得出学生最终成<br>绩。</li><li>评分判定：教师使用系统对上传的试卷分割区域作出相应的评分。由于教师要对试卷进行签字，我们建<br>议教师在评分之前可以在试卷上进行签字，由此得到的扫描结果就有教师签字。如有额外需求，需要教师通<br>过外设进行试卷签字，此项功能暂不做需求开发。</li></ol><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><ol><li>系统使用者有学生、教师、管理员、辅导员。</li><li>学生、教师、辅导员可以注册、登录、修改自己的信息，但注册信息需要管理员审核通过。</li><li>学生只能查看自己的成绩，教师可以修改学生的成绩。</li><li>辅导员可以查看学生的信息，可以设置学生的奖惩信息。</li><li>教师可以上传考试试题，学生可以做题。</li></ol><h3 id="面向复杂度架构设计"><a href="#面向复杂度架构设计" class="headerlink" title="面向复杂度架构设计"></a>面向复杂度架构设计</h3><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png"></p><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ol><li>高性能？一个学校一般也就几万学生，排除高性能需求。（实际场景下，澄清后计算好容量）</li><li>高可用？一个学校的正常运作，就算系统宕机，也不会造成多大的影响。但是学校数据比较重要，不允许大范围丢失，所以数据需要高可用。</li><li>可扩展？整体业务复杂度比较高，且可预见会改来改去，或者增加新需求。分析后必须考虑可扩展需求。</li><li>成本？一个学校系统，成本不会太高，不用考虑。</li><li>安全性？学生管理系统里面都是学生的一些公开信息，不涉及什么隐私、金钱等，安全性要求不高。</li></ol><h4 id="设计备选方案"><a href="#设计备选方案" class="headerlink" title="设计备选方案"></a>设计备选方案</h4><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p><img src="/medias/assets/architecture/20210701094229.png"></p><ol><li>系统按照模块拆分为独立的服务，单独部署。</li><li>部署MySQL主备</li></ol><h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5><p><img src="/medias/assets/architecture/20210701094303.png"></p><ol><li>只拆分模块不拆分服务，复制部署多个。</li><li>部署MySQL主备</li></ol><h4 id="根据架构设计三原则取舍"><a href="#根据架构设计三原则取舍" class="headerlink" title="根据架构设计三原则取舍"></a>根据架构设计三原则取舍</h4><h5 id="判断维度"><a href="#判断维度" class="headerlink" title="判断维度"></a>判断维度</h5><h6 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h6><ol><li>业务当前量级</li><li>业务发展速度</li><li>业务发展形态</li></ol><h6 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h6><ol><li>团队的规模</li><li>团队能力水平</li><li>投入的资源</li></ol><h6 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h6><ol><li>已有的技术体系</li><li>当前技术能力</li><li>技术成熟度</li></ol><p><strong>根据上面的三个维度分析判断，最终选择方案1</strong></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><h6 id="合适原则"><a href="#合适原则" class="headerlink" title="合适原则"></a>合适原则</h6><ol><li>符合团队技术水平积累</li><li>开发成本低</li><li>系统运维成本低</li></ol><h6 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h6><ol><li>不进行系统拆分，部署维护简单</li><li>没用微服务，无需微服务基础设施</li></ol><h6 id="演化原则"><a href="#演化原则" class="headerlink" title="演化原则"></a>演化原则</h6><ol><li>一次性交付，无需考虑太多后期演化</li><li>学校学生数量不会发生太大变化，系统够用多年</li></ol><h4 id="输出4R架构文档交付开发实现"><a href="#输出4R架构文档交付开发实现" class="headerlink" title="输出4R架构文档交付开发实现"></a>输出4R架构文档交付开发实现</h4>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（四）</title>
      <link href="/2021/06/30/architecture/architecture-04/"/>
      <url>/2021/06/30/architecture/architecture-04/</url>
      
        <content type="html"><![CDATA[<h2 id="架构设计原则"><a href="#架构设计原则" class="headerlink" title="架构设计原则"></a>架构设计原则</h2><h3 id="原则的作用"><a href="#原则的作用" class="headerlink" title="原则的作用"></a>原则的作用</h3><p>指导我们做出更好的设计，而不是可用的设计</p><h3 id="合适原则"><a href="#合适原则" class="headerlink" title="合适原则"></a>合适原则</h3><p>综合考虑当前的业务、资源、时间等因素，选中合适的架构设计。合适优于业界领先！</p><h3 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h3><p>越复杂的系统越不可靠，越复杂的系统越难扩展，越复杂的系统故障越难处理。简单优于复杂！</p><h3 id="演化原则"><a href="#演化原则" class="headerlink" title="演化原则"></a>演化原则</h3><p>满足当前的业务需求，通过迭代去优化，到达一定量后重构或重写。演化优于一步到位！</p><h2 id="原则优先级"><a href="#原则优先级" class="headerlink" title="原则优先级"></a>原则优先级</h2><p>合适原则-&gt;简单原则-&gt;演化原则，从左到右，优先级递减</p><h2 id="架构设计原则常见判断维度"><a href="#架构设计原则常见判断维度" class="headerlink" title="架构设计原则常见判断维度"></a>架构设计原则常见判断维度</h2><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><ol><li>业务当前量级</li><li>业务发展速度</li><li>业务发展形态</li></ol><h3 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h3><ol><li>团队的规模</li><li>团队能力水平</li><li>投入的资源</li></ol><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ol><li>已有的技术体系</li><li>当前技术能力</li><li>技术成熟度</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>架构设计三原则：合适原则、简单原则、演化原则</li><li>原则优先级：合适原则-&gt;简单原则-&gt;演化原则，从左到右，优先级递减</li><li>架构设计原则常见判断维度：业务、团队、技术</li></ul><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%8E%9F%E5%88%99.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（三）</title>
      <link href="/2021/06/30/architecture/architecture-03/"/>
      <url>/2021/06/30/architecture/architecture-03/</url>
      
        <content type="html"><![CDATA[<h2 id="架构设计的本质"><a href="#架构设计的本质" class="headerlink" title="架构设计的本质"></a>架构设计的本质</h2><p>降低软件系统的复杂度</p><h2 id="架构的方法论"><a href="#架构的方法论" class="headerlink" title="架构的方法论"></a>架构的方法论</h2><h3 id="面向模式软件架构"><a href="#面向模式软件架构" class="headerlink" title="面向模式软件架构"></a>面向模式软件架构</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>POSA系列开山之作，Jolt大奖图书。作者均为模式界大师级人物，编著多卷POSA图书。致力于架构领域的“设计模式”</p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>应用经过验证的成熟架构模式，列如MVC、Reactor等</p><h4 id="核心问题"><a href="#核心问题" class="headerlink" title="核心问题"></a>核心问题</h4><ol><li>知道模式，但是不知道什么时候用哪个模式</li><li>太庞大且比较理论化</li><li>5卷本由不同作者完成，前后风格不完全一致</li></ol><h3 id="风险驱动软件架构"><a href="#风险驱动软件架构" class="headerlink" title="风险驱动软件架构"></a>风险驱动软件架构</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>George Fairbanks在其著作Just Enough Software Architecture中将风险看做架构设计的核心，提出“风险驱动设计”的方法论、业务架构建模的技巧</p><h4 id="核心思想-1"><a href="#核心思想-1" class="headerlink" title="核心思想"></a>核心思想</h4><p>根据系统风险大小来设计软件架构</p><h4 id="核心问题-1"><a href="#核心问题-1" class="headerlink" title="核心问题"></a>核心问题</h4><p>风险是一种概率预判，“一切皆有可能”。建模部分本质是面向对象设计的建模过程</p><h3 id="DDD和整洁架构"><a href="#DDD和整洁架构" class="headerlink" title="DDD和整洁架构"></a>DDD和整洁架构</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>Eric Evans “领域驱动设计之父”，世界杰出软件建模专家。他创建了 Domain Language 公司，<br>致力于帮助公司机构创建与业务紧密相关的软件。2004 年提出，在全世界广为流传，但是在中国的<br>应用并不是很火。</p><h4 id="核心思想-2"><a href="#核心思想-2" class="headerlink" title="核心思想"></a>核心思想</h4><p>通过领域建模来完成架构设计和代码设计</p><h4 id="核心问题-2"><a href="#核心问题-2" class="headerlink" title="核心问题"></a>核心问题</h4><ol><li>DDD是可扩展架构的设计技巧，不是架构方法论</li><li>DDD兼顾架构设计和方案设计，大部分人会搞混</li><li>DDD、敏捷架构不关注存储和计算，只关注业务</li></ol><h3 id="面向复杂度软件架构"><a href="#面向复杂度软件架构" class="headerlink" title="面向复杂度软件架构"></a>面向复杂度软件架构</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>软件系统规模越来越大，数据结构和算法不再是主要问题，整个系统的结构成为首要问题。</p><h4 id="核心思想-3"><a href="#核心思想-3" class="headerlink" title="核心思想"></a>核心思想</h4><p>针对复杂度大的地方来设计软件架构，复杂度低的地方简单设计即可</p><h4 id="设计要点"><a href="#设计要点" class="headerlink" title="设计要点"></a>设计要点</h4><ol><li>分析系统需求找出系统复杂的地方，然后设计方案</li><li>复杂度来源：高性能、高可用、高扩展、安全、成本等</li><li>方案套路：分库分表、缓存、集群、分片、微服务、DDD、异地多活等</li><li>设计原则：合适原则、简单原则、演化原则</li></ol><h4 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a>设计步骤</h4><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%AD%A5%E9%AA%A4.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>架构设计的本质：降低软件系统复杂度</li><li>架构设计方法论：面向模式、风险驱动、DDD和整洁架构、面向复杂度</li></ul><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E8%AE%BA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（二）</title>
      <link href="/2021/06/30/architecture/architecture-02/"/>
      <url>/2021/06/30/architecture/architecture-02/</url>
      
        <content type="html"><![CDATA[<h2 id="架构描述"><a href="#架构描述" class="headerlink" title="架构描述"></a>架构描述</h2><h3 id="4-1架构视图"><a href="#4-1架构视图" class="headerlink" title="4+1架构视图"></a>4+1架构视图</h3><h4 id="逻辑视图"><a href="#逻辑视图" class="headerlink" title="逻辑视图"></a>逻辑视图</h4><p>系统提供给用户的功能，对应UML的类图和状态图</p><h5 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h5><p><img src="/medias/assets/architecture/%E7%B1%BB%E5%9B%BE.png"></p><h5 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h5><p><img src="/medias/assets/architecture/%E7%8A%B6%E6%80%81%E5%9B%BE.png"></p><h3 id="处理视图"><a href="#处理视图" class="headerlink" title="处理视图"></a>处理视图</h3><p>系统处理的过程，对应UML的时序图和活动图</p><h5 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h5><p><img src="/medias/assets/architecture/%E6%97%B6%E5%BA%8F%E5%9B%BE.png"></p><h5 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h5><p><img src="/medias/assets/architecture/%E6%B4%BB%E5%8A%A8%E5%9B%BE.png"></p><h4 id="开发视图"><a href="#开发视图" class="headerlink" title="开发视图"></a>开发视图</h4><p>程序员角度看系统的逻辑组成，对应UML的包图</p><p><img src="/medias/assets/architecture/%E5%8C%85%E5%9B%BE.png"></p><h4 id="物理视图"><a href="#物理视图" class="headerlink" title="物理视图"></a>物理视图</h4><p>系统工程师角度看系统的物理组成，对应UML的部署图</p><p><img src="/medias/assets/architecture/%E9%83%A8%E7%BD%B2%E5%9B%BE.png"></p><h4 id="场景视图"><a href="#场景视图" class="headerlink" title="场景视图"></a>场景视图</h4><p>用户角度看系统需要实现的需求，对应UML的用例图</p><p><img src="/medias/assets/architecture/%E7%94%A8%E4%BE%8B%E5%9B%BE.png"></p><h3 id="4-1架构视图的缺点"><a href="#4-1架构视图的缺点" class="headerlink" title="4+1架构视图的缺点"></a>4+1架构视图的缺点</h3><ol><li>4+1架构视图提出的时候是1995年，那时候大部分的系统还是单体系统，而现在大部分是分布式系统。随着架构复杂度的提升，UML的表达能力不够</li><li>4+1架构视图绑定UML图，灵活性不够，也不美观</li><li>4+1架构视图的逻辑视图、开发视图、处理视图比较容易混淆，难理解</li></ol><h3 id="目前国内流行的架构图"><a href="#目前国内流行的架构图" class="headerlink" title="目前国内流行的架构图"></a>目前国内流行的架构图</h3><h4 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>描述系统对用户提供了什么业务功能，类似4+1的场景视图</p><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li>产品人员规划业务</li><li>给上层汇报业务</li><li>给新员工培训业务</li><li>整体架构设计</li></ol><h5 id="画图技巧"><a href="#画图技巧" class="headerlink" title="画图技巧"></a>画图技巧</h5><ol><li>通过不同的颜色来识别业务状态</li><li>业务分组管理</li></ol><h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><p><img src="/medias/assets/architecture/%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84.png"></p><h4 id="前端架构-客户端架构"><a href="#前端架构-客户端架构" class="headerlink" title="前端架构/客户端架构"></a>前端架构/客户端架构</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>前端/客户端的领域逻辑架构，类似4+1视图里的逻辑视图</p><h5 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li>整体架构设计</li><li>架构培训</li></ol><h5 id="画图技巧-1"><a href="#画图技巧-1" class="headerlink" title="画图技巧"></a>画图技巧</h5><ol><li><p>用不同的颜色来标识不同的角色</p></li><li><p>用连线标识关联关系</p></li></ol><h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h5><p><img src="/medias/assets/architecture/%E5%89%8D%E7%AB%AF%E6%9E%B6%E6%9E%84.png"></p><h4 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>后端的逻辑架构，又称“后端架构”、“技术架构”</p><h5 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li>整体架构设计</li><li>架构培训</li></ol><h5 id="画图技巧-2"><a href="#画图技巧-2" class="headerlink" title="画图技巧"></a>画图技巧</h5><ol><li>通过不同的颜色来标识不同的角色</li><li>用连线标识关联关系</li></ol><h5 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h5><p>如果系统简单，画一张</p><p><img src="/medias/assets/architecture/%E7%AE%80%E5%8D%95%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg"></p><p>如果系统复杂，画两张（功能示意图、交互示意图）</p><p><img src="/medias/assets/architecture/%E5%A4%8D%E6%9D%82%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84.png"></p><h4 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h4><h5 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h5><p>描述后端系统由哪些应用组成</p><h5 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li>项目开发测试</li><li>部署发布</li><li>子域架构设计</li></ol><h5 id="画图技巧-3"><a href="#画图技巧-3" class="headerlink" title="画图技巧"></a>画图技巧</h5><ol><li>通过不同颜色来标识不同角色</li><li>通过连接线来表示关系</li></ol><h5 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h5><p><img src="/medias/assets/architecture/%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84.png"></p><p>相对简单的系统架构和应用架构是等价的。一般中间件都相对比较简单，所以一般情况下它们的系统架构和应用架构等价，比如Redis</p><p><img src="/medias/assets/architecture/%E7%AE%80%E5%8D%95%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg"></p><h4 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h4><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>描述后端系统具体如何部署，对应4+1视图里面的物理视图</p><h5 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h5><ol><li>总体架构设计</li><li>运维规划和优化</li></ol><h5 id="画图技巧-4"><a href="#画图技巧-4" class="headerlink" title="画图技巧"></a>画图技巧</h5><ol><li>用图标代替区块</li></ol><h5 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h5><p><img src="/medias/assets/architecture/%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.png"></p><h4 id="系统序列图"><a href="#系统序列图" class="headerlink" title="系统序列图"></a>系统序列图</h4><h5 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h5><p>描述系统运作规则，属于动态架构图</p><h5 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h5><p><img src="/medias/assets/architecture/%E7%B3%BB%E7%BB%9F%E5%BA%8F%E5%88%97%E5%9B%BE.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E6%8F%8F%E8%BF%B0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零学架构（一）</title>
      <link href="/2021/06/29/architecture/architecture-01/"/>
      <url>/2021/06/29/architecture/architecture-01/</url>
      
        <content type="html"><![CDATA[<h2 id="架构相关的定义"><a href="#架构相关的定义" class="headerlink" title="架构相关的定义"></a>架构相关的定义</h2><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>泛指由一群有关联的个体组成，根据某种规则运作，能完成个别元件不能单独完成的工作的群体。强调“总体”、“整体”或者“联盟”</p><h3 id="子系统"><a href="#子系统" class="headerlink" title="子系统"></a>子系统</h3><p>由一群有关联的个体组成的系统，是更大系统的一部分</p><p><img src="/medias/assets/architecture/%E7%B3%BB%E7%BB%9F&amp;%E5%AD%90%E7%B3%BB%E7%BB%9F.png"></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>是一套一致而相互有紧密关联的软件组织。它分别包含了程序和数据结构两部分。现代软件开发往往利用模块作为合成单位。模块的接口表达了由该模块提供的功能和调用它时所需的元素。模块是可以分开编写的单位。这使它们可再用和允许人员同时协作、编写及研究不同的模块。它是系统按照逻辑拆分的结果，主要目的是职责分离。</p><p><img src="/medias/assets/architecture/%E6%A8%A1%E5%9D%97.png"></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>自包含的、可编程的、可重用的、与语言无关的软件单元，软件组件可以很容易被用于组装应用程序中。它是系统按照物理拆分的结果，主要目的是单元复用。</p><p><img src="/medias/assets/architecture/%E7%BB%84%E4%BB%B6.png"></p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个组件规范时，提供规范所要求之基础功能的软件产品</p><h2 id="架构的定义"><a href="#架构的定义" class="headerlink" title="架构的定义"></a>架构的定义</h2><p>软件架构指软件系统的顶层（Rank）结构，它定义了系统由哪些角色（Role）组成，角色之间的关系（Relation）和运作规则（Rule）。</p><h3 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h3><p>分层架构是一种可扩展的架构模式</p><p><img src="/medias/assets/architecture/%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.png"></p><h3 id="架构分层"><a href="#架构分层" class="headerlink" title="架构分层"></a>架构分层</h3><p>架构分层是指架构自顶向下，逐步细化</p><p><img src="/medias/assets/architecture/%E7%B3%BB%E7%BB%9F&amp;%E5%AD%90%E7%B3%BB%E7%BB%9F.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="/medias/assets/architecture/%E6%9E%B6%E6%9E%84%E5%AE%9A%E4%B9%89.png"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（八）</title>
      <link href="/2021/06/24/spring-security-oauth2/spring-security-oauth2-08/"/>
      <url>/2021/06/24/spring-security-oauth2/spring-security-oauth2-08/</url>
      
        <content type="html"><![CDATA[<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="优化点1"><a href="#优化点1" class="headerlink" title="优化点1"></a>优化点1</h3><p>授权服务每次登录认证的时候，都去数据库中加载一次用户信息，可以修改为从redis中加载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringUserDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserRoleMapper</span> userRoleMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RolePermissionMapper</span> rolePermissionMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PermissionMapper</span> permissionMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SpringUserDetails</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringUserDetails</span> userDetails <span class="token operator">=</span> <span class="token function">loadUserByUsernameFromRedis</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reentrantLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            userDetails <span class="token operator">=</span> <span class="token function">loadUserByUsernameFromRedis</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">UserRoleQuery</span> userRoleQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRoleQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userRoleQuery<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roleIds <span class="token operator">=</span> userRoleMapper<span class="token punctuation">.</span><span class="token function">selectByQuery</span><span class="token punctuation">(</span>userRoleQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">UserRoleDO</span><span class="token operator">::</span><span class="token function">getRoleId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>roleIds<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">RolePermissionQuery</span> rolePermissionQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RolePermissionQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rolePermissionQuery<span class="token punctuation">.</span><span class="token function">setRoleIds</span><span class="token punctuation">(</span>roleIds<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissionIds <span class="token operator">=</span> rolePermissionMapper<span class="token punctuation">.</span><span class="token function">selectByQuery</span><span class="token punctuation">(</span>rolePermissionQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">RolePermissionDO</span><span class="token operator">::</span><span class="token function">getPermissionId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                authorities <span class="token operator">=</span> permissionMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>permissionIds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringUserDetails</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">!</span>userDO<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authorities<span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getOpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">redisKey</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            reentrantLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SpringUserDetails</span> <span class="token function">loadUserByUsernameFromRedis</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">redisKey</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">redisKey</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"oauth2:user_details:"</span> <span class="token operator">+</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化点2"><a href="#优化点2" class="headerlink" title="优化点2"></a>优化点2</h3><p>授权服务每次登录认证、每次授权校验token的时候都使用JdbcClientDetailsService加载数次客户端信息，可以实现自定义ClientDetailsService从redis中加载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRedisClientDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">ClientDetailsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CLIENT_FIELDS_FOR_UPDATE</span> <span class="token operator">=</span> <span class="token string">"resource_ids, scope, "</span>            <span class="token operator">+</span> <span class="token string">"authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, "</span>            <span class="token operator">+</span> <span class="token string">"refresh_token_validity, additional_information, autoapprove"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CLIENT_FIELDS</span> <span class="token operator">=</span> <span class="token string">"client_secret, "</span> <span class="token operator">+</span> <span class="token constant">CLIENT_FIELDS_FOR_UPDATE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BASE_FIND_STATEMENT</span> <span class="token operator">=</span> <span class="token string">"select client_id, "</span> <span class="token operator">+</span> <span class="token constant">CLIENT_FIELDS</span>            <span class="token operator">+</span> <span class="token string">" from oauth_client_details"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_SELECT_STATEMENT</span> <span class="token operator">=</span> <span class="token constant">BASE_FIND_STATEMENT</span> <span class="token operator">+</span> <span class="token string">" where client_id = ?"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> selectClientDetailsSql <span class="token operator">=</span> <span class="token constant">DEFAULT_SELECT_STATEMENT</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ClientDetails</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> <span class="token constant">LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SpringRedisClientDetailsService</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ClientDetails</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> <span class="token string">"RedisTemplate required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"DataSource required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ClientDetails</span> <span class="token function">loadClientByClientId</span><span class="token punctuation">(</span><span class="token class-name">String</span> clientId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClientRegistrationException</span> <span class="token punctuation">{</span>        <span class="token class-name">ClientDetails</span> details <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"oauth2:client:"</span> <span class="token operator">+</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> details<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                details <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>selectClientDetailsSql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>ClientDetailsRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EmptyResultDataAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchClientException</span><span class="token punctuation">(</span><span class="token string">"No client with requested id: "</span> <span class="token operator">+</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">assert</span> details <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"oauth2:client:"</span> <span class="token operator">+</span> clientId<span class="token punctuation">,</span> details<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> details<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClientDetailsRowMapper</span> <span class="token keyword">implements</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClientDetails</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>JsonMapper</span> mapper <span class="token operator">=</span> <span class="token function">createJsonMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ClientDetails</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>            <span class="token class-name">BaseClientDetails</span> details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseClientDetails</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            details<span class="token punctuation">.</span><span class="token function">setClientSecret</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                details<span class="token punctuation">.</span><span class="token function">setAccessTokenValiditySeconds</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                details<span class="token punctuation">.</span><span class="token function">setRefreshTokenValiditySeconds</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> json <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> additionalInformation <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    details<span class="token punctuation">.</span><span class="token function">setAdditionalInformation</span><span class="token punctuation">(</span>additionalInformation<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Could not decode JSON for additional information: "</span> <span class="token operator">+</span> details<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> scopes <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scopes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                details<span class="token punctuation">.</span><span class="token function">setAutoApproveScopes</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToSet</span><span class="token punctuation">(</span>scopes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> details<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">JsonMapper</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>        <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>JsonMapper</span> <span class="token function">createJsonMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">"org.codehaus.jackson.map.ObjectMapper"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>JacksonMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.databind.ObjectMapper"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>Jackson2Mapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>NotSupportedJsonMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JacksonMapper</span> <span class="token keyword">implements</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>JsonMapper</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span>ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span>ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Jackson2Mapper</span> <span class="token keyword">implements</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>JsonMapper</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span>ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span>ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NotSupportedJsonMapper</span> <span class="token keyword">implements</span> <span class="token class-name">SpringRedisClientDetailsService<span class="token punctuation">.</span>JsonMapper</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>                    <span class="token string">"Neither Jackson 1 nor 2 is available so JSON conversion cannot be done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>                    <span class="token string">"Neither Jackson 1 nor 2 is available so JSON conversion cannot be done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化点3"><a href="#优化点3" class="headerlink" title="优化点3"></a>优化点3</h3><p>RemoteTokenServices配置信息从代码中转移到配置文件中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ResourceServerTokenServices</span> <span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 使用远程服务请求授权服务器校验token,必须指定校验token 的url、client_id，client_secret</span>    <span class="token class-name">RemoteTokenServices</span> tokenServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setCheckTokenEndpointUrl</span><span class="token punctuation">(</span>securityClientConfig<span class="token punctuation">.</span><span class="token function">getCheckTokenUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setClientId</span><span class="token punctuation">(</span>securityClientConfig<span class="token punctuation">.</span><span class="token function">getClientId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setClientSecret</span><span class="token punctuation">(</span>securityClientConfig<span class="token punctuation">.</span><span class="token function">getClientSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setAccessTokenConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tokenServices<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>        prefix <span class="token operator">=</span> <span class="token string">"oauth2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityClientConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> clientId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> clientSecret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> checkTokenUri<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">oauth2</span><span class="token punctuation">:</span>  <span class="token key atrule">client-id</span><span class="token punctuation">:</span> order  <span class="token key atrule">client-secret</span><span class="token punctuation">:</span> secret  <span class="token key atrule">check-token-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>8090/oauth/check_token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E5%85%AB%EF%BC%89</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混沌工程（Netflix系统稳定之道）——Aaron Blohowiak</title>
      <link href="/2021/06/23/reading/reading02/"/>
      <url>/2021/06/23/reading/reading02/</url>
      
        <content type="html"><![CDATA[<h2 id="混沌工程"><a href="#混沌工程" class="headerlink" title="混沌工程"></a>混沌工程</h2><h3 id="存在的意义"><a href="#存在的意义" class="headerlink" title="存在的意义"></a>存在的意义</h3><p>混沌工程存在的意义在于，能让复杂系统中根深蒂固的混乱和不稳定性浮出水面，让我们可以更全面地理解这些系统中的固有现象，从而有根据地在分布式系统中实现更好的工程设计，来不断提高系统弹性。</p><h3 id="混沌工程和故障注入得区别"><a href="#混沌工程和故障注入得区别" class="headerlink" title="混沌工程和故障注入得区别"></a>混沌工程和故障注入得区别</h3><p>混沌工程和故障注入本质上是思维方式上的不同。故障注入首先要知道会发生什么故障，然后一个一个地注入，然后在复杂分布式系统中，想要穷举所有可能的故障，本身就是奢望。混沌工程地思维方式是主动去找故障，是探索性的，你不知道摘掉一个节点、关掉一个服务会发生什么故障，虽然按计划做好了降级预案，但是关闭节点时却引发了上游服务异常，进而引发雪崩，这不是故障注入或预先计划能发现的。混沌工程是一种帮助我们获得更多的关于系统的新认知的实验方法。它和已有的功能测试、集成测试等测试已知属性的方法有本质的区别。</p><h3 id="实施混沌工程的前提条件"><a href="#实施混沌工程的前提条件" class="headerlink" title="实施混沌工程的前提条件"></a>实施混沌工程的前提条件</h3><ul><li>混沌工程非常适合用于暴露生产系统中未知的脆弱环节，但如果你很确定一个混沌工程实验会导致系统出现严重的故障，那么进行这样的实验是没有任何意义的。</li><li>实施混沌工程的另一个前提条件是配套监控系统，你需要用它来判断系统当前的各项状态。</li></ul><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul><li>建立稳定状态的假设</li><li>用多样的现实世界事件做验证</li><li>在生产环境中进行实验</li><li>自动化实验以持续运行</li><li>最小化爆炸半径</li></ul>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（七）</title>
      <link href="/2021/06/23/spring-security-oauth2/spring-security-oauth2-07/"/>
      <url>/2021/06/23/spring-security-oauth2/spring-security-oauth2-07/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis替换Jdbc"><a href="#Redis替换Jdbc" class="headerlink" title="Redis替换Jdbc"></a>Redis替换Jdbc</h2><h3 id="添加redis依赖"><a href="#添加redis依赖" class="headerlink" title="添加redis依赖"></a>添加redis依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置RedisTokenStore进行token存储"><a href="#设置RedisTokenStore进行token存储" class="headerlink" title="设置RedisTokenStore进行token存储"></a>设置RedisTokenStore进行token存储</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RedisTokenStore</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用redis替换JdbcAuthorizationCodeServices"><a href="#使用redis替换JdbcAuthorizationCodeServices" class="headerlink" title="使用redis替换JdbcAuthorizationCodeServices"></a>使用redis替换JdbcAuthorizationCodeServices</h3><p>仿照JdbcAuthorizationCodeServices，实现一个自定义SpringRedisAuthorizationCodeServices类来存储授权码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRedisAuthorizationCodeServices</span> <span class="token keyword">extends</span> <span class="token class-name">RandomValueAuthorizationCodeServices</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">OAuth2Authentication</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SpringRedisAuthorizationCodeServices</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">OAuth2Authentication</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> <span class="token string">"RedisTemplate required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">OAuth2Authentication</span> authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"oauth2:oauth_code:"</span> <span class="token operator">+</span> code<span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">OAuth2Authentication</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OAuth2Authentication</span> token <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"oauth2:oauth_code:"</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"oauth2:oauth_code:"</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置SpringRedisAuthorizationCodeServices"><a href="#设置SpringRedisAuthorizationCodeServices" class="headerlink" title="设置SpringRedisAuthorizationCodeServices"></a>设置SpringRedisAuthorizationCodeServices</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> <span class="token class-name">AuthorizationCodeServices</span> <span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringRedisAuthorizationCodeServices</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h3><p>创建RedisConfig配置类,<strong>注意只能采用JdkSerializationRedisSerializer进行字符串的序列化，不然读取授权码的时候会报错</strong>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableCaching</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">KeyGenerator</span> <span class="token function">keyGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> params<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> param <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GenericJackson2JsonRedisSerializer</span> genericJackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JdkSerializationRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>genericJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CacheResolver</span> <span class="token function">cacheResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCacheResolver</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CacheErrorHandler</span> <span class="token function">errorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 用于捕获从Cache中进行CRUD时的异常的回调处理器。</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCacheErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisCacheConfiguration</span> cacheConfiguration <span class="token operator">=</span>                <span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">// 默认缓存过期时间8天+随机秒数,防止集中过期</span>                        <span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>cacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置redis-key前缀"><a href="#设置redis-key前缀" class="headerlink" title="设置redis key前缀"></a>设置redis key前缀</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">RedisTokenStore</span> tokenStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTokenStore</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenStore<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">"oauth2:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tokenStore<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h4><p>获取token</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=password&amp;username=user&amp;password=password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"756a8b37-f14d-4402-9969-f72d261e34b2"</span><span class="token punctuation">,</span>  <span class="token property">"token_type"</span><span class="token operator">:</span> <span class="token string">"bearer"</span><span class="token punctuation">,</span>  <span class="token property">"refresh_token"</span><span class="token operator">:</span> <span class="token string">"45d12dbb-4c9c-4cef-b711-c0cbbd3d15c7"</span><span class="token punctuation">,</span>  <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">2591999</span><span class="token punctuation">,</span>  <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token string">"read write"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求受保护资源</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/orderAuthorization: Bearer 756a8b37-f14d-4402-9969-f72d261e34b2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">userId:1406151407442780160,phone:,openId:Response code: 200; Time: 41ms; Content length: 41 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=code&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/?code=CXmj01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续获取token</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=authorization_code&amp;client_id=order&amp;client_secret=secret&amp;redirect_uri=http://www.baidu.com&amp;code=CXmj01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"ea2d2e3b-4dd9-4fa5-bbb7-0ceb56d3fb0a"</span><span class="token punctuation">,</span>  <span class="token property">"token_type"</span><span class="token operator">:</span> <span class="token string">"bearer"</span><span class="token punctuation">,</span>  <span class="token property">"refresh_token"</span><span class="token operator">:</span> <span class="token string">"36abfc53-2f24-4f2e-8efe-5a32da8e5da2"</span><span class="token punctuation">,</span>  <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">2591786</span><span class="token punctuation">,</span>  <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token string">"read write"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看redis，相关token信息已经存储在里面了</p><p><img src="/medias/assets/spring-security-oauth2/20210624091958.png"></p><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E4%B8%83%EF%BC%89</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（六）</title>
      <link href="/2021/06/21/spring-security-oauth2/spring-security-oauth2-06/"/>
      <url>/2021/06/21/spring-security-oauth2/spring-security-oauth2-06/</url>
      
        <content type="html"><![CDATA[<h2 id="丰富当前登录用户信息"><a href="#丰富当前登录用户信息" class="headerlink" title="丰富当前登录用户信息"></a>丰富当前登录用户信息</h2><h3 id="资源服务器获取登录用户信息"><a href="#资源服务器获取登录用户信息" class="headerlink" title="资源服务器获取登录用户信息"></a>资源服务器获取登录用户信息</h3><h4 id="获取登录用户信息代码"><a href="#获取登录用户信息代码" class="headerlink" title="获取登录用户信息代码"></a>获取登录用户信息代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="资源服务器获取登录用户信息流程"><a href="#资源服务器获取登录用户信息流程" class="headerlink" title="资源服务器获取登录用户信息流程"></a>资源服务器获取登录用户信息流程</h4><p><img src="/medias/assets/spring-security-oauth2/1223423423234.png"></p><p>从流程可以看出，关键的类是DefaultAccessTokenConverter、UserAuthenticationConverter，只要扩展这两个类，就能够放入更多信息。</p><h3 id="授权服务自定义DefaultUserAuthenticationConverter"><a href="#授权服务自定义DefaultUserAuthenticationConverter" class="headerlink" title="授权服务自定义DefaultUserAuthenticationConverter"></a>授权服务自定义DefaultUserAuthenticationConverter</h3><p>创建SpringUserAuthenticationConverter类继承DefaultUserAuthenticationConverter，重写convertUserAuthentication方法，放入更多用户相关的信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringUserAuthenticationConverter</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultUserAuthenticationConverter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">convertUserAuthentication</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SpringUserDetails</span> userDetails <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SpringUserDetails</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">USERNAME</span><span class="token punctuation">,</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">AUTHORITIES</span><span class="token punctuation">,</span> <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">authorityListToSet</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getOpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="授权服务配置自定义SpringUserAuthenticationConverter"><a href="#授权服务配置自定义SpringUserAuthenticationConverter" class="headerlink" title="授权服务配置自定义SpringUserAuthenticationConverter"></a>授权服务配置自定义SpringUserAuthenticationConverter</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultAccessTokenConverter</span> defaultAccessTokenConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defaultAccessTokenConverter<span class="token punctuation">.</span><span class="token function">setUserTokenConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringUserAuthenticationConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    endpoints            <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置 jdbc TokenStore</span>            <span class="token punctuation">.</span><span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置授权码服务</span>            <span class="token punctuation">.</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span>defaultAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置token转换器</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="资源服务器自定义DefaultAccessTokenConverter"><a href="#资源服务器自定义DefaultAccessTokenConverter" class="headerlink" title="资源服务器自定义DefaultAccessTokenConverter"></a>资源服务器自定义DefaultAccessTokenConverter</h3><p>创建SpringAccessTokenConverter类继承DefaultAccessTokenConverter，重写extractAuthentication方法，读取授权服务中放入的用户相关信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAccessTokenConverter</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultAccessTokenConverter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserAuthenticationConverter</span> userTokenConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultUserAuthenticationConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">OAuth2Authentication</span> <span class="token function">extractAuthentication</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> scope <span class="token operator">=</span> <span class="token function">extractScope</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> user <span class="token operator">=</span> userTokenConverter<span class="token punctuation">.</span><span class="token function">extractAuthentication</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> clientId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">CLIENT_ID</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">CLIENT_ID</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">GRANT_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">GRANT_TYPE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">GRANT_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> resourceIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">AUD</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getAudience</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>                <span class="token operator">:</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">AUTHORITIES</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> roles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">AUTHORITIES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            authorities <span class="token operator">=</span> <span class="token class-name">AuthorityUtils</span><span class="token punctuation">.</span><span class="token function">createAuthorityList</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> extensions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        extensions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        extensions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        extensions<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OAuth2Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2Request</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> clientId<span class="token punctuation">,</span> authorities<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> scope<span class="token punctuation">,</span> resourceIds<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                extensions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OAuth2Authentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">extractScope</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> scope <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token constant">SCOPE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> scopeObj <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">SCOPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scopeObj <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> scopeObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>scopeObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> scopeColl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> scopeObj<span class="token punctuation">;</span>                scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>scopeColl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Preserve ordering</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAudience</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> auds <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">AUD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>auds <span class="token keyword">instanceof</span> <span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> auds<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> auds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="资源服务配置自定义SpringAccessTokenConverter"><a href="#资源服务配置自定义SpringAccessTokenConverter" class="headerlink" title="资源服务配置自定义SpringAccessTokenConverter"></a>资源服务配置自定义SpringAccessTokenConverter</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ResourceServerTokenServices</span> <span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 使用远程服务请求授权服务器校验token,必须指定校验token 的url、client_id，client_secret</span>    <span class="token class-name">RemoteTokenServices</span> tokenServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setCheckTokenEndpointUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8090/oauth/check_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setClientId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setClientSecret</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setAccessTokenConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tokenServices<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建资源服务获取用户信息工具类SpringSecurityUtils"><a href="#创建资源服务获取用户信息工具类SpringSecurityUtils" class="headerlink" title="创建资源服务获取用户信息工具类SpringSecurityUtils"></a>创建资源服务获取用户信息工具类SpringSecurityUtils</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringSecurityUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCurrentUserPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token function">getAuthenticationExtensions</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCurrentUserOpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token function">getAuthenticationExtensions</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCurrentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token function">getAuthenticationExtensions</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Serializable</span> <span class="token function">getAuthenticationExtensions</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OAuth2Authentication</span> auth2Authentication <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OAuth2Authentication</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>auth2Authentication <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> auth2Authentication<span class="token punctuation">.</span><span class="token function">getOAuth2Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="受保护资源获取用户信息"><a href="#受保护资源获取用户信息" class="headerlink" title="受保护资源获取用户信息"></a>受保护资源获取用户信息</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"post order"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"put order"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"delete order"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> userId <span class="token operator">=</span> <span class="token class-name">SpringSecurityUtils</span><span class="token punctuation">.</span><span class="token function">getCurrentUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token class-name">SpringSecurityUtils</span><span class="token punctuation">.</span><span class="token function">getCurrentUserPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> openid <span class="token operator">=</span> <span class="token class-name">SpringSecurityUtils</span><span class="token punctuation">.</span><span class="token function">getCurrentUserOpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"userId:"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">",phone:"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">",openId:"</span> <span class="token operator">+</span> openid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>获取token：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=password&amp;username=user&amp;password=password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"dd62d9d3-75c2-4d25-a5de-056da7d80a56"</span><span class="token punctuation">,</span>  <span class="token property">"token_type"</span><span class="token operator">:</span> <span class="token string">"bearer"</span><span class="token punctuation">,</span>  <span class="token property">"refresh_token"</span><span class="token operator">:</span> <span class="token string">"c612fadc-2df9-4aba-8c39-28d18a63b804"</span><span class="token punctuation">,</span>  <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">2591999</span><span class="token punctuation">,</span>  <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token string">"read write"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求order的get接口：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/orderAuthorization: Bearer dd62d9d3-75c2-4d25-a5de-056da7d80a56<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">userId:1406151407442780160,phone:,openId:Response code: 200; Time: 35ms; Content length: 41 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E5%85%AD%EF%BC%89</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（五）</title>
      <link href="/2021/06/20/spring-security-oauth2/spring-security-oauth2-05/"/>
      <url>/2021/06/20/spring-security-oauth2/spring-security-oauth2-05/</url>
      
        <content type="html"><![CDATA[<h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2><h3 id="选择RBAC模型"><a href="#选择RBAC模型" class="headerlink" title="选择RBAC模型"></a>选择RBAC模型</h3><h4 id="基于角色的访问控制（Role-Based-Access-Control）"><a href="#基于角色的访问控制（Role-Based-Access-Control）" class="headerlink" title="基于角色的访问控制（Role-Based Access Control）"></a>基于角色的访问控制（Role-Based Access Control）</h4><p>RBAC基于角色的访问控制是按角色进行授权，例如：主体的角色为总经理可以查询企业运营报表，查询员工工资信息等，访问控制流程如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>主体<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"总经理角色id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    查询工资<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果查询工资所需要的角色变化为总经理和部门经理，此时就需要修改判断逻辑为“判断用户的角色是否是<br>总经理或部门经理”，修改代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>主体<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"总经理角色id"</span><span class="token punctuation">)</span> <span class="token operator">||</span> 主体<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"部门经理角色id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    查询工资<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>可以发现基于角色的访问控制缺点相当明显，当需要修改角色的权限的时候就需要修改代码才可以，这样相当于写死了，故可扩展性很差。</strong></p><h4 id="基于资源的访问控制（Resource-Based-Access-Control）"><a href="#基于资源的访问控制（Resource-Based-Access-Control）" class="headerlink" title="基于资源的访问控制（Resource-Based Access Control）"></a>基于资源的访问控制（Resource-Based Access Control）</h4><p>基于资源的访问控制是按资源（或权限）进行授权，例如：用户必须具有查询工资权限才可以查询员工工资信息，访问控制流程如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>主体<span class="token punctuation">.</span><span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token string">"查询员工工资信息权限id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    查询工资<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>系统设计时定义好查询工资信息的权限标识，即使查询工资所需要的角色变化为总经理和部门经理也不需要修改<br>授权代码，系统可扩展性强</strong></p><p>所以这里我们采用基于资源的访问控制</p><h3 id="创建用户、权限相关表"><a href="#创建用户、权限相关表" class="headerlink" title="创建用户、权限相关表"></a>创建用户、权限相关表</h3><p>这里选择把权限和资源表合并的方式，至于权限资源表，根据需要适当增加字段，这里加入的前端资源的控制，比如菜单、路由等信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    id       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    phone    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  <span class="token boolean">null</span><span class="token punctuation">,</span>    locked   <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    enabled  <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    open_id  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>  <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span> username <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span> phone <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span> open_id <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>open_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>code<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span> code <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>code<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span> name <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>user_role<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> user_id <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> role_id <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>permission<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>parent_id<span class="token punctuation">`</span></span>     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>code<span class="token punctuation">`</span></span>          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span>          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>resource_type<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'resource type eg 0:main menu 1:child menu 2:function button'</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>route_name<span class="token punctuation">`</span></span>    <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'route name'</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>route_url<span class="token punctuation">`</span></span>     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'route url'</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>component<span class="token punctuation">`</span></span>     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'component'</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>icon<span class="token punctuation">`</span></span>          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'icon'</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span> code <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>code<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span> name <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>role_permission<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>permission_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span>       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> permission_id <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>permission_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> role_id <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预置数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> role <span class="token punctuation">(</span>id<span class="token punctuation">,</span> code<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1406151407442780162'</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'普通用户'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780163'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'管理员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> permission <span class="token punctuation">(</span>id<span class="token punctuation">,</span> parent_id<span class="token punctuation">,</span> code<span class="token punctuation">,</span> name<span class="token punctuation">,</span> resource_type<span class="token punctuation">,</span> route_name<span class="token punctuation">,</span> route_url<span class="token punctuation">,</span> component<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1406153943707496456'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'menu:order'</span><span class="token punctuation">,</span> <span class="token string">'订单管理菜单'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'商品管理'</span><span class="token punctuation">,</span> <span class="token string">'/goods'</span><span class="token punctuation">,</span> <span class="token string">'GoodsList'</span><span class="token punctuation">,</span> <span class="token string">'goods'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496457'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'menu:goods'</span><span class="token punctuation">,</span> <span class="token string">'商品管理菜单'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'商品管理'</span><span class="token punctuation">,</span> <span class="token string">'/order'</span><span class="token punctuation">,</span> <span class="token string">'OrderList'</span><span class="token punctuation">,</span> <span class="token string">'order'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185783369728'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496456'</span><span class="token punctuation">,</span> <span class="token string">'order:add'</span><span class="token punctuation">,</span> <span class="token string">'添加订单'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185783369729'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496456'</span><span class="token punctuation">,</span> <span class="token string">'order:update'</span><span class="token punctuation">,</span> <span class="token string">'更新订单'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185783369730'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496456'</span><span class="token punctuation">,</span> <span class="token string">'order:delete'</span><span class="token punctuation">,</span> <span class="token string">'删除订单'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185783369731'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496456'</span><span class="token punctuation">,</span> <span class="token string">'order:query'</span><span class="token punctuation">,</span> <span class="token string">'查询订单'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185783369732'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496457'</span><span class="token punctuation">,</span> <span class="token string">'goods:add'</span><span class="token punctuation">,</span> <span class="token string">'添加商品'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185783369733'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496457'</span><span class="token punctuation">,</span> <span class="token string">'goods:update'</span><span class="token punctuation">,</span> <span class="token string">'更新商品'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185783369734'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496457'</span><span class="token punctuation">,</span> <span class="token string">'goods:delete'</span><span class="token punctuation">,</span> <span class="token string">'删除商品'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406144185787564032'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496457'</span><span class="token punctuation">,</span> <span class="token string">'goods:query'</span><span class="token punctuation">,</span> <span class="token string">'查询商品'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> role_permission <span class="token punctuation">(</span>id<span class="token punctuation">,</span> permission_id<span class="token punctuation">,</span> role_id<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'1406151407442780167'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496456'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780162'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780168'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496457'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780162'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780169'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369731'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780162'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780170'</span><span class="token punctuation">,</span> <span class="token string">'1406144185787564032'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780162'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780171'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496456'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780172'</span><span class="token punctuation">,</span> <span class="token string">'1406153943707496457'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780173'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369728'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496448'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369729'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496449'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369730'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496450'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369731'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496451'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369732'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496452'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369733'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496453'</span><span class="token punctuation">,</span> <span class="token string">'1406144185783369734'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406153943707496454'</span><span class="token punctuation">,</span> <span class="token string">'1406144185787564032'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> locked<span class="token punctuation">,</span> enabled<span class="token punctuation">,</span> open_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1406151407442780160'</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780161'</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> user_role <span class="token punctuation">(</span>id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> role_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1406151407442780164'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780160'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780162'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780165'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780161'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780162'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token string">'1406151407442780166'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780161'</span><span class="token punctuation">,</span> <span class="token string">'1406151407442780163'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加依赖"><a href="#增加依赖" class="headerlink" title="增加依赖"></a>增加依赖</h3><p>引入mybatis进行数据库CRUD</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并配置mybatis的mapper路径</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mappers/<span class="token important">*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="生成CRUD的代码"><a href="#生成CRUD的代码" class="headerlink" title="生成CRUD的代码"></a>生成CRUD的代码</h3><p>这里通过idea插件EasyCodeMybatisCodeHelper生成CRUD的代码</p><p><img src="/medias/assets/spring-security-oauth2/20210621093428.png"></p><h3 id="自定义UserDetailsService、UserDetails"><a href="#自定义UserDetailsService、UserDetails" class="headerlink" title="自定义UserDetailsService、UserDetails"></a>自定义UserDetailsService、UserDetails</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">GrantedAuthority</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">SpringSecurityCoreVersion</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringUserDetails</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> accountNonExpired<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> accountNonLocked<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> credentialsNonExpired<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SpringUserDetails</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token keyword">boolean</span> enabled<span class="token punctuation">,</span>                             <span class="token keyword">boolean</span> accountNonExpired<span class="token punctuation">,</span> <span class="token keyword">boolean</span> credentialsNonExpired<span class="token punctuation">,</span>                             <span class="token keyword">boolean</span> accountNonLocked<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>password <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>                    <span class="token string">"Cannot pass null or empty values to constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> enabled<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountNonExpired <span class="token operator">=</span> accountNonExpired<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>credentialsNonExpired <span class="token operator">=</span> credentialsNonExpired<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountNonLocked <span class="token operator">=</span> accountNonLocked<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authorities <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span><span class="token function">sortAuthorities</span><span class="token punctuation">(</span>authorities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountNonExpired<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountNonLocked<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> credentialsNonExpired<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> enabled<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">sortAuthorities</span><span class="token punctuation">(</span>            <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>authorities<span class="token punctuation">,</span> <span class="token string">"Cannot pass a null GrantedAuthority collection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Ensure array iteration order is predictable (as per</span>        <span class="token comment">// UserDetails.getAuthorities() contract and SEC-717)</span>        <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> sortedAuthorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">SpringUserDetails<span class="token punctuation">.</span>AuthorityComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GrantedAuthority</span> grantedAuthority <span class="token operator">:</span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>grantedAuthority<span class="token punctuation">,</span>                    <span class="token string">"GrantedAuthority list cannot contain any null elements"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sortedAuthorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>grantedAuthority<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sortedAuthorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AuthorityComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>            <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token class-name">SpringSecurityCoreVersion</span><span class="token punctuation">.</span><span class="token constant">SERIAL_VERSION_UID</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">GrantedAuthority</span> g1<span class="token punctuation">,</span> <span class="token class-name">GrantedAuthority</span> g2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Neither should ever be null as each entry is checked before adding it to</span>            <span class="token comment">// the set.</span>            <span class="token comment">// If the authority is null, it is a custom authority and should precede</span>            <span class="token comment">// others.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>spring</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">RolePermissionDO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UserDO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UserRoleDO</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">PermissionMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">RolePermissionMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserRoleMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">RolePermissionQuery</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">UserRoleQuery</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>authority<span class="token punctuation">.</span></span><span class="token class-name">SimpleGrantedAuthority</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UsernameNotFoundException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringUserDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserRoleMapper</span> userRoleMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RolePermissionMapper</span> rolePermissionMapper<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PermissionMapper</span> permissionMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserRoleQuery</span> userRoleQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRoleQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRoleQuery<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roleIds <span class="token operator">=</span> userRoleMapper<span class="token punctuation">.</span><span class="token function">selectByQuery</span><span class="token punctuation">(</span>userRoleQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">UserRoleDO</span><span class="token operator">::</span><span class="token function">getRoleId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>roleIds<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">RolePermissionQuery</span> rolePermissionQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RolePermissionQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rolePermissionQuery<span class="token punctuation">.</span><span class="token function">setRoleIds</span><span class="token punctuation">(</span>roleIds<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissionIds <span class="token operator">=</span> rolePermissionMapper<span class="token punctuation">.</span><span class="token function">selectByQuery</span><span class="token punctuation">(</span>rolePermissionQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">RolePermissionDO</span><span class="token operator">::</span><span class="token function">getPermissionId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            authorities <span class="token operator">=</span> permissionMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>permissionIds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringUserDetails</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">!</span>userDO<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最重要的是实现<strong>loadUserByUsername</strong>方法加载用户、权限信息。</p><h3 id="增加PasswordEncoder"><a href="#增加PasswordEncoder" class="headerlink" title="增加PasswordEncoder"></a>增加PasswordEncoder</h3><p>这里存储的是明文密码，所以使用NoOpPasswordEncoder</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">NoOpPasswordEncoder</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置资源服务器"><a href="#配置资源服务器" class="headerlink" title="配置资源服务器"></a>配置资源服务器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    http            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string">"/api/order"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"order:query"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token string">"/api/order"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"order:add"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">,</span> <span class="token string">"/api/order"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"order:update"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">,</span> <span class="token string">"/api/order"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"order:delete"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string">"/api/goods"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"goods:query"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token string">"/api/goods"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"goods:add"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">,</span> <span class="token string">"/api/goods"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"goods:update"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token punctuation">,</span> <span class="token string">"/api/goods"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"goods:delete"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试四种授权模式"><a href="#测试四种授权模式" class="headerlink" title="测试四种授权模式"></a>测试四种授权模式</h3><h4 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h4><p><em>注意：POST请求需要在请求头带上Authorization参数，参数格式固定为Base64({client_id}:{client_secret})。POST请求带参的Content-Type是application/x-www-form-urlencoded。这里使用的是IDEA的http client工具测试</em></p><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/token?grant_type=client_credentialsAccept: application/jsonAuthorization: Basic b3JkZXI6c2VjcmV0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "d118fe4e-359a-44f0-aea7-12068b9c352d",  "token_type": "bearer",  "expires_in": 2591999,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=password&amp;username=admin&amp;password=password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "08b2b288-d0a7-48cf-a94a-66e588bb818e",  "token_type": "bearer",  "refresh_token": "bcb26967-736e-4b74-af74-3da027921f87",  "expires_in": 2445744,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=code&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/?code=7C9ton<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用响应连接中的code获取token</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=authorization_code&amp;client_id=order&amp;client_secret=secret&amp;redirect_uri=http://www.baidu.com&amp;code=7C9ton<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "08b2b288-d0a7-48cf-a94a-66e588bb818e",  "token_type": "bearer",  "refresh_token": "bcb26967-736e-4b74-af74-3da027921f87",  "expires_in": 2445675,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简易模式"><a href="#简易模式" class="headerlink" title="简易模式"></a>简易模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=token&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/#access_token=08b2b288-d0a7-48cf-a94a-66e588bb818e&amp;token_type=bearer&amp;expires_in=2445656&amp;scope=read%20write<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/oauth/check_token?token=7f779d38-0629-4df1-84e0-6fa6a3da64cd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">{  "aud": [    "order"  ],  "user_name": "admin",  "scope": [    "read",    "write"  ],  "active": true,  "exp": 1626686213,  "authorities": [    "goods:delete",    "order:query",    "order:delete",    "goods:query",    "order:add",    "order:update",    "goods:update",    "menu:order",    "menu:goods",    "goods:add"  ],  "client_id": "order"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="刷新token"><a href="#刷新token" class="headerlink" title="刷新token"></a>刷新token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=refresh_token&amp;refresh_token=f32fe1fa-a5c4-4bdd-b325-8130cb39430e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "0a64f791-af0a-481e-8f43-935336bc3c62",  "token_type": "bearer",  "refresh_token": "bcb26967-736e-4b74-af74-3da027921f87",  "expires_in": 2591999,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试受保护资源"><a href="#测试受保护资源" class="headerlink" title="测试受保护资源"></a>测试受保护资源</h3><p>不带token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/order<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">{  "error": "unauthorized",  "error_description": "Full authentication is required to access this resource"}Response code: 401; Time: 40ms; Content length: 102 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带admin用户的登录后的token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/orderAuthorization: Bearer 0a64f791-af0a-481e-8f43-935336bc3c62<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">get orderResponse code: 200; Time: 39ms; Content length: 9 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>带user用户的登录后的token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/orderAuthorization: Bearer ae7897bd-c7d8-42aa-85a3-cb7f8c4ee5ac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">get orderResponse code: 200; Time: 44ms; Content length: 9 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不带token请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8092/api/order<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">{  "error": "unauthorized",  "error_description": "Full authentication is required to access this resource"}Response code: 401; Time: 40ms; Content length: 102 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带admin用户的登录后的token请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8092/api/orderAuthorization: Bearer 0a64f791-af0a-481e-8f43-935336bc3c62<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">post orderResponse code: 200; Time: 42ms; Content length: 10 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>带user用户的登录后的token请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8092/api/orderAuthorization: Bearer ae7897bd-c7d8-42aa-85a3-cb7f8c4ee5ac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{  "error": "access_denied",  "error_description": "Access is denied"}Response code: 403; Time: 101ms; Content length: 64 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E4%BA%94%EF%BC%89</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（四）</title>
      <link href="/2021/06/19/spring-security-oauth2/spring-security-oauth2-04/"/>
      <url>/2021/06/19/spring-security-oauth2/spring-security-oauth2-04/</url>
      
        <content type="html"><![CDATA[<h2 id="客户端信息和授权码持久化"><a href="#客户端信息和授权码持久化" class="headerlink" title="客户端信息和授权码持久化"></a>客户端信息和授权码持久化</h2><h3 id="添加jdbc、mysql驱动依赖"><a href="#添加jdbc、mysql驱动依赖" class="headerlink" title="添加jdbc、mysql驱动依赖"></a>添加jdbc、mysql驱动依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>sql脚本从github源码中拷贝的<a href="https://">https://github.com/spring-projects/spring-security-oauth/blob/main/tests/annotation/jdbc/src/main/resources/schema.sql</a></p><p>稍微修改一下符合mysql的语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> user_center<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">database</span> user_center <span class="token keyword">character</span> <span class="token keyword">set</span> utf8mb4 <span class="token keyword">collate</span> utf8mb4_unicode_ci<span class="token punctuation">;</span><span class="token keyword">use</span> user_center<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_client_details<span class="token punctuation">(</span>    client_id               <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    resource_ids            <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    client_secret           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    scope                   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    authorized_grant_types  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    web_server_redirect_uri <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    authorities             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    access_token_validity   <span class="token keyword">int</span>          <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    refresh_token_validity  <span class="token keyword">int</span>          <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    additional_information  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    autoapprove             <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_client_token<span class="token punctuation">(</span>    authentication_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    token_id          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    token             <span class="token keyword">blob</span><span class="token punctuation">,</span>    user_name         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    client_id         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_access_token<span class="token punctuation">(</span>    authentication_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    token_id          <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    token             <span class="token keyword">blob</span><span class="token punctuation">,</span>    user_name         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    client_id         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    authentication    <span class="token keyword">blob</span><span class="token punctuation">,</span>    refresh_token     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> token_id <span class="token punctuation">(</span>token_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> user_name <span class="token punctuation">(</span>user_name<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> client_id <span class="token punctuation">(</span>client_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> refresh_token <span class="token punctuation">(</span>refresh_token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_refresh_token<span class="token punctuation">(</span>    token_id       <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    token          <span class="token keyword">blob</span><span class="token punctuation">,</span>    authentication <span class="token keyword">blob</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_code<span class="token punctuation">(</span>    code           <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    authentication <span class="token keyword">blob</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> oauth_client_details <span class="token punctuation">(</span>client_id<span class="token punctuation">,</span> resource_ids<span class="token punctuation">,</span> client_secret<span class="token punctuation">,</span> scope<span class="token punctuation">,</span> authorized_grant_types<span class="token punctuation">,</span>                                  web_server_redirect_uri<span class="token punctuation">,</span> authorities<span class="token punctuation">,</span> access_token_validity<span class="token punctuation">,</span> refresh_token_validity<span class="token punctuation">,</span>                                  additional_information<span class="token punctuation">,</span> autoapprove<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'order'</span><span class="token punctuation">,</span> <span class="token string">'order'</span><span class="token punctuation">,</span> <span class="token string">'{noop}secret'</span><span class="token punctuation">,</span> <span class="token string">'read,write'</span><span class="token punctuation">,</span>        <span class="token string">'authorization_code,client_credentials,password,implicit,refresh_token'</span><span class="token punctuation">,</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'ADMIN,USER'</span><span class="token punctuation">,</span> <span class="token number">2592000</span><span class="token punctuation">,</span>        <span class="token number">15552000</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/user_center<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;autoReconnect=true&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span>    <span class="token key atrule">platform</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置授权服务"><a href="#配置授权服务" class="headerlink" title="配置授权服务"></a>配置授权服务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        clients<span class="token punctuation">.</span><span class="token function">jdbc</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>        endpoints                <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 设置 jdbc TokenStore</span>                <span class="token punctuation">.</span><span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置授权码服务</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTokenStore</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthorizationCodeServices</span> <span class="token function">authorizationCodeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcAuthorizationCodeServices</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="置资源服务"><a href="#置资源服务" class="headerlink" title="置资源服务"></a>置资源服务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">ResourceServerTokenServices</span> <span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 使用远程服务请求授权服务器校验token,必须指定校验token 的url、client_id，client_secret</span>    <span class="token class-name">RemoteTokenServices</span> tokenServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setCheckTokenEndpointUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8090/oauth/check_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setClientId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tokenServices<span class="token punctuation">.</span><span class="token function">setClientSecret</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tokenServices<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试授权服务"><a href="#测试授权服务" class="headerlink" title="测试授权服务"></a>测试授权服务</h3><h4 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h4><p><em>注意：POST请求需要在请求头带上Authorization参数，参数格式固定为Base64({client_id}:{client_secret})。POST请求带参的Content-Type是application/x-www-form-urlencoded。这里使用的是IDEA的http client工具测试</em></p><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/token?grant_type=client_credentialsAccept: application/jsonAuthorization: Basic b3JkZXI6c2VjcmV0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "2ad17022-7d2e-44b6-9fd4-57d17a2a9568",  "token_type": "bearer",  "expires_in": 2589707,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库中生成了相关记录</p><p><img src="/medias/assets/spring-security-oauth2/20210618170013.png"></p><p><img src="/medias/assets/spring-security-oauth2/20210618170205.png"></p><h4 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=password&amp;username=admin&amp;password=password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "4e4285e5-2673-42eb-858d-9c299aaae9ce",  "token_type": "bearer",  "refresh_token": "eba78cf6-2ff4-49a6-a653-b72f3c95d6ae",  "expires_in": 2589453,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=code&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/?code=9gqy0y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用响应连接中的code获取token</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=authorization_code&amp;client_id=order&amp;client_secret=secret&amp;redirect_uri=http://www.baidu.com&amp;code=kY8L5A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "4e4285e5-2673-42eb-858d-9c299aaae9ce",  "token_type": "bearer",  "refresh_token": "eba78cf6-2ff4-49a6-a653-b72f3c95d6ae",  "expires_in": 2589355,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用后授权码被删除</p><p><img src="/medias/assets/spring-security-oauth2/20210618165609.png"></p><h4 id="简易模式"><a href="#简易模式" class="headerlink" title="简易模式"></a>简易模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=token&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/#access_token=54c7973e-8ae0-4dee-85bb-e2f44c649fe8&amp;token_type=bearer&amp;expires_in=2591760&amp;scope=read%20write<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/check_token?token=7f779d38-0629-4df1-84e0-6fa6a3da64cd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"aud"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"order"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"user_name"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"read"</span><span class="token punctuation">,</span>    <span class="token string">"write"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"active"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1626598954</span><span class="token punctuation">,</span>  <span class="token property">"authorities"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"ROLE_ADMIN"</span><span class="token punctuation">,</span>    <span class="token string">"ROLE_USER"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">"order"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="刷新token"><a href="#刷新token" class="headerlink" title="刷新token"></a>刷新token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=refresh_token&amp;refresh_token=fab9886a-ef2d-4506-9501-d379103090ca<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "c8e0cf74-b5f2-46f4-9c8d-21fd4d74e36e",  "token_type": "bearer",  "refresh_token": "fab9886a-ef2d-4506-9501-d379103090ca",  "expires_in": 2591999,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试资源服务</p><p>不带token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/order<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">{  "error": "unauthorized",  "error_description": "Full authentication is required to access this resource"}Response code: 401; Time: 40ms; Content length: 102 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/orderAuthorization: Bearer b8a2a416-4e67-4aeb-b471-00256c8a5779<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">get orderResponse code: 200; Time: 139ms; Content length: 9 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E5%9B%9B%EF%BC%89</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（三）</title>
      <link href="/2021/06/18/spring-security-oauth2/spring-security-oauth2-03/"/>
      <url>/2021/06/18/spring-security-oauth2/spring-security-oauth2-03/</url>
      
        <content type="html"><![CDATA[<h2 id="使用JWT令牌"><a href="#使用JWT令牌" class="headerlink" title="使用JWT令牌"></a>使用JWT令牌</h2><h3 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h3><p>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于在通信双方传递JSON对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。</p><h3 id="JWT优缺点"><a href="#JWT优缺点" class="headerlink" title="JWT优缺点"></a>JWT优缺点</h3><ul><li>JWT基于JSON,非常方便解析</li><li>可以在令牌中自定义丰富内容，易扩展</li><li>通过非对称加密算法以及数字签名技术，防止JWT令牌被篡改，安全性高</li><li>资源服务使用JWT可不依赖认证服务就能完成授权，减少远程调用校验令牌的网络开销，提升性能</li><li>JWT的无状态，有助于增强系统的可用性和可伸缩性</li><li>一般不存在cookie中，有效避免了CSRF攻击</li><li>适合移动端（有些不支持cookie的）</li><li>对单点登录友好</li></ul><h3 id="JWT缺点"><a href="#JWT缺点" class="headerlink" title="JWT缺点"></a>JWT缺点</h3><ul><li>JWT令牌很长，占用存储空间占用大</li><li>无法在服务器注销，有被劫持的风险</li><li>JWT验证签名耗CPU</li></ul><h3 id="如何使用JWT"><a href="#如何使用JWT" class="headerlink" title="如何使用JWT"></a>如何使用JWT</h3><h4 id="配置JWT令牌服务"><a href="#配置JWT令牌服务" class="headerlink" title="配置JWT令牌服务"></a>配置JWT令牌服务</h4><p>授权服务配置类中<strong>AuthorizationServerConfig</strong>配置JWT令牌服务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    endpoints            <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 配置令牌管理为JWT</span>            <span class="token punctuation">.</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置令牌转换器（授权信息&lt;-&gt;令牌双向转换）</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对称秘钥，资源服务器使用该秘钥来验证</span>    converter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"test123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> converter<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置资源服务器令牌认证"><a href="#配置资源服务器令牌认证" class="headerlink" title="配置资源服务器令牌认证"></a>配置资源服务器令牌认证</h4><p>资源服务器配置类<strong>ResourceServerConfig</strong>配置JWT令牌认证</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">accessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对称秘钥，资源服务器使用该秘钥来验证</span>    converter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"test123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> converter<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试授权服务"><a href="#测试授权服务" class="headerlink" title="测试授权服务"></a>测试授权服务</h3><h4 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h4><p><em>注意：POST请求需要在请求头带上Authorization参数，参数格式固定为Base64({client_id}:{client_secret})。POST请求带参的Content-Type是application/x-www-form-urlencoded。这里使用的是IDEA的http client工具测试</em></p><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/token?grant_type=client_credentialsAccept: application/jsonAuthorization: Basic b3JkZXI6c2VjcmV0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJyZWFkIiwid3JpdGUiXSwiZXhwIjoxNjI0MDMwMTUxLCJqdGkiOiJmMDcyNjZmZi1kMTJiLTRlODMtOGE4MS0yYmUyNjdhOTEwNWIiLCJjbGllbnRfaWQiOiJvcmRlciJ9.kX4YcgrKH_XEDmeXUs_2XufJ-NbjNeUX2FVyi7CPfgI",  "token_type": "bearer",  "expires_in": 43199,  "scope": "read write",  "jti": "f07266ff-d12b-4e83-8a81-2be267a9105b"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=password&amp;username=admin&amp;password=password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjQwMzAyNDYsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVVNFUiJdLCJqdGkiOiJhNzdiODM2YS03ZTBhLTRjNzctYmJjNC01ZGM5Y2QyZjViNTQiLCJjbGllbnRfaWQiOiJvcmRlciIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdfQ.rF1b4K8S8R276GXDfjocC4zGvTP5bNjVLkFb_8vmZrg",  "token_type": "bearer",  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdLCJhdGkiOiJhNzdiODM2YS03ZTBhLTRjNzctYmJjNC01ZGM5Y2QyZjViNTQiLCJleHAiOjE2MjY1NzkwNDYsImF1dGhvcml0aWVzIjpbIlJPTEVfQURNSU4iLCJST0xFX1VTRVIiXSwianRpIjoiNTQxZTJiYTAtMTkxOC00ZTg2LTljNDItYzA2NWI1ZDZiMTk4IiwiY2xpZW50X2lkIjoib3JkZXIifQ.n6KTMcXShbcVdgllGFGZxHSALrrx-xVnOgFSGpcrI-I",  "expires_in": 43199,  "scope": "read write",  "jti": "a77b836a-7e0a-4c77-bbc4-5dc9cd2f5b54"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=code&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/?code=1lZbxO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用响应连接中的code获取token</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=authorization_code&amp;client_id=order&amp;client_secret=secret&amp;redirect_uri=http://www.baidu.com&amp;code=1lZbxO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjQwMzA1NzAsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVVNFUiJdLCJqdGkiOiI4ZjU0NTBhMy1mZGU5LTQwZmEtYjQ4Zi0wNmRkNDQ0NzRjN2EiLCJjbGllbnRfaWQiOiJvcmRlciIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdfQ.39vnXeQwIekYdDXUXUKKIHKcJ71Regm3jtXxfYvIVKQ",  "token_type": "bearer",  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdLCJhdGkiOiI4ZjU0NTBhMy1mZGU5LTQwZmEtYjQ4Zi0wNmRkNDQ0NzRjN2EiLCJleHAiOjE2MjY1NzkzNzAsImF1dGhvcml0aWVzIjpbIlJPTEVfQURNSU4iLCJST0xFX1VTRVIiXSwianRpIjoiZDdkYjdhNzEtYWJkOS00ZjM0LWE4ZmMtNWJmMmM4MzI3MTgxIiwiY2xpZW50X2lkIjoib3JkZXIifQ.d2LCYsCLBjDAzXCHyWPmwu9xaLjXURT-Tj6gVSuKEIE",  "expires_in": 43199,  "scope": "read write",  "jti": "8f5450a3-fde9-40fa-b48f-06dd44474c7a"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简易模式"><a href="#简易模式" class="headerlink" title="简易模式"></a>简易模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=token&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/#access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjQwMzA2MzEsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVVNFUiJdLCJqdGkiOiJiZDVhODRiNi0wMzNiLTQxYjUtYjQxMC03MmMwYzcyYzgzNDMiLCJjbGllbnRfaWQiOiJvcmRlciIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdfQ.nnNiGaxCq9bJHiJY-sSWAMpGz4xR9XT6WDol0dHxbD8&amp;token_type=bearer&amp;expires_in=43200&amp;scope=read%20write&amp;jti=bd5a84b6-033b-41b5-b410-72c0c72c8343<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/check_token?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjQwMjcxMjksInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVVNFUiJdLCJqdGkiOiJiZGExZTdlOC1iNGE1LTRhY2MtODQwNS0yYzkzMmEwNDkzZjYiLCJjbGllbnRfaWQiOiJvcmRlciIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdfQ.LCnyavxv7hhsTd1pGG0_fVYEV5oeYZg0mKKuiNemSfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"user_name"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>  <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"read"</span><span class="token punctuation">,</span>    <span class="token string">"write"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"active"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"exp"</span><span class="token operator">:</span> <span class="token number">1624027129</span><span class="token punctuation">,</span>  <span class="token property">"authorities"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"ROLE_ADMIN"</span><span class="token punctuation">,</span>    <span class="token string">"ROLE_USER"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"jti"</span><span class="token operator">:</span> <span class="token string">"bda1e7e8-b4a5-4acc-8405-2c932a0493f6"</span><span class="token punctuation">,</span>  <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">"order"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="刷新token"><a href="#刷新token" class="headerlink" title="刷新token"></a>刷新token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=refresh_token&amp;refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdLCJhdGkiOiI4ZjU0NTBhMy1mZGU5LTQwZmEtYjQ4Zi0wNmRkNDQ0NzRjN2EiLCJleHAiOjE2MjY1NzkzNzAsImF1dGhvcml0aWVzIjpbIlJPTEVfQURNSU4iLCJST0xFX1VTRVIiXSwianRpIjoiZDdkYjdhNzEtYWJkOS00ZjM0LWE4ZmMtNWJmMmM4MzI3MTgxIiwiY2xpZW50X2lkIjoib3JkZXIifQ.d2LCYsCLBjDAzXCHyWPmwu9xaLjXURT-Tj6gVSuKEIE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MjQwMzA4MTIsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiIsIlJPTEVfVVNFUiJdLCJqdGkiOiJmOWU5MzdmZC1lNDhiLTQ1ZDEtOWIwMy1iOTkzNWM5ZjEyMzUiLCJjbGllbnRfaWQiOiJvcmRlciIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdfQ.YRWaDwSo3SMrjANYJ3vLpqv8oaDuhiEsHnvn6sW2FEM",  "token_type": "bearer",  "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInJlYWQiLCJ3cml0ZSJdLCJhdGkiOiJmOWU5MzdmZC1lNDhiLTQ1ZDEtOWIwMy1iOTkzNWM5ZjEyMzUiLCJleHAiOjE2MjY1NzkzNzAsImF1dGhvcml0aWVzIjpbIlJPTEVfQURNSU4iLCJST0xFX1VTRVIiXSwianRpIjoiZDdkYjdhNzEtYWJkOS00ZjM0LWE4ZmMtNWJmMmM4MzI3MTgxIiwiY2xpZW50X2lkIjoib3JkZXIifQ.x6032Z5h72c5cqxN53too6bA96i1OuaVdtg5by-_ek4",  "expires_in": 43200,  "scope": "read write",  "jti": "f9e937fd-e48b-45d1-9b03-b9935c9f1235"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试资源服务"><a href="#测试资源服务" class="headerlink" title="测试资源服务"></a>测试资源服务</h3><p>不带token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/order<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">{  "error": "unauthorized",  "error_description": "Full authentication is required to access this resource"}Response code: 401; Time: 40ms; Content length: 102 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/orderAuthorization: Bearer b8a2a416-4e67-4aeb-b471-00256c8a5779<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">get orderResponse code: 200; Time: 139ms; Content length: 9 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（二）</title>
      <link href="/2021/06/17/spring-security-oauth2/spring-security-oauth2-02/"/>
      <url>/2021/06/17/spring-security-oauth2/spring-security-oauth2-02/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建资源服务"><a href="#搭建资源服务" class="headerlink" title="搭建资源服务"></a>搭建资源服务</h2><h3 id="创建资源服务应用"><a href="#创建资源服务应用" class="headerlink" title="创建资源服务应用"></a>创建资源服务应用</h3><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目结构</p><p><img src="/medias/assets/spring-security-oauth2/20210617174356.png"></p><h3 id="资源服务配置"><a href="#资源服务配置" class="headerlink" title="资源服务配置"></a>资源服务配置</h3><p>**@EnableResourceServer **注解到一个 @Configuration 配置类上，并且必须使用 ResourceServerConfigurer 这个配置对象来进行配置（可以选择继承自 ResourceServerConfigurerAdapter 然后覆写其中的方法，参数就是这个对象的实例），下面是一些可以配置的属性：</p><p><strong>ResourceServerSecurityConfigurer</strong>中主要包括：</p><ul><li>tokenServices：ResourceServerTokenServices 类的实例，用来实现令牌服务</li><li>tokenStore：TokenStore类的实例，指定令牌如何访问，与tokenServices配置可选</li><li>resourceId：这个资源服务的ID，这个属性是可选的，但是推荐设置并在授权服务中进行验证。</li><li>其他的拓展属性例如 tokenExtractor 令牌提取器用来提取请求中的令牌</li></ul><p><strong>HttpSecurity</strong>配置这个与Spring Security类似：</p><ul><li>请求匹配器，用来设置需要进行保护的资源路径，默认的情况下是保护资源服务的全部路径</li><li>通过http.authorizeRequests()来设置受保护资源的访问规则</li><li>其他的自定义权限保护规则通过 HttpSecurity 来进行配置</li></ul><p><strong>@EnableResourceServer</strong> 注解自动增加了一个类型为 OAuth2AuthenticationProcessingFilter 的过滤器链</p><h3 id="配置令牌验证"><a href="#配置令牌验证" class="headerlink" title="配置令牌验证"></a>配置令牌验证</h3><p><strong>ResourceServerTokenServices</strong> 是组成授权服务的另一半，如果授权服务和资源服务在同一个应用程序上的<br>话，你可以使用 <strong>DefaultTokenServices</strong> ，这样的话，你就不用考虑关于实现所有必要的接口的一致性问题。如果资源服务器是分离开的，那么你就必须要确保能够有匹配授权服务提供的 ResourceServerTokenServices，它知道如何对令牌进行解码。</p><ul><li>** DefaultTokenServices** 资源服务器本地配置令牌存储、解码、解析方式</li><li>**RemoteTokenServices **资源服务器通过 HTTP 请求来解码令牌，每次都请求授权服务器端点 /oauth/check_token进行验证。所以授权服务要把 /oauth/check_token 端点暴露出去</li></ul><p>这里资源服务是独立的应用，则具体配置代码如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RESOURCE_ID</span> <span class="token operator">=</span> <span class="token string">"order"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TokenStore</span> tokenStore<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ResourceServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        security                <span class="token punctuation">.</span><span class="token function">resourceId</span><span class="token punctuation">(</span><span class="token constant">RESOURCE_ID</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokenStore<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token string">"/api/order/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/api/order/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/api/goods/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token constant">STATELESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ResourceServerTokenServices</span> <span class="token function">tokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用远程服务请求授权服务器校验token,必须指定校验token 的url、client_id，client_secret</span>        <span class="token class-name">RemoteTokenServices</span> tokenServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setCheckTokenEndpointUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8090/oauth/check_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setClientId</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setClientSecret</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tokenServices<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建受保护资源"><a href="#创建受保护资源" class="headerlink" title="创建受保护资源"></a>创建受保护资源</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"post order"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"put order"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"delete order"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"get order"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"api/goods"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('ADMIN')"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"post goods"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('ADMIN')"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"put goods"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('ADMIN')"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"delete goods"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('USER')"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"get goods"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>不带token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/order<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">{  "error": "unauthorized",  "error_description": "Full authentication is required to access this resource"}Response code: 401; Time: 40ms; Content length: 102 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带token请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8092/api/orderAuthorization: Bearer b8a2a416-4e67-4aeb-b471-00256c8a5779<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">get orderResponse code: 200; Time: 39ms; Content length: 9 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E4%B8%89%EF%BC%89</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零搭建spring security oauth2认证授权体系（一）</title>
      <link href="/2021/06/16/spring-security-oauth2/spring-security-oauth2-01/"/>
      <url>/2021/06/16/spring-security-oauth2/spring-security-oauth2-01/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建授权服务"><a href="#搭建授权服务" class="headerlink" title="搭建授权服务"></a>搭建授权服务</h2><h3 id="创建授权服务应用"><a href="#创建授权服务应用" class="headerlink" title="创建授权服务应用"></a>创建授权服务应用</h3><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-oauth2-resource-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目结构</p><p><img src="/medias/assets/spring-security-oauth2/20210617174356.png"></p><h3 id="授权服务配置"><a href="#授权服务配置" class="headerlink" title="授权服务配置"></a>授权服务配置</h3><p>创建授权服务器配置类AuthorizationServerConfig进行Oauth2授权服务器配置，该类继承自AuthorizationServerConfigurerAdapter，并使用@EnableAuthorizationServer注解启用授权服务器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>  <span class="token comment">// 省略......</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">AuthorizationServerConfigurer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>AuthorizationServerConfigurerAdapter</strong>需要配置上面的几个类，这几个类是由Spring创建的独立配置对象，它们会被Spring传入AuthorizationServerConfigurerAdapter中。</p><p><strong>AuthorizationServerSecurityConfigurer</strong>：用来配置token的访问端点和token服务。</p><p><strong>ClientDetailsServiceConfigurer</strong>：配置客户端详情服务ClientDetailsService，客户端详情信息在这里初始化，可以写死或者通过数据库获取。ClientDetailsService负责查找ClientDetails。ClientDetailsService是个接口，默认提供有两个实现类InMemoryClientDetailsService和JdbcClientDetailsService。<br>ClientDetails包含属性有</p><ul><li>clientId：（必须的）用来标识客户的Id</li><li>secret：（需要值得信任的客户端）客户端安全码</li><li>scope：用来限制客户端的访问范围，如果为空（默认）的话，那么客户端拥有全部的访问范围</li><li>authorizedGrantTypes：此客户端可以使用的授权类型，默认为空</li><li>authorities：此客户端可以使用的权限（基于Spring Security authorities）</li></ul><p><strong>AuthorizationServerEndpointsConfigurer</strong>：用来配置token端点安全约束。</p><h3 id="配置客户端详情"><a href="#配置客户端详情" class="headerlink" title="配置客户端详情"></a>配置客户端详情</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    clients<span class="token punctuation">.</span><span class="token function">inMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">"authorization_code"</span><span class="token punctuation">,</span> <span class="token string">"client_credentials"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"implicit"</span><span class="token punctuation">,</span> <span class="token string">"refresh_token"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token string">"write"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token string">"{noop}secret"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">autoApprove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">redirectUris</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用内存存储的方式配置客户端详情</p><h3 id="配置令牌管理"><a href="#配置令牌管理" class="headerlink" title="配置令牌管理"></a>配置令牌管理</h3><p>AuthorizationServerTokenServices接口定义了一些操作使得你可以对令牌进行一些必要的管理，令牌可以被用来加载身份信息，里面包含了这个令牌的相关权限。自己可以创建 AuthorizationServerTokenServices 这个接口的实现，则需要继承 DefaultTokenServices 这个类，里面包含了一些有用实现，你可以使用它来修改令牌的格式和令牌的存储。默认的，当它尝试创建一个令牌的时候，是使用随机值来进行填充的，除了持久化令牌是委托一个 TokenStore 接口来实现以外，这个类几乎帮你做了所有的事情。并且 TokenStore 这个接口有一个默认的实现，它就是 InMemoryTokenStore ，如其命名，所有的令牌是被保存在了内存中。除了使用这个类以外，你还可以使用一些其他的预定义实现，下面有几个版本，它们都实现了TokenStore接口：</p><ul><li><em>InMemoryTokenStore</em>：这个版本的实现是被默认采用的，它可以完美的工作在单服务器上（即访问并发量压力不大的情况下，并且它在失败的时候不会进行备份），大多数的项目都可以使用这个版本的实现来进行尝试，你可以在开发的时候使用它来进行管理，因为不会被保存到磁盘中，所以更易于调试</li><li><em>JdbcTokenStore</em>：这是一个基于JDBC的实现版本，令牌会被保存进关系型数据库。使用这个版本的实现时，你可以在不同的服务器之间共享令牌信息，使用这个版本的时候请注意添加”spring-jdbc”依赖</li><li><em>JwtTokenStore</em>：这个版本的全称是 JSON Web Token（JWT），它可以把令牌相关的数据进行编码（因此对于后端服务来说，它不需要进行存储，这将是一个重大优势），但是它有一个缺点，那就是撤销一个已经授权令牌将会非常困难，所以它通常用来处理一个生命周期较短的令牌以及撤销刷新令牌（refresh_token）。另外一个缺点就是这个令牌占用的空间会比较大，如果你加入了比较多用户凭证信息。JwtTokenStore 不会保存任何数据，但是它在转换令牌值以及授权信息方面与 DefaultTokenServices 所扮演的角色是一样的</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用InMemoryTokenStore生成普通的token</p><h3 id="配置令牌访问端点"><a href="#配置令牌访问端点" class="headerlink" title="配置令牌访问端点"></a>配置令牌访问端点</h3><p>框架默认端点有以下几个</p><ul><li>/oauth/authorize：授权端点。</li><li>/oauth/token：令牌端点。</li><li>/oauth/confirm_access：用户确认授权提交端点。</li><li>/oauth/error：授权服务错误信息端点。</li><li>/oauth/check_token：用于资源服务访问的令牌解析端点。</li><li>/oauth/token_key：提供公有密匙的端点，如果你使用JWT令牌的话。</li></ul><p>可以对默认端点URL进行修改，比如通过pathMapping(“/oauth/token”, “/api/oauth/token”)就可以把/oauth/token修改为/api/oauth/token。这里使用不进行修改默认即可</p><h3 id="配置令牌端点安全约束"><a href="#配置令牌端点安全约束" class="headerlink" title="配置令牌端点安全约束"></a>配置令牌端点安全约束</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    security            <span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>tokenkey这个endpoint当使用JwtToken且使用非对称加密时，资源服务用于获取公钥，所以这个endpoint也开放</li><li>checkToken这个endpoint开放</li><li>allowFormAuthenticationForClients表示允许表单认证</li></ul><p>这里开放/oauth/check_token、/oauth/token_key两个端点，并允许表单认证</p><h3 id="WEB安全配置"><a href="#WEB安全配置" class="headerlink" title="WEB安全配置"></a>WEB安全配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最终配置如下"><a href="#最终配置如下" class="headerlink" title="最终配置如下"></a>最终配置如下</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServerConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        security                <span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        clients<span class="token punctuation">.</span><span class="token function">inMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span><span class="token string">"client"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span><span class="token string">"authorization_code"</span><span class="token punctuation">,</span> <span class="token string">"client_credentials"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"implicit"</span><span class="token punctuation">,</span> <span class="token string">"refresh_token"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span><span class="token string">"{noop}secret"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">autoApprove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">redirectUris</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        endpoints                <span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authenticationManager<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService<span class="token punctuation">)</span> <span class="token comment">// 使用刷新token必须配置</span>                <span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">User<span class="token punctuation">.</span>UserBuilder</span> users <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InMemoryUserDetailsManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">,</span> <span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试四种授权模式"><a href="#测试四种授权模式" class="headerlink" title="测试四种授权模式"></a>测试四种授权模式</h3><h4 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h4><p><em>注意：POST请求需要在请求头带上Authorization参数，参数格式固定为Base64({client_id}:{client_secret})。POST请求带参的Content-Type是application/x-www-form-urlencoded。这里使用的是IDEA的http client工具测试</em></p><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/token?grant_type=client_credentialsAccept: application/jsonAuthorization: Basic b3JkZXI6c2VjcmV0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "1f7c97f2-c048-4425-8463-244be95b2ee1",  "token_type": "bearer",  "expires_in": 42496,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=password&amp;username=admin&amp;password=password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "500ac853-aa32-4415-b7e8-ee91c410652c",  "token_type": "bearer",  "refresh_token": "c36079e9-72ee-46a0-a629-82da565062d7",  "expires_in": 42099,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=code&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/?code=kY8L5A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用响应连接中的code获取token</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=authorization_code&amp;client_id=order&amp;client_secret=secret&amp;redirect_uri=http://www.baidu.com&amp;code=kY8L5A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "500ac853-aa32-4415-b7e8-ee91c410652c",  "token_type": "bearer",  "refresh_token": "c36079e9-72ee-46a0-a629-82da565062d7",  "expires_in": 41631,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简易模式"><a href="#简易模式" class="headerlink" title="简易模式"></a>简易模式</h4><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/authorize?client_id=order&amp;response_type=token&amp;grant_type=authorization_code&amp;redirect_uri=http://www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">https://www.baidu.com/#access_token=500ac853-aa32-4415-b7e8-ee91c410652c&amp;token_type=bearer&amp;expires_in=41575&amp;scope=read%20write<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">GET http://localhost:8090/oauth/check_token?token=7f779d38-0629-4df1-84e0-6fa6a3da64cd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-none"><code class="language-none">{  "active": true,  "exp": 1623938919,  "user_name": "admin",  "authorities": [    "ROLE_ADMIN",    "ROLE_USER"  ],  "client_id": "order",  "scope": [    "read",    "write"  ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="刷新token"><a href="#刷新token" class="headerlink" title="刷新token"></a>刷新token</h3><p>请求：</p><pre class="line-numbers language-none"><code class="language-none">POST http://localhost:8090/oauth/tokenAccept: application/jsonContent-Type: application/x-www-form-urlencodedAuthorization: Basic b3JkZXI6c2VjcmV0grant_type=refresh_token&amp;refresh_token=f32fe1fa-a5c4-4bdd-b325-8130cb39430e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{  "access_token": "cea4788b-a2f5-4d39-b411-05dd36ed6257",  "token_type": "bearer",  "refresh_token": "f32fe1fa-a5c4-4bdd-b325-8130cb39430e",  "expires_in": 43200,  "scope": "read write"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><a href="https://">https://github.com/onlyonezhongjinhui/spring-security-ouath2-learning/tree/main/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAspring%20security%20oauth2%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E4%BD%93%E7%B3%BB%EF%BC%88%E4%B8%80%EF%BC%89/authorization-server</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security Oauth2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security Oauth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL默认隔离级别是什么</title>
      <link href="/2021/05/19/mysql/mysql06/"/>
      <url>/2021/05/19/mysql/mysql06/</url>
      
        <content type="html"><![CDATA[<p>SQL标准事务隔离级别有：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）、串行化（serializable）。这几种隔离级别由低到高，效率由高到低。</p><h4 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h4><p>一个事务还未提交，它所作的变更就被其它的事务所看到。</p><h4 id="读提交"><a href="#读提交" class="headerlink" title="读提交"></a>读提交</h4><p>一个事务的修改只有在它提交以后其他事务才能看到。</p><h4 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h4><p>在读提交的基础上，保证一个事务在执行的过程中看到的数据总是和在这个事务启动的时候看到的数据是一致的。</p><h4 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h4><p>对同一行数据的修改，后一个事务必须要等待前一个事务完成。也就是说对同一行数据，读会加上读锁，写会加上写锁。</p><p>有这么四种隔离级别 ，那么MySQL是默认哪一种呢？</p><p>mysql&gt; show variables like ‘transaction_isolation’;<br>+———————–+—————–+<br>| Variable_name         | Value           |<br>+———————–+—————–+<br>| transaction_isolation | REPEATABLE-READ |<br>+———————–+—————–+</p><p>事实证明<strong>MySQL的默认隔离级别是可重复读</strong>，Oracle默认是读提交，所以当Oracle迁移到MySQL的时候注意设置MySQL的隔离级别为读提交哦。</p><p>举个栗子来看看各个隔离级别的表现，加深理解。创建一个表t,并预置一行数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t<span class="token punctuation">(</span>c <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建两个session会话，分别启动两个事务，它们的执行顺序如下所示：</p><pre class="line-numbers language-none"><code class="language-none">session1                | session2------------------------------------------------------------- begin;                    begin;-------------------------------------------------------------select * from t; (c=1)-------------------------------------------------------------                          select * from t; (c=1)-------------------------------------------------------------                          update t set c = 2 where c = 1;-------------------------------------------------------------select * from t; (c=?);-------------------------------------------------------------                          commit;-------------------------------------------------------------select * from t; (c=?);-------------------------------------------------------------commit;-------------------------------------------------------------select * from t; (c=?);-------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="读未提交-1"><a href="#读未提交-1" class="headerlink" title="读未提交"></a>读未提交</h5><p>第一个问号里c=2，第二个问好c=2，第三个问好c=2</p><h5 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h5><p>第一个问号里c=1，第二个问好c=2，第三个问好c=2</p><h5 id="可重复读-1"><a href="#可重复读-1" class="headerlink" title="可重复读"></a>可重复读</h5><p>第一个问号里c=1，第二个问好c=1，第三个问好c=2。</p><h5 id="串行化-1"><a href="#串行化-1" class="headerlink" title="串行化"></a>串行化</h5><p>第一个问号里c=1，第二个问好c=1，第三个问好c=2。需要注意的是，session2中的事务执行update语句的时候会申请写锁所以会被卡住，只有当session1中的事务提交后session2中的语句才能继续执行。</p><p>实际上，在数据库中会创建一个视图，访问的时候以这个视图的逻辑结果为准。在<strong>读未提交</strong>隔离级别下，实际上是不存在视图的概念，因为每次都是返回最新的值。在<strong>读提交</strong>隔离级别下，这个视图是每个SQL语句开始执行的时候创建的。在<strong>可重复读</strong>隔离级别下，这个视图是在事务启动的时候创建的，整个事务过程中都是使用这个视图。在<strong>串行化</strong>隔离级别下直接通过加锁的方式避免并行访问。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>MySQL默认隔离级别是可重复读。</li><li>隔离级别有四种，读未提交、读提交、可重复读、串行化，并行效率依次从高到低。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git如何剔除某些提交</title>
      <link href="/2021/05/19/git/git01/"/>
      <url>/2021/05/19/git/git01/</url>
      
        <content type="html"><![CDATA[<p>假如小明同学在某次需求开发中在Git仓库的main分支中分别提交了5次，分别是A-&gt;B-&gt;C-&gt;D-&gt;E。几天后突然觉悟了，发现某些功能搞错了，需要把B这个提交的代码剔除。这时候小明就着急了，该如何是好呢？正在这时，小明想起来貌似听说过一个很厉害的命令cherry-pick，这时小明开始变得淡定起来，嘴角上扬，胸有成足。那么它是怎么操作的呢？一起来还原现场吧。</p><ol><li>git reset A –hard 还原到A这个版本</li><li>git cherry-pick C D E 把C、D、E cherry pick过来</li><li>git push –force origin 强制推送到远端仓库</li></ol><p>就这样，小明就把B的提交给剔除了。这都多亏了cherry-pick命令了。</p><h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><h3 id="应用于其他分支"><a href="#应用于其他分支" class="headerlink" title="应用于其他分支"></a>应用于其他分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令就会将指定的提交commitHash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。</p><p>举个栗子，代码仓库有main和dev两个分支。<br>    a - b - c main<br>         <br>           d - e - f - g dev<br>要将提交f应用到main分支中去</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout main<span class="token function">git</span> cherry-pick f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>操作完成以后，代码库就变成了下面的样子。</p><pre class="line-numbers language-none"><code class="language-none">a - b - c - f   main     \       d - e - f - g dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从上面可以看到，main分支的末尾增加了一个提交f。</p><p>git cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作把dev分支的最新一次提交应用到了main分支上，变成下面这样子。</p><pre class="line-numbers language-none"><code class="language-none">a - b - c - g   main     \       d - e - f - g dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果一次性需要应用多个提交，直接命令后填写多个提交即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>commitHash<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token operator">&lt;</span>commitHash<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果需要应用的提交很多，比如需要应用commitHash1到commitHashN的所有提交，可以这样操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token punctuation">..</span><span class="token operator">&lt;</span>commitHashN<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，就可以把从commitHash1到commitHashN的提交全应用上去了。不过需要注意的是，这是不包含commitHash1的，且commitHash1到commitHashN的顺序不能颠倒，否则会失败但不报错。如果需要包含commitHash1，则只需要稍加修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>^<span class="token punctuation">..</span><span class="token operator">&lt;</span>commitHashN<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="转移到另一个仓库"><a href="#转移到另一个仓库" class="headerlink" title="转移到另一个仓库"></a>转移到另一个仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> target git://gitUrl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加远程分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将远程分支拉取到本地</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log target/main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从日志中获取提交的hash值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应用提交即可</p><h3 id="cherry-pick常用配置项"><a href="#cherry-pick常用配置项" class="headerlink" title="cherry-pick常用配置项"></a>cherry-pick常用配置项</h3><ol><li>-e，–edit<br>打开外部编辑器，编辑提交信息</li><li>-n，–no-commit<br>只更新工作区和暂存区，不产生新的提交</li><li>-x<br>在提交信息的末尾追加一行(cherry picked from commit …)，方便以后查到这个提交是如何产生的</li><li>-s，–signoff<br>在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作</li><li>-m parent-number，–mainline parent-number<br>如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。</li></ol><p>-m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。</p><h3 id="代码冲突策略"><a href="#代码冲突策略" class="headerlink" title="代码冲突策略"></a>代码冲突策略</h3><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作</p><ol><li>–continue<br>用户解决代码冲突后，第一步将修改的文件重新加入暂存区（git add .），第二步使用下面的命令，让 Cherry pick 过程继续执行。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token parameter variable">--continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>–abort<br>发生代码冲突后，放弃合并，回到操作前的样子</li><li>–quit<br>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL更新语句执行流程是怎样？</title>
      <link href="/2021/05/17/mysql/mysql05/"/>
      <url>/2021/05/17/mysql/mysql05/</url>
      
        <content type="html"><![CDATA[<p>为了方便描述这个过程，先建个只包含一个主键id和age的表t,并插入一条数据：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> age <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>假如现在要更新这条记录，更新语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">28</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行流程如下：</p><ol><li>分析器对SQL语句进行解析，通过解析可以判断SQL语句的正确性，如果不正确则会返回语法错误的提示。</li><li>优化器选择合适的执行计划。优化器的作用是在表里有多个索引的时候，决定使用哪个索引。或者语句要做join的时候决定join的顺序。这里优化器会选择使用主键索引检索数据。</li><li>执行器执行SQL。在执行前会先判断当前用户是否有操作该表的权限，如果没有权限则会返回权限错误，否则打开表，根据表定义的引擎去调用引擎的接口。因为id是主键索引，引擎直接使用树就能搜索到这条记录。当然如果这条记录所在的页已经在内存中，就直接返回给执行器。否则就先从磁盘中加载这条记录所在的页到内存中，然后再返回给执行器。</li><li>执行器拿到这提条记录后，先调用引擎接口把age=18记录到undo log中并写入磁盘。</li><li>执行器调用引擎接口把age值改为28然后再调用引擎接口写入这条记录。</li><li>引擎将这条记录更新到内存中，同时将这个更新操作记录到redo log中，并把redo log中的这个事务置于prepare状态。</li><li>执行器生成这个操作的binlog并把binlog写入磁盘。</li><li>执行器调用引擎提交事务接口，引擎把redo log中的这个事务改为提交状态，更新就完成了。</li></ol><p>上面的过程中有一个耳熟能详的概念，<strong>两阶段提交</strong>，就是上面的redo log先是处于prepare状态后再写binlog，最后再commit。两阶段提交保证了redo log 和bin log逻辑的一致性。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>更新语句执行流程过程中涉及三种日志的写入，分别是undo log、redo log、 binlog。</li><li>两阶段提交保证了redo log和binlog的逻辑一致。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>undo log有什么用？</title>
      <link href="/2021/05/17/mysql/mysql04/"/>
      <url>/2021/05/17/mysql/mysql04/</url>
      
        <content type="html"><![CDATA[<h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>undo log用来存放数据被修改前的值。为了便于说明，建立一个表t，并插入一条数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>         <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>            <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如现在要更新这条记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> t <span class="token keyword">set</span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么这个时候undo log就会记录下事务T修改前a的值为1，修改后的值为2。如果这个事务出现异常需要回滚，就可以使用undo log来实现回滚，这样就能保证事务的一致性。</p><p>insert、update、delete可以变更数据，undo log分为两种类型，一种是insert_undo,一种是update_undo。</p><h2 id="undo-log相关参数"><a href="#undo-log相关参数" class="headerlink" title="undo log相关参数"></a>undo log相关参数</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%undo%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+------------+</span><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+------------+</span><span class="token operator">|</span> innodb_max_undo_log_size <span class="token operator">|</span> <span class="token number">1073741824</span> <span class="token operator">|</span><span class="token operator">|</span> innodb_undo_directory    <span class="token operator">|</span> <span class="token punctuation">.</span>\         <span class="token operator">|</span><span class="token operator">|</span> innodb_undo_log_encrypt  <span class="token operator">|</span> <span class="token keyword">OFF</span>        <span class="token operator">|</span><span class="token operator">|</span> innodb_undo_log_truncate <span class="token operator">|</span> <span class="token keyword">ON</span>         <span class="token operator">|</span><span class="token operator">|</span> innodb_undo_tablespaces  <span class="token operator">|</span> <span class="token number">2</span>          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+------------+</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%truncate%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------------------+-------+</span><span class="token operator">|</span> Variable_name                        <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------------------+-------+</span><span class="token operator">|</span> innodb_purge_rseg_truncate_frequency <span class="token operator">|</span> <span class="token number">128</span>   <span class="token operator">|</span><span class="token operator">|</span> innodb_undo_log_truncate             <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>innodb_max_undo_log_size</strong></li></ul><p>最大undo tablespace文件的大小，当启动了innodb_undo_tablespaces时，undo tablespace超过innodb_max_undo_log_size的阈值时才会尝试truncate。默认值是1G。truncate后的大小默认为10M。</p><ul><li>innodb_undo_directory</li></ul><p>undo log存放目录</p><ul><li>innodb_undo_log_encrypt</li></ul><p>日志加密开关，默认关闭</p><ul><li>innodb_undo_log_truncate</li></ul><p>InnoDB的purge线程，根据innodb_undo_log_truncate设置开启或关闭、innodb_max_undo_log_size的参数值，以及truncate的频率来进行空间回收和 undo file 的重新初始化。注意该参数生效的前提是，已设置独立表空间且独立表空间个数大于等于2个。</p><p>purge线程在truncate undo log file的过程中，需要检查该文件上是否还有活动事务，如果没有，需要把该undo log file标记为不可分配，这个时候，undo log 都会记录到其他文件上，所以至少需要2个独立表空间文件，才能进行truncate 操作，标注不可分配后，会创建一个独立的文件undo_<space_id><em>trunc.log，记录现在正在truncate 某个undo log文件，然后开始初始化undo log file到10M，操作结束后，删除表示truncate动作的 undo</em><space_id>_trunc.log 文件，这个文件保证了即使在truncate过程中发生了故障重启数据库服务，重启后，服务发现这个文件，也会继续完成truncate操作，删除文件结束后，标识该undo log file可分配。</space_id></space_id></p><ul><li>innodb_undo_tablespaces</li></ul><p>设置undo独立表空间个数，范围为0-128，该参数只能在最开始初始化MySQL实例的时候指定，如果实例已创建，这个参数是不能变动的，如果在数据库配置文 件中指定innodb_undo_tablespaces 的个数大于实例创建时的指定个数，则会启动失败，提示该参数设置有误。默认值是2，所以数据目录下有两个文件，undo_001、undo_002，每个文件大小为12M。</p><ul><li><strong>innodb_purge_rseg_truncate_frequency</strong></li></ul><p>控制purge回滚段的频度，默认为128。假设设置为n，则说明，当Innodb Purge操作的协调线程 purge事务128次时，就会触发一次History purge，检查当前的undo log 表空间状态是否会触发truncate。</p><h2 id="undo-log-空间管理"><a href="#undo-log-空间管理" class="headerlink" title="undo log 空间管理"></a>undo log 空间管理</h2><p>如果需要设置独立表空间，需要在初始化数据库实例的时候，指定独立表空间的数量。</p><p>undo log内部由多个回滚段组成，即 Rollback segment，一共有128个，保存在ibdata系统表空间中，分别从resg slot0 - resg slot127，每一个resg slot，也就是每一个回滚段，内部由1024个undo segment 组成。</p><p>回滚段（rollback segment）分配如下：</p><ul><li>slot 0 ，预留给系统表空间；</li><li>slot 1- 32，预留给临时表空间，每次数据库重启的时候，都会重建临时表空间；</li><li>slot33-127，如果有独立表空间，则预留给UNDO独立表空间；如果没有，则预留给系统表空间；</li></ul><p>回滚段中除去32个提供给临时表事务使用，剩下的 128-32=96个回滚段，可执行 96*1024 个并发事务操作，每个事务占用一个 undo segment slot，注意，如果事务中有临时表事务，还会在临时表空间中的 undo segment slot 再占用一个 undo segment slot，即占用2个undo segment slot。如果错误日志中有：<code>Cannot&nbsp;find&nbsp;a&nbsp;free&nbsp;slot&nbsp;for&nbsp;an&nbsp;undo&nbsp;log。</code>则说明并发的事务太多了，需要考虑下是否要分流业务。</p><p>回滚段（rollback segment ）采用 轮询调度的方式来分配使用，如果设置了独立表空间，那么就不会使用系统表空间回滚段中undo segment，而是使用独立表空间的，同时，如果回滚段正在 Truncate操作，则不分配。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>undo log记录事务修改的相反面，用来做事务回滚。</li><li>通过回滚段可以构建版本视图（MVCC），是MVCC的基础。</li><li>undo log日志在事务不需要的时候才能删除。长事务导致回滚日志不能删除，占用大量内存。所以尽量不要使用长事务。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果binlog格式为mixed，语句insert into t values(1,1,now())会记录为row格式还是statement格式？</title>
      <link href="/2021/05/08/mysql/mysql03/"/>
      <url>/2021/05/08/mysql/mysql03/</url>
      
        <content type="html"><![CDATA[<h2 id="如果binlog格式为mixed，语句insert-into-t-values-1-1-now-会记录为row格式还是statement格式？"><a href="#如果binlog格式为mixed，语句insert-into-t-values-1-1-now-会记录为row格式还是statement格式？" class="headerlink" title="如果binlog格式为mixed，语句insert into t values(1,1,now())会记录为row格式还是statement格式？"></a>如果binlog格式为mixed，语句insert into t values(1,1,now())会记录为row格式还是statement格式？</h2><p>MySQL的binlog有三种模式，statement、row、mixed。先做个实验，看看他们的庐山真面目吧。（本次实验是在MySQL8.0版本上进行）。</p><p>MySQL默认binlog日志为mixed。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span> \G<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Variable_name: binlog_format        <span class="token keyword">Value</span>: <span class="token keyword">ROW</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.25</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建测试表t</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span><span class="token punctuation">(</span>    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>         <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>   <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>            <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>t_modified<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行插入语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.32</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看binlog，笔者实验实例上最新的binlog文件是binlog.000409，通过命令查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> binlog events <span class="token operator">in</span> <span class="token string">'binlog.000409'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">1108</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">1183</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>                                                                                                                                                                                                     <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">1183</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">1268</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                                                                                                                                                                                                    <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">1268</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">1318</span> <span class="token operator">|</span> table_id: <span class="token number">71</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                                                                                                                                                                                                                    <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">1318</span> <span class="token operator">|</span> Write_rows     <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">1366</span> <span class="token operator">|</span> table_id: <span class="token number">71</span> flags: STMT_END_F                                                                                                                                                                                                           <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">1366</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">1397</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=17 */</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用mysqlbinlog工具查看详细日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqlbinlog --no-defaults <span class="token parameter variable">--database</span><span class="token operator">=</span>test F:<span class="token punctuation">\</span>Mr.Zhong<span class="token punctuation">\</span>software<span class="token punctuation">\</span>mysql-8.0.13-winx64<span class="token punctuation">\</span>data<span class="token punctuation">\</span>binlog.00040<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 1268</span><span class="token comment">#210510 20:48:40 server id 1  end_log_pos 1318 CRC32 0x9eb42e6e         Table_map: `test`.`t` mapped to number 71</span><span class="token comment"># at 1318</span><span class="token comment">#210510 20:48:40 server id 1  end_log_pos 1366 CRC32 0x9101035b         Write_rows: table id 71 flags: STMT_END_F</span>BINLOG <span class="token string">'qCuZYBMBAAAAMgAAACYFAAAAAEcAAAAAAAEABHRlc3QAAXQAAwMDEQEAAgEBAG4utJ4=qCuZYB4BAAAAMAAAAFYFAAAAAEcAAAAAAAEAAgAD/wABAAAAAQAAAGCZK6hbAwGR'</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 1366</span><span class="token comment">#210510 20:48:40 server id 1  end_log_pos 1397 CRC32 0x7b4fa6d4         Xid = 17</span><span class="token keyword">COMMIT</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'AUTOMATIC'</span> <span class="token comment">/* added by mysqlbinlog */</span> <span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment"># End of log file</span><span class="token comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span><span class="token punctuation">;</span><span class="token comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以看到日志记录的是row格式。实践出真知，在MySQL8.0上，insert into t values(1,1,now());语句记录为row格式。</strong></p><p>接下来解读一下日志里面包含的重要内容：</p><ul><li>第一行SET @@SESSION.GTID_NEXT= ‘ANONYMOUS’，是用来主备切换时确定binlog位点</li><li>第二行的BEGIN和第五行的COMMIT表示中间的是一个事务，xid表示成功提交事务，事务id为17</li><li>第三行是Table_map事件，用来说明接下来操作的是test库的表t</li><li>第四行是Write_rows事件，是插入数据</li></ul><p>从mysqlbinlog工具解析出来还看到更加完整的信息，里面包含了</p><ul><li>server id 1，说明这个事务是在server id 为1的实例上执行的</li><li>每个事件event都有CRC32值，这是因为设置binlog-checksum默认是CRC32</li></ul><p>接下来看看Statement格式的日志会记录成什么样子呢？</p><p>修改binlog格式为Statement</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> binlog_format <span class="token operator">=</span> <span class="token string">'statement'</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%binlog_format%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> binlog_format <span class="token operator">|</span> STATEMENT <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行insert into t values(1,1,now());语句后查看binlog</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">                                                             <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">2026</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">2101</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>                                                                                                                                                                                                     <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">2101</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">2193</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                                                                                                                                                                                                    <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">2193</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">2311</span> <span class="token operator">|</span> <span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                                                                                                                                              <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">2311</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">2342</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=38 */</span>                                                                                                                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*!80001 SET @@session.original_commit_timestamp=1620654173918469*/</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 2101</span><span class="token comment">#210510 21:42:53 server id 1  end_log_pos 2193 CRC32 0x215227b1         Query   thread_id=10    exec_time=0     error_code=0</span><span class="token keyword">SET</span> <span class="token keyword">TIMESTAMP</span><span class="token operator">=</span><span class="token number">1620654173</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment">/*!80013 SET @@session.sql_require_primary_key=0*/</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 2193</span><span class="token comment">#210510 21:42:53 server id 1  end_log_pos 2311 CRC32 0xdf2dd0df         Query   thread_id=10    exec_time=0     error_code=0</span><span class="token keyword">SET</span> <span class="token keyword">TIMESTAMP</span><span class="token operator">=</span><span class="token number">1620654173</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment">/*!80013 SET @@session.sql_require_primary_key=0*/</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 2311</span><span class="token comment">#210510 21:42:53 server id 1  end_log_pos 2342 CRC32 0xbc576b08         Xid = 38</span><span class="token keyword">COMMIT</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到statement格式的binlog是直接记录了原始的SQL语句，值得注意的是，在记录语句之前还记录了一个重要的一行*<em>SET TIMESTAMP=1620654173/</em>!*/;**，这行的作用就是表明，后续的now()函数的返回时间就是这个时间，这样就能保证从库使用该binlog进行同步的时候不会出现主备不一致。</p><p>再来看看这条SQL语句，<strong>delete from t  where a &gt;= 4 and t_modified &lt;= ‘2018-11-10’ limit 1</strong>在statement格式下的表现。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">3498</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">3573</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>                                                                                                                                                                                                     <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">3573</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">3665</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                                                                                                                                                                                                    <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">3665</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">3818</span> <span class="token operator">|</span> <span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t  <span class="token keyword">where</span> a <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">and</span> t_modified <span class="token operator">&lt;=</span> <span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span>                                                                                                                                                           <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">3818</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">3849</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=54 */</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 3573</span><span class="token comment">#210511 20:09:25 server id 1  end_log_pos 3665 CRC32 0x3275901b         Query   thread_id=12    exec_time=0     error_code=0</span><span class="token keyword">SET</span> <span class="token keyword">TIMESTAMP</span><span class="token operator">=</span><span class="token number">1620734965</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment">/*!80013 SET @@session.sql_require_primary_key=0*/</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 3665</span><span class="token comment">#210511 20:09:25 server id 1  end_log_pos 3818 CRC32 0x73fa16d2         Query   thread_id=12    exec_time=0     error_code=0</span><span class="token keyword">SET</span> <span class="token keyword">TIMESTAMP</span><span class="token operator">=</span><span class="token number">1620734965</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment">/*!80013 SET @@session.sql_require_primary_key=0*/</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> t  <span class="token keyword">where</span> a <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">and</span> t_modified <span class="token operator">&lt;=</span> <span class="token string">'2018-11-10'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span class="token comment"># at 3818</span><span class="token comment">#210511 20:09:25 server id 1  end_log_pos 3849 CRC32 0x4ded88af         Xid = 54</span><span class="token keyword">COMMIT</span><span class="token comment">/*!*/</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>貌似没啥问题的样子，但是从语句我可以分析到，如果删除的时候主备走的索引不一致，删除的数据行就是不确定的，这会产生主备不一致。那么就来验证一下是不是如猜测的那样。</p><p>运行命令show warnings</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> <span class="token keyword">Level</span> <span class="token operator">|</span> Code <span class="token operator">|</span> Message                                                                                                                                                                                                                         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> Note  <span class="token operator">|</span> <span class="token number">1592</span> <span class="token operator">|</span> Unsafe statement written <span class="token keyword">to</span> the <span class="token keyword">binary</span> log <span class="token keyword">using</span> statement format since BINLOG_FORMAT <span class="token operator">=</span> STATEMENT<span class="token punctuation">.</span> The statement <span class="token operator">is</span> unsafe because it uses a <span class="token keyword">LIMIT</span> clause<span class="token punctuation">.</span> This <span class="token operator">is</span> unsafe because the <span class="token keyword">set</span> <span class="token keyword">of</span> <span class="token keyword">rows</span> included cannot be predicted<span class="token punctuation">.</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到产生了一个warning，原因是在statement格式下，上述的语句带了limit，无法精确确定删除的记录，是不安全的。</p><p>那我们改为Row格式再尝试后再看看是不是就ok了呢？</p><p>查看warning信息、binlog，发现warning没有了，binlog也正常</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">warnings</span><span class="token punctuation">;</span>Empty <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">                                                             <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">7770</span> <span class="token operator">|</span> Anonymous_Gtid <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7845</span> <span class="token operator">|</span> <span class="token keyword">SET</span> @<span class="token variable">@SESSION.GTID_NEXT</span><span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>                                                                                                                                                                                                     <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">7845</span> <span class="token operator">|</span> Query          <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7930</span> <span class="token operator">|</span> <span class="token keyword">BEGIN</span>                                                                                                                                                                                                                                    <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">7930</span> <span class="token operator">|</span> Table_map      <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">7980</span> <span class="token operator">|</span> table_id: <span class="token number">76</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span>t<span class="token punctuation">)</span>                                                                                                                                                                                                                    <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">7980</span> <span class="token operator">|</span> Delete_rows    <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">8028</span> <span class="token operator">|</span> table_id: <span class="token number">76</span> flags: STMT_END_F                                                                                                                                                                                                           <span class="token operator">|</span><span class="token operator">|</span> binlog<span class="token punctuation">.</span><span class="token number">000409</span> <span class="token operator">|</span> <span class="token number">8028</span> <span class="token operator">|</span> Xid            <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>        <span class="token number">8059</span> <span class="token operator">|</span> <span class="token keyword">COMMIT</span> <span class="token comment">/* xid=76 */</span>                                                                                                                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SET @@<span class="token environment constant">SESSION</span>.GTID_NEXT<span class="token operator">=</span> <span class="token string">'ANONYMOUS'</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment"># at 7845</span><span class="token comment">#210511 20:32:08 server id 1  end_log_pos 7930 CRC32 0xadbda736         Query   thread_id=12    exec_time=0     error_code=0</span>SET <span class="token assign-left variable">TIMESTAMP</span><span class="token operator">=</span><span class="token number">1620736328</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span>/*<span class="token operator">!</span><span class="token number">80013</span> SET @@session.sql_require_primary_key<span class="token operator">=</span><span class="token number">0</span>*//*<span class="token operator">!</span>*/<span class="token punctuation">;</span>BEGIN/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment"># at 7930</span><span class="token comment">#210511 20:32:08 server id 1  end_log_pos 7980 CRC32 0x9415caa5         Table_map: `test`.`t` mapped to number 76</span><span class="token comment"># at 7980</span><span class="token comment">#210511 20:32:08 server id 1  end_log_pos 8028 CRC32 0xce4cf023         Delete_rows: table id 76 flags: STMT_END_F</span>BINLOG <span class="token string">'SHmaYBMBAAAAMgAAACwfAAAAAEwAAAAAAAEABHRlc3QAAXQAAwMDEQEAAgEBAKXKFZQ=SHmaYCABAAAAMAAAAFwfAAAAAEwAAAAAAAEAAgAD/wAEAAAABAAAAFvlrwAj8EzO'</span>/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span class="token comment"># at 8028</span><span class="token comment">#210511 20:32:08 server id 1  end_log_pos 8059 CRC32 0x3efcb90c         Xid = 76</span>COMMIT/*<span class="token operator">!</span>*/<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>MySQL8 binlog默认格式是Mixed。</li><li>包含日期这种不一致的因素的语句，MySQL8也做了相应的优化，通过SET TIMESTAMP命令保持主备一致</li><li>对于statement格式下的binlog会有主备不一致的隐患，建议binlog至少设置为Mixed，当然推荐还是设置为row格式</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL有了redo log为何还要binlog</title>
      <link href="/2021/05/07/mysql/mysql02/"/>
      <url>/2021/05/07/mysql/mysql02/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL有了redo-log为何还要binlog？"><a href="#MySQL有了redo-log为何还要binlog？" class="headerlink" title="MySQL有了redo log为何还要binlog？"></a>MySQL有了redo log为何还要binlog？</h2><p>其实这个问题应该是反过来说的，因为binlog是比redo log更早。当InnoDB引擎还没有的时候，MySQL默认存储引擎是MyISAM。所以binlog是MySQL通用的日志，存在于Server层，不属于引擎层。binlog只有归档能力，也就是归档日志。有了binlog，MySQL就能实现主备同步，数据恢复等。所以说redo log和binlog并不冲突，反而相辅相成。</p><p>binlog是逻辑日志，记录的是SQL语句的原始逻辑。它是追加写入模式，当binlog文件到达一定大小会新建立文件进行写入，并不会覆盖原来的文件。记录的格式有三种，statement、row、mixed。对比一下三种格式的优劣。</p><h4 id="statement"><a href="#statement" class="headerlink" title="statement"></a><strong>statement</strong></h4><p>记录的是修改的SQL语句，优点是日志文件小，节约IO，挺能高。缺点是准确性差，对一些系统函数不能准确复制或不能复制，入now()、uuid()等。</p><h4 id="row"><a href="#row" class="headerlink" title="row"></a><strong>row</strong></h4><p>记录的是每行实际数据的变更，优点是准确性高。缺点就是日志文件大，需要更多的网络IO和磁盘IO。</p><h4 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a><strong>mixed</strong></h4><p>statemen和row混合，优点是准确性高，文件又没row那么大。缺点是可能发生主从不一致。</p><p>如今万兆网络带宽高性能磁盘或者SSD加入，推荐使用row模式。毕竟数据一致性还是首先保障。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>binlog是server层通用的归档日志。</li><li>binlog是逻辑日志，追加写入，不会覆盖。</li><li>binlog有三种格式，statemen、row、mixed，推荐使用row格式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL如何保证crash-safe</title>
      <link href="/2021/05/07/mysql/mysql01/"/>
      <url>/2021/05/07/mysql/mysql01/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL如何保证crash-safe？"><a href="#MySQL如何保证crash-safe？" class="headerlink" title="MySQL如何保证crash-safe？"></a>MySQL如何保证crash-safe？</h2><h3 id="crash-safe"><a href="#crash-safe" class="headerlink" title="crash-safe"></a>crash-safe</h3><p>什么是crash-safe，简单来说就是MySQL异常重启，之前提交的记录也不会丢失。</p><h3 id="如何保证crash-safe"><a href="#如何保证crash-safe" class="headerlink" title="如何保证crash-safe"></a>如何保证crash-safe</h3><p>那么MySQL是如何提供crash-safe这个能力的呢？具体来说，应该是InnoDB提供的这个能力，这就得益于InnoDB的redo log。</p><p>redo log是固定大小的一组文件，可通过配置修改数量和文件大小。redo log是物理日志，记录的是数据页上修改了什么内容。这组redo log文件就像一个环形的磁盘，由两个名为write pos和checkpoint的磁头进行控制，write pos表示日志写入的地方，checkpoint表示刷盘的地方，write pos和checkpoint之间的距离就是redo log剩余的空间。如果write pos赶上了checkpoint，那么MySQL就得停下写入，先把日志上的修改刷入磁盘后往前挪动一下checkpoint。当然MySQL不会一直等到write pos追上checkpoint才刷盘，平常如果系统空闲，后台线程就会默默刷盘，如果系统实在繁忙，实在没有空间了，也只能刷盘，这就导致了吞吐量下降。</p><h3 id="redo-log-来源"><a href="#redo-log-来源" class="headerlink" title="redo log 来源"></a>redo log 来源</h3><p>为什么会设计出redo log？也就是鼎鼎大名的WAL(Write-Ahead Logging)技术。其实是在机械硬盘时代，磁盘写入是非常耗时的操作，如果数据库每次修改都修改磁盘，代价实在是太大，这无疑是不能接收的。在这种情景下，首先想到的肯定是在内存中修改即可，但是内存并不能保证数据不丢失，所以单单在内存中修改是肯定不行的。这个时候就想到了，磁盘虽然随机写入性能差，但是顺序写入性能还是可以的，这个时候WAL应运而生了。时至今日WAL设计思路应用已经非常广泛，大名鼎鼎的Kafka的消息存储也利用了这种机制，实现了高效消息存储。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>redo log是MySQL的InnoDB存储引擎提供的一种重做日志，能保障MySQL异常重启不丢数据</li><li>redo log是物理日志，记录的是数据页上的修改内容。</li><li>redo log由一组日志文件组成，空间固定，循环写入，由write pos和checkpoint进行控制。</li><li>redo log是一种WAL技术，保证MySQL的高吞吐量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经营者养成笔记——柳井正</title>
      <link href="/2021/04/18/reading/read01/"/>
      <url>/2021/04/18/reading/read01/</url>
      
        <content type="html"><![CDATA[<h1 id="经营者养成笔记"><a href="#经营者养成笔记" class="headerlink" title="经营者养成笔记"></a>经营者养成笔记</h1><p><img src="/medias/assets/reading/%E7%BB%8F%E8%90%A5%E8%80%85%E5%85%BB%E6%88%90%E7%AC%94%E8%AE%B0.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>要成为真正的经营者，必须年复一年、日复一日的修炼内功，拥有变革的能力、赚钱的能力、建设团队的能力、追求理想的能力，到哪都能实现高价值。</p>]]></content>
      
      
      <categories>
          
          <category> Reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reading notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI和门面模式有什么区别</title>
      <link href="/2021/04/11/design-pattern/design-pattern-facade/"/>
      <url>/2021/04/11/design-pattern/design-pattern-facade/</url>
      
        <content type="html"><![CDATA[<h2 id="SPI和门面模式有什么区别"><a href="#SPI和门面模式有什么区别" class="headerlink" title="SPI和门面模式有什么区别"></a>SPI和门面模式有什么区别</h2><p>要回答这个问题，就先得明白什么是SPI和门面模式。</p><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>SPI，全称Service Provider Interface，是Java提供的一种服务加载方式。它是一种将服务接口和服务实现分离达到解耦，大大提升了程序的可扩展性的机制。引入服务提供者就是引入了SPI接口的实现者，通过本地的注册发现获取具体的实现类，轻松可插拔。</p><p>要实现SPI服务注册发现加载，需要做以下几件事情</p><ol><li>在 META-INF/services/ 目录中创建以接口全限定名命名的文件，该文件内容为API具体实现类的全限定名</li><li>使用 ServiceLoader 类动态加载 META-INF 中的实现类</li><li>如 SPI 的实现类为 Jar 则需要放在主程序 ClassPath 中</li><li>API 具体实现类必须有一个不带参数的构造方法</li></ol><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><p>要实现一个文件上传的功能，文件可以是普通文本文件、视频、图片等。Java都是面向接口编程的，那么就先定义一个上传接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Uploader</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * upload.     */</span>    <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们要实现普通文本文件、视频、图片的上传。假如它们上传的时候需要做不同的操作，所以就分别定义了三个类，都实现Uploader接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploader</span> <span class="token keyword">implements</span> <span class="token class-name">Uploader</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is file uploader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageUploader</span> <span class="token keyword">implements</span> <span class="token class-name">Uploader</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this image uploader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoUploader</span> <span class="token keyword">implements</span> <span class="token class-name">Uploader</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is video uploader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在META-INF/services目录下创建SPI的描述文件,文件名为Uploader全限定名io.zjh.Uploader，内容为实现类的全限定名</p><pre class="line-numbers language-none"><code class="language-none">io.zjh.FileUploaderio.zjh.ImageUploaderio.zjh.VideoUploader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>好了，现在就可以通过SPI机制去加载实现了Uploader接口的服务了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uploader</span><span class="token punctuation">&gt;</span></span> uploaders <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Uploader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uploaders<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Uploader</span><span class="token operator">::</span><span class="token function">upload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这个类后能看到输出如下</p><pre class="line-numbers language-none"><code class="language-none">this is file uploaderthis image uploaderthis is video uploader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如现在要对视频增加更强的功能，这个时候只需要在自己的工程里面增加一个实现类VideoUploader进行增强，然后在自己的工程META-INF/services/ 目录下创建一个名为io.zjh.Uploader内容为io.zjh.VideoUploader的SPI描述文件即可。</p><p>再次加载输出如下</p><pre class="line-numbers language-none"><code class="language-none">this is file uploaderthis image uploaderthis is a strong Video uploader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这就是SPI的威力。</p><p><strong>顺便提一下API和SPI的区别。API，Application Programming Interface，是实现方制定接口并完成对接口的实现，调用方无权选择不同的实现。而SPI是调用方来制定接口，提供给外部来实现，调用方在调用时选择自己需要的外部实现。简单的说就是API是给开发人员使用的，而SPI是给框架使用的。</strong></p><h3 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h3><p>门面模式，也叫外观模式，英文全称是 Facade Design Pattern。在 GoF 的《设计模式》一书中，门面模式是这样定义的：Provide a unified interface to a set of interfaces in a subsystem. Facade Pattern defines a higher-level interface that makes the subsystem easier to use.翻译成中文就是：门面模式为子系统提供一组统一的接口，定义一组高层接口让子系统更易用。</p><p>举个例子：</p><p>假设有一个系统 A，提供了 a、b、c、d 四个接口。系统 B 完成某个业务功能，需要调用 A 系统的 a、b、d 接口。利用门面模式，提供一个包裹 a、b、d 接口调用的门面接口 x，给系统 B 直接使用，易用性就上去了。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p><strong>解决易用性问题</strong></p><p>门面模式可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。比如上面的例子就是典型的一个例子。再比如Kafka提供的脚本工具就可以看作是门面模式的经典用法，通过这些门面，隐藏了Kafka服务调用的复杂性，可以通过这些简单的命令去操作Kafka。</p><p><strong>解决性能问题</strong></p><p>假设有个业务，需要调用a、b、c、d、e这5个网络接口完成，如果这个时候做个f门面接口，来在后端调用这几个接口的业务完成处理，就可以减少网络请求，提升性能。</p><p><strong>解决分布式事务问题</strong></p><p>假设有这样一个业务场景：在用户注册的时候，我们不仅会创建用户（在数据库 User 表中），还会给用户创建一个钱包（在数据库的 Wallet 表中）。对于这样一个简单的业务需求，我们可以通过依次调用用户的创建接口和钱包的创建接口来完成。但是，用户注册需要支持事务，也就是说，创建用户和钱包的两个操作，要么都成功，要么都失败，不能一个成功、一个失败。要支持两个接口调用在一个事务中执行，是比较难实现的，这涉及分布式事务问题。虽然我们可以通过引入分布式事务框架或者事后补偿的机制来解决，但代码实现都比较复杂。而最简单的解决方案是，利用数据库事务或者 Spring 框架提供的事务（如果是 Java 语言的话），在一个事务中，执行创建用户和创建钱包这两个 SQL 操作。这就要求两个 SQL 操作要在一个接口中完成，所以，我们可以借鉴门面模式的思想，再设计一个包裹这两个操作的新接口，让新接口在一个事务中执行两个 SQL 操作。</p><p>好了，明白了SPI和门面模式，来回答开篇的问题，“SPI和门面模式有什么区别”。</p><p><strong>门面模式是接口设计的指导思想，旨在为子系统提供一组统一的接口，定义一组高层接口让子系统更易用。典型使用场景是提升接口易用性，解决性能问题，解决分布式事务问题。SPI则是一种将服务接口和服务实现分离达到解耦，大大提升了程序的可扩展性的机制。</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>SPI则是一种将服务接口和服务实现分离达到解耦，大大提升了程序的可扩展性的机制</li><li>门面模式是接口设计的指导思想，旨在为子系统提供一组统一的接口，定义一组高层接口让子系统更易用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么Kafka不允许减少主题的分区数</title>
      <link href="/2021/04/11/kafka/kafka06/"/>
      <url>/2021/04/11/kafka/kafka06/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么Kafka不允许减少主题的分区数"><a href="#为什么Kafka不允许减少主题的分区数" class="headerlink" title="为什么Kafka不允许减少主题的分区数"></a>为什么Kafka不允许减少主题的分区数</h2><p>回答这个问题前，先看看如何增删查改主题。</p><h3 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h3><p>可以通过kafka-topics脚本进行创建，可以添加的参数往后加就是了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kafka-topics.bat --bootstrap-server localhost:9092 <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> test1 <span class="token parameter variable">--partitions</span> <span class="token number">1</span> --replication-factor <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个名为test1的主题，分区数为1，副本数为1。</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9093 --create --topic test2 --partitions 2 --replication-factor 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在创建一个名为test2的主题，分区数为2，副本数为2。</p><h3 id="查看主题"><a href="#查看主题" class="headerlink" title="查看主题"></a>查看主题</h3><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092 --describe --topic test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Topic: test1    PartitionCount: 1       ReplicationFactor: 1    Configs: segment.bytes=1073741824        Topic: test1    Partition: 0    Leader: 1       Replicas: 1     Isr: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092 --describe --topic test2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Topic: test2    PartitionCount: 2       ReplicationFactor: 2    Configs: segment.bytes=1073741824        Topic: test2    Partition: 0    Leader: 1       Replicas: 1,0   Isr: 1,0        Topic: test2    Partition: 1    Leader: 0       Replicas: 0,2   Isr: 0,2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>describe命令可以指定主题名称查询指定主题信息，如果不指定主题名称，则可以查询所有当前发起命令用户可见的主题信息。</p><pre class="line-numbers language-none"><code class="language-none">Topic: test1    PartitionCount: 1       ReplicationFactor: 1    Configs: segment.bytes=1073741824        Topic: test1    Partition: 0    Leader: 1       Replicas: 1     Isr: 1Topic: test2    PartitionCount: 2       ReplicationFactor: 2    Configs: segment.bytes=1073741824        Topic: test2    Partition: 0    Leader: 1       Replicas: 1,0   Isr: 1,0        Topic: test2    Partition: 1    Leader: 0       Replicas: 0,2   Isr: 0,2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><h4 id="增加副本"><a href="#增加副本" class="headerlink" title="增加副本"></a>增加副本</h4><p>增加副本使用kafka-reassign-partitions脚本，且需要创建一个包含分区信息的json文件。比如下面给test1增加两个副本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"partitions"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"test1"</span><span class="token punctuation">,</span>            <span class="token property">"partition"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"replicas"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token number">2</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令</p><pre class="line-numbers language-none"><code class="language-none">kafka-reassign-partitions.bat --bootstrap-server localhost:9092 --reassignment-json-file test1.json --execute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到响应内容表示成功</p><pre class="line-numbers language-none"><code class="language-none">Current partition replica assignment{"version":1,"partitions":[{"topic":"test1","partition":0,"replicas":[1],"log_dirs":["any"]}]}Save this to use as the --reassignment-json-file option during rollbackSuccessfully started partition reassignment for test1-0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次查看test1主题</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092 --describe --topic test1Topic: test1    PartitionCount: 1       ReplicationFactor: 3    Configs: segment.bytes=1073741824        Topic: test1    Partition: 0    Leader: 0       Replicas: 0,1,2 Isr: 1,2,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看到test1已变为3个副本，分别是0,1,2。</p><p>再给test2主题增加副本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"partitions"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"test2"</span><span class="token punctuation">,</span>            <span class="token property">"partition"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"replicas"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>                <span class="token number">2</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"test2"</span><span class="token punctuation">,</span>            <span class="token property">"partition"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"replicas"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token number">2</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">kafka-reassign-partitions.bat --bootstrap-server localhost:9092 --reassignment-json-file test2.json --execute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看test2主题，发现副本数已变为3</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092 --describe --topic test2Topic: test2    PartitionCount: 2       ReplicationFactor: 3    Configs: segment.bytes=1073741824        Topic: test2    Partition: 0    Leader: 1       Replicas: 0,1,2 Isr: 1,0,2        Topic: test2    Partition: 1    Leader: 0       Replicas: 0,1,2 Isr: 0,2,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除副本"><a href="#删除副本" class="headerlink" title="删除副本"></a>删除副本</h4><p>编辑分区信息文件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"partitions"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"test2"</span><span class="token punctuation">,</span>            <span class="token property">"partition"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"replicas"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"test2"</span><span class="token punctuation">,</span>            <span class="token property">"partition"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"replicas"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token number">1</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令进行修改</p><pre class="line-numbers language-none"><code class="language-none">kafka-reassign-partitions.bat --bootstrap-server localhost:9092 --reassignment-json-file test2.json --executeCurrent partition replica assignment{"version":1,"partitions":[{"topic":"test2","partition":0,"replicas":[0,1,2],"log_dirs":["any","any","any"]},{"topic":"test2","partition":1,"replicas":[0,1,2],"log_dirs":["any","any","any"]}]}Save this to use as the --reassignment-json-file option during rollbackSuccessfully started partition reassignments for test2-0,test2-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看test2主题信息，已变为了两个副本</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092 --describe --topic test2[2021-04-11 13:55:23,465] WARN [AdminClient clientId=adminclient-1] Connection to node 2 (DESKTOP-3LGVDML/192.168.0.100:9094) could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)Topic: test2    PartitionCount: 2       ReplicationFactor: 2    Configs: segment.bytes=1073741824        Topic: test2    Partition: 0    Leader: 0       Replicas: 0,1   Isr: 1,0        Topic: test2    Partition: 1    Leader: 0       Replicas: 0,1   Isr: 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再尝试改为1个副本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"partitions"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"test2"</span><span class="token punctuation">,</span>            <span class="token property">"partition"</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>            <span class="token property">"replicas"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token number">0</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token property">"topic"</span><span class="token operator">:</span><span class="token string">"test2"</span><span class="token punctuation">,</span>            <span class="token property">"partition"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"replicas"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token number">0</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">kafka-reassign-partitions.bat --bootstrap-server localhost:9092 --reassignment-json-file test2.json --executeCurrent partition replica assignment{"version":1,"partitions":[{"topic":"test2","partition":0,"replicas":[0,1],"log_dirs":["any","any"]},{"topic":"test2","partition":1,"replicas":[0,1],"log_dirs":["any","any"]}]}Save this to use as the --reassignment-json-file option during rollbackSuccessfully started partition reassignments for test2-0,test2-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092 --describe --topic test2Topic: test2    PartitionCount: 2       ReplicationFactor: 1    Configs: segment.bytes=1073741824        Topic: test2    Partition: 0    Leader: 0       Replicas: 0     Isr: 0        Topic: test2    Partition: 1    Leader: 0       Replicas: 0     Isr: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改分区"><a href="#修改分区" class="headerlink" title="修改分区"></a>修改分区</h4><p>通过kafka-topics脚本配合–alter参数进行进行修改。</p><p>给主题test1增加一个分区</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092  --alter --topic test1 --partitions 2Topic: test1    PartitionCount: 2       ReplicationFactor: 1    Configs: segment.bytes=1073741824        Topic: test1    Partition: 0    Leader: 0       Replicas: 0     Isr: 0        Topic: test1    Partition: 1    Leader: 0       Replicas: 0     Isr: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给主题test1删除一个分区</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092  --alter --topic test1 --partitions 1Error while executing topic command : Topic currently has 2 partitions, which is higher than the requested 1.[2021-04-11 14:18:57,294] ERROR org.apache.kafka.common.errors.InvalidPartitionsException: Topic currently has 2 partitions, which is higher than the requested 1. (kafka.admin.TopicCommand$)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，kafka并不允许删除分区，执行后报错了，提示需要超过2。</p><h3 id="删除主题"><a href="#删除主题" class="headerlink" title="删除主题"></a>删除主题</h3><p>使用kafka-topic脚本配合–delete参数进行删除</p><pre class="line-numbers language-none"><code class="language-none">kafka-topics.bat --bootstrap-server localhost:9092 --delete --topic test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，删除主题是异步的，命令执行后kafka会在后台默默进行删除。</p><p>由于上面修改主题的操作可能设置出现了问题，当执行上面删除操作的时候发现主题删除不了且Broker宕机了。遇到这种情况，只能采取非常措施了。</p><ol><li>手动删除Zookeeper节点/admin/delete_topics 下待删除主题为名的znode</li><li>然后再手动删除该主题的磁盘上的分区目录</li><li>最后在Zookeeper中执行rmr/controller，触发Controller重选举，刷新Controller缓存。在执行最后一步时，要慎重，因为他可能造成大面积的分区Leader重选举。事实上，仅仅执行前两步也是可以的，只是Controller缓存中没有清空删除主题，不影响使用。</li></ol><p><strong>好了，回答开篇的问题，“为什么Kafka不允许减少主题的分区数”</strong></p><p><strong>照Kafka现有的代码逻辑而言，此功能完全可以实现，不过也会使得代码的复杂度急剧增大。实现此功能需要考虑的因素很多，比如删除掉的分区中的消息该作何处理？如果随着分区一起消失则消息的可靠性得不到保障；如果需要保留则又需要考虑如何保留。直接存储到现有分区的尾部，消息的时间戳就不会递增，如此对于Spark、Flink这类需要消息时间戳（事件时间）的组件将会受到影响；如果分散插入到现有的分区中，那么在消息量很大的时候，内部的数据复制会占用很大的资源，而且在复制期间，此主题的可用性又如何得到保障？与此同时，顺序性问题、事务性问题、以及分区和副本的状态机切换问题都是不得不面对的。反观这个功能的收益点却是很低，如果真的需要实现此类的功能，完全可以重新创建一个分区数较小的主题，然后将现有主题中的消息按照既定的逻辑复制过去即可</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>Kafka可以通过kafka-topic脚本配合参数–create、–describe、–alter、–delete增删查改主题</li><li>Kafka可以通过kafka-reassign-partitions脚本配参数–reassignment-json-file指定带有分区信息的json文件进行副本数的变更</li><li>Kafka只允许增加分区不允许减少分区</li></ol>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka集群参数</title>
      <link href="/2021/04/09/kafka/kafka05/"/>
      <url>/2021/04/09/kafka/kafka05/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka集群参数"><a href="#Kafka集群参数" class="headerlink" title="Kafka集群参数"></a>Kafka集群参数</h2><p>2.7版本的kafka的有216个参数，这些参数主要分为以下7大类</p><ol><li>Broker Configs</li><li>Topic Configs</li><li>Producer Configs</li><li>Consumer Configs</li><li>Kafka Connect Configs</li><li>Kafka Streams Configs</li><li>AdminClient Configs</li></ol><p>当然那么多参数并不需要每个都要掌握，只需要掌握关键的参数就可以应付日常的生产了。笔者就列举一些关键的必须掌握的参数，一起讨论讨论，注意各版本Kafka配置会不一样，所以没特殊说明，这里说的都是2.7版本的配置</p><h3 id="Broker-Configs"><a href="#Broker-Configs" class="headerlink" title="Broker Configs"></a>Broker Configs</h3><h4 id="broker-id"><a href="#broker-id" class="headerlink" title="broker.id"></a>broker.id</h4><p>Broker的唯一标识，这个肯定是要全局唯一。</p><h4 id="log-dirs"><a href="#log-dirs" class="headerlink" title="log.dirs"></a>log.dirs</h4><p>指定Kafka使用的文件目录路径，是一个集合，多个路径用逗号分隔，比如/temp/kafka01,/temp/kafka02。如果有条件的话把这些目录分别挂载到不同的物理磁盘上，这样多块硬盘读写可以提升读写性能，且能实现故障转移。当Broker上的一块磁盘坏掉，Kafka会将坏掉的硬盘的数据转移到正常的磁盘上，这样Broker就实现了故障转移，还能继续工作。</p><h4 id="zookeeper-connect"><a href="#zookeeper-connect" class="headerlink" title="zookeeper.connect"></a>zookeeper.connect</h4><p>指定Zookeeper连接字符串，可以配置多个Zookeeper，多个用逗号分隔即可，比如</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">hostname1</span><span class="token punctuation">:</span><span class="token value attr-value">port1,hostname2:port2,hostname3:port3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你有多套Kafka集群想共用一个Zookeeper环境的时候，可以给连接字符串加上ZooKeeper chroot路径，作为命名空间进行区分，比如</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">hostname1</span><span class="token punctuation">:</span><span class="token value attr-value">port1,hostname2:port2/kafka1,hostname1:port1,hostname2:port2/kafka2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="listeners"><a href="#listeners" class="headerlink" title="listeners"></a>listeners</h4><p>监听器，指定可以通过什么协议、主机名、端口连接Kafka服务。格式为&lt;协议名称，主机名，端口号&gt;，多个配置用逗号分隔即可。协议名称有两个可选值，PLAINTEXT、SSL。PLAINTEXT表示明文传输，SSL表示用SSL或TLS加密传输。当然也可以自定义协议，但是就需要把listener.security.protocol.map参数也配置上，告诉这个协议使用了哪种安全协议。比如</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">listener.security.protocol.map</span><span class="token punctuation">=</span><span class="token value attr-value">CLIENT:SSL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示CLIENT这个自定义协议底层使用加密传输数据。</p><h4 id="advertised-listeners"><a href="#advertised-listeners" class="headerlink" title="advertised.listeners"></a>advertised.listeners</h4><p>和 listeners 相比多了个 advertised。Advertised的含义表示宣称的、公布的，就是说这组监听器是Broker用于对外发布的。Broker启动后会向Zookeeper中注册自己，同时从Zookeeper中获取兄弟Broker的地址，以便和兄弟Broker通信。同样，客户端连接Kafka后，也会从Zookeeper中获取所有Broker的访问地址。而这些地址就是advertised.listeners参数提供的。注意，当advertised.listeners没有配置的时候，默认就会使用listeners。这个参数比较难以理解，对比以下两个使用场景，结合起来更加容易理解。</p><ul><li>Kafka集群仅供内网使用</li></ul><p>那么只需要配置listeners参数</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://192.168.0.54:9092</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Kafka集群供外网访问</li></ul><p>当然如果宿主机有外网网卡，直接配置外网就可以了。如果没有外网网卡，（ifconfig看不到外网ip的网卡，基本上就不存在这个外网网卡），很可能是通过NAT映射或者啥办法搞出来的外网ip，此时kafka无法监听这个外网ip（因为不存在，启动就会报错）。这时候就是advertised.listeners真正发挥作用的时候了。配置如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://192.168.0.54:9092</span><span class="token key attr-name">advertised.listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://10.89.239.1:9092</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候，客户端访问的流程如下：</p><ol><li>客户端访问10.89.239.1:9092就被Kafka宿主机映射到了内网的192.168.0.54:9092上，连上了Kafka节点请求获取Kafka服务端的访问地址。</li><li>Kafka从Zookeeper中把自己和其它节点通过advertised.listeners注册到Zookeeper中的外网地址返回给客户端。</li><li>客户端通过这些外网地址就可以访问到Kafka了。</li></ol><h4 id="auto-create-topics-enable"><a href="#auto-create-topics-enable" class="headerlink" title="auto.create.topics.enable"></a>auto.create.topics.enable</h4><p>是否允许自动创建 Topic，建议配置为false，避免不小心错误的创建Topic。比如启动一个生产者程序，本来是要给名为order的topic发送消息，但是由于疏忽拼错了，发成了oder，那么如果这个参数配置的是true，那么就会自动创建一个oder的topic，这不是我们想看到的结果，所以配置为false更合适。很遗憾，auto.create.topics.enable默认值就是true，所以最好把它改为false。</p><h4 id="unclean-leader-election-enable"><a href="#unclean-leader-election-enable" class="headerlink" title="unclean.leader.election.enable"></a>unclean.leader.election.enable</h4><p>是否开启unclean选举。默认值是false。unclean选举意思是，当topic的ISR集合为空，也就是和挂掉的领导者副本同步比较相近的副本和领导者都挂掉的时候， 是否允许落后较多的副本成为领导者。如果该参数配置的是false，那么就是坚决不允许，如果是true则就会允许，那么这个时候让一个落后较多的副本成为领导者，那么丢数据那就是必然的事情了。所以设置为false是最可靠的。</p><h4 id="auto-leader-rebalance-enable"><a href="#auto-leader-rebalance-enable" class="headerlink" title="auto.leader.rebalance.enable"></a>auto.leader.rebalance.enable</h4><p>是否允许Kafka定期的对一些分区进行Leader重选举，当然这是有特定条件的，要满足才会冲选举。该参数默认值是true，建议设置为false。理由是，领导者副本a也许一直表现得都挺好，但是有可能一段时间后就被强行卸任领导者换成了b，这就导致了无缘无故得性能开销。你要知道换一次 Leader 代价很高的，原本向 a 发送请求的所有客户端都要切换成向 b 发送请求，而且这种换 Leader 本质上没有任何性能收益，建议在生产环境中把这个参数设置成 false。</p><h4 id="log-retention-hours、log-retention-minutes、log-retention-ms"><a href="#log-retention-hours、log-retention-minutes、log-retention-ms" class="headerlink" title="log.retention.hours、log.retention.minutes、log.retention.ms"></a>log.retention.hours、log.retention.minutes、log.retention.ms</h4><p>用来指定消息保留得时长。默认配置是168个小时，也就是7天。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">log.retention.hours</span> <span class="token punctuation">=</span> <span class="token value attr-value">168</span><span class="token key attr-name">log.retention.minutes</span> <span class="token punctuation">=</span> <span class="token value attr-value">null</span><span class="token key attr-name">log.retention.ms</span> <span class="token punctuation">=</span> <span class="token value attr-value">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三个参数优先级从高到低分别是log.retention.hours、log.retention.minutes、log.retention.ms。</p><h4 id="log-retention-bytes"><a href="#log-retention-bytes" class="headerlink" title="log.retention.bytes"></a>log.retention.bytes</h4><p>指定 Broker 为消息保存的总磁盘容量大小。默认值是-1，表示没有限制。当需要限制磁盘容量大小的时候可以使用。</p><h4 id="message-max-bytes"><a href="#message-max-bytes" class="headerlink" title="message.max.bytes"></a>message.max.bytes</h4><p>指定一条消息最大字节数。默认值是1048588byte约1M，这个可根据具体消息大小来设置即可。</p><h3 id="Topic-Configs"><a href="#Topic-Configs" class="headerlink" title="Topic Configs"></a>Topic Configs</h3><p>Topic级别的参数可以覆盖全局Broker的参数，当需要根据Topic设置不同的参数时候，可以使用Topic级别参数覆盖Broker的全局参数。</p><h4 id="retention-ms"><a href="#retention-ms" class="headerlink" title="retention.ms"></a>retention.ms</h4><p>消息的保留时长，设置后会覆盖Broker全局的参数。默认值是604800000，也就是7天。</p><h4 id="retention-bytes"><a href="#retention-bytes" class="headerlink" title="retention.bytes"></a>retention.bytes</h4><p>指定Topic可以使用的最大磁盘空间。默认值是-1，表示无限制。</p><h3 id="JVM-Configs"><a href="#JVM-Configs" class="headerlink" title="JVM Configs"></a>JVM Configs</h3><p>Kafka是跑在JVM上的，配置最重要的参数莫过设置合适的堆空间大小，以及合适的垃圾收集器。现在一般最低也是使用JDK8以上了。Kafka运行过程中会创建大量的ByteBuffer实例，配置一个较大的堆空间还是比较有必要的，建议不要低于6G吧。然后就是垃圾收集器，无需什么调优的情况下就无脑使用G1就好了。相对较大的堆空间使用G1还是比较有优势的。</p><h4 id="操作系统参数"><a href="#操作系统参数" class="headerlink" title="操作系统参数"></a>操作系统参数</h4><ul><li>文件描述符限制：尽量设置一个较大的数，比如ulimit -n 1000000。</li><li>文件系统类型：ext3-&gt;ext4-&gt;XFS-&gt;ZFS,性能由低到高，有条件就选择更好的。</li><li>Swappiness：建议不要设置为0而是设置一个较小的值。因为完全禁用swap空间，一旦物理内存耗尽，操作系统就会触发OOM killer这个组件，它会随机挑选一个进程然后kill掉。但如果设置成一个比较小的值，当开始使用 swap 空间时，你至少能够观测到 Broker 性能开始出现急剧下降，从而给你进一步调优和诊断问题的时间。基于这个考虑，建议将 swappniess 配置成一个接近 0 但不为 0 的值，比如 1。</li><li>提交时间：提交时间或者说是 Flush 落盘时间。向 Kafka 发送数据并不是真要等数据被写入磁盘才会认为成功，而是只要数据被写入到操作系统的页缓存（Page Cache）上就可以了，随后操作系统根据 LRU 算法会定期将页缓存上的“脏”数据落盘到物理磁盘上。这个定期就是由提交时间来确定的，默认是 5 秒。一般情况下我们会认为这个时间太频繁了，可以适当地增加提交间隔来降低物理磁盘的写操作。当然你可能会有这样的疑问：如果在页缓存中的数据在写入到磁盘前机器宕机了，那岂不是数据就丢失了。的确，这种情况数据确实就丢失了，但鉴于 Kafka 在软件层面已经提供了多副本的冗余机制，因此这里稍微拉大提交间隔去换取性能还是一个合理的做法</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面略列了Kafka常用的且比较关键的参数，包括了Broker Configs、Topic Configs 、JVM Configs、操作系统方面的，并且提出了以下最佳实践的配置，不过切记要根据实际情况进行配置哦。</p><h5 id="本文参考了胡夕老师的Kafka核心技术与实践专栏。"><a href="#本文参考了胡夕老师的Kafka核心技术与实践专栏。" class="headerlink" title="本文参考了胡夕老师的Kafka核心技术与实践专栏。"></a>本文参考了胡夕老师的Kafka核心技术与实践专栏。</h5>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka集群安装演示</title>
      <link href="/2021/04/09/kafka/kafka04/"/>
      <url>/2021/04/09/kafka/kafka04/</url>
      
        <content type="html"><![CDATA[<p>搞清楚了Kafka如何安装部署，那么我们就来个具体实操，做个演示环境，方便后续的使用。这里笔者平常使用Windows，为了方便，这里就直接在Windows上搭建演示集群了。</p><ol><li>官网上下载最新2.7版本的Kafka，解压缩后复制三份。</li><li>这里我选择偷懒，直接使用Kafka自带的Zookeeper。选择其中一个Kafka，修改zookeeper.properties配置文件，当然也可以不修改采用默认配置即可。这里我只修改一下zookeeper的数据路径dataDir=./../../zookeeper<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># the directory where the snapshot is stored.</span><span class="token key attr-name">dataDir</span><span class="token punctuation">=</span><span class="token value attr-value">./../../zookeeper</span><span class="token comment"># the port at which the clients will connect</span><span class="token key attr-name">clientPort</span><span class="token punctuation">=</span><span class="token value attr-value">2181</span><span class="token comment"># disable the per-ip limit on the number of connections since this is a non-production config</span><span class="token key attr-name">maxClientCnxns</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span class="token comment"># Disable the adminserver by default to avoid port conflicts.</span><span class="token comment"># Set the port to something non-conflicting if choosing to enable this</span><span class="token key attr-name">admin.enableServer</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>分别修改三个Kafka的server.properties配置文件。只需修改broker.id、log.dirs、listeners这三个参数就能跑起来了。</li></ol><ul><li>broker.id:broker的唯一标识，不能重复</li><li>log.dirs：指定Broker需要使用的若干个文件目录路径。在线上生产环境中一定要为log.dirs配置多个路径，具体格式是一个 CSV 格式，也就是用逗号分隔的多个路径，比如/home/kafka1,/home/kafka2,/home/kafka3这样。如果有条件的话你最好保证这些目录挂载到不同的物理磁盘上。</li><li>listeners：指定外部连接者要通过什么协议访问指定主机名和端口开放的 Kafka 服务<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span class="token key attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token value attr-value">./../../kafka-logs</span><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://:9092</span><span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token value attr-value">./../../kafka-logs</span><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://:9093</span><span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">2</span><span class="token key attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token value attr-value">./../../kafka-logs</span><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://:9094</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>偷懒，写个脚本启动zookeeper、kafka。注意先启动zookeeper、再启动Kafka即可。</li></ol><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offcd %cd%\bin\windows@echo start zookeepercall zookeeper-server-start.bat ./../../config/zookeeper.properties@pause@echo offcd %cd%\bin\windows@echo start kafkacall kafka-server-start.bat ./../../config/server.properties@pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>使用Kafka tool连接上刚搭建起来的集群<br><img src="/medias/assets/kafka/20210409092648.png"></li><li>尝试添加一个test主题，包含2个分区、2个副本<br><img src="/medias/assets/kafka/20210409092811.png"><br><img src="/medias/assets/kafka/20210409092936.png"><br><img src="/medias/assets/kafka/20210409093023.png"></li><li>尝试发送2条消息，后查看分区信息、消息信息<br><img src="/medias/assets/kafka/20210409093512.png"><br><img src="/medias/assets/kafka/20210409093921.png"><br><img src="/medias/assets/kafka/20210409093942.png"><br><img src="/medias/assets/kafka/20210409094010.png"></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Kafka集群安装特别简单，虽然可配置的参数有几百个，但是只需要配置三个参数就能运行起来了，非常方便。Windows上的安装仅仅用来学习和试验，千万别用在生产环境中哦！</p>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka如何安装部署</title>
      <link href="/2021/04/08/kafka/kafka03/"/>
      <url>/2021/04/08/kafka/kafka03/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka如何安装部署"><a href="#Kafka如何安装部署" class="headerlink" title="Kafka如何安装部署"></a>Kafka如何安装部署</h2><p>生产中Kafka都是集群部署，且需要考虑各种因素，最终再根据业务需求制定。那么需要考虑哪些因素呢，我们分别从操作系统、磁盘、磁盘容量、带宽等方面来讨论。</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>Kafka是Scala语言编写而后编译成.class字节码运行在Java虚拟机上，是跨平台的。目前常见的操作系统主要是Linux、Windows、MacOS。一般来说服务器应用都是部署在Linux上，主要因为Linux在I/O模型的使用、数据网络传输效率、社区支持度上更有优势。</p><h4 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h4><p>常见的I/O模型主要有5种：阻塞I/O模型（BIO）、非阻塞I/O、I/O多路复用、信号驱动I/O、异步I/O。这五种I/O模型按照顺序排序，异步I/O最高级。Kafka客户端底层用的是Java的selector，selector在Linux上的实现是epoll,在Windows上是select，显然epoll更好，所以Kafka部署在Linux要比Windows好。而MacOS估计很少有人用来部署服务器，直接忽略好了。</p><h4 id="数据网络传输效率"><a href="#数据网络传输效率" class="headerlink" title="数据网络传输效率"></a>数据网络传输效率</h4><p>Kafka生产者和消费者消息是通过网络传输，消息又是保存在磁盘上，这样Kafka就需要在磁盘和网络之间进行大量的数据传输。在Linux上零拷贝（Zero Copy）技术就可以避免磁盘和网络进行传输时进行大量的内核态数据拷贝，大大提升性能。而Windows上要在Java 8 的 60 更新版本才支持。所以选择Linux上部署，可以享受零拷贝带来的高性能。</p><h4 id="社区支持度"><a href="#社区支持度" class="headerlink" title="社区支持度"></a>社区支持度</h4><p>社区目前对Windows平台上发现的Kafka Bug不做任何承诺，一般是不会去修复的。因此Windows 平台上部署 Kafka 只适合于个人测试或用于功能验证，千万别应用于生产环境。</p><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>Kafka大量使用磁盘，但是只要Topic分区不要过多，Kafka都能利用顺序读写保证很高的读写速度。所以相比与昂贵的SSD，物美价廉的机械硬盘是比较合适的选择。</p><p>Kafka通过分区，软件层面实现了负载均衡、高可靠、高伸缩性，可不用磁盘阵列RAID，性价比更高。</p><h3 id="磁盘容量"><a href="#磁盘容量" class="headerlink" title="磁盘容量"></a>磁盘容量</h3><p>Kafka消息保存在磁盘上，这些消息会保存一段时间后被自动删除。这个时间是可配置的，默认保存时间是7天。知道了这个规则，我们就可以进行一番计算，大概就能估量磁盘的容量了。举个例子：</p><p>假如每天总共向配置为分区副本数是2，消息保存时间是7天的Kafka集群发送10G大小的消息，那么需要140G的磁盘空间。正常情况下，Kafka还需要存储其它的数据，比如索引数据等。假如预留10%的空间，那么需要140G * 14 = 1960G。不要忘记Kafka是支持消息压缩的，假设开启压缩且压缩比是0.8，那么规划的磁盘空间需要1960G * 0.8 = 1568G，也就是1.5T左右。</p><p>总结以下，做容量规划需要考虑的几个因素：</p><ul><li>新增消息量</li><li>消息保留时长</li><li>副本数</li><li>是否开启压缩</li></ul><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>Kafka通过网络传输数据，带宽很容易成为性能瓶颈。一般的公司都是千兆网络也就是1Gbps(注意这里的b是bit)。</p><p>假如业务需要Kafka集群在一小时内处理1TB的数据，我们来计算计算，需要多少台Kafka节点。</p><p>一般情况下带宽占用超过70%有丢包的可能性，所以带宽最多只能使用700Mb。但是最好不要让Kafka用那么多带宽，假如预留2/3带宽资源，那么可用带宽就是233Mb左右。那么一台Kafka节点一小时内能处理的数据量是133Mb * 60 * 60 / 8 约为100G左右。1TB数据处理就需要10个Kafka节点。不要忘记了，副本拷贝也是需要占用带宽的，假如副本数为2，那么需要的节点数就是20个了。</p><p>通过这种方式去规划Kafka节点个数是比较合理的方式，所以千万不要拍脑袋然后事后调整哦。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Kafka部署考虑的因素：</p><ol><li>操作系统：主要考虑I/O模型、数据网络传输效率、社区支持度方面，建议部署在Linux。</li><li>磁盘：Kafka自身优势，使用物美价廉的机械硬盘即可，且无需RAID。</li><li>磁盘容量：考虑新增消息量、消息保留时长、副本数、压缩等主要因素，建议预留20%~30%磁盘空间。</li><li>带宽：根据带宽情况、业务SLA目标规划集群节点数量，切记预留足够的带宽资源防止丢包。</li></ol>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka监控工具</title>
      <link href="/2021/04/08/kafka/kafka02/"/>
      <url>/2021/04/08/kafka/kafka02/</url>
      
        <content type="html"><![CDATA[<p>说监控工具之前，先看看Kafka都有哪些“发行版本”(和Linux发行版本一样的概念)。</p><h2 id="“Kafka发行版本”"><a href="#“Kafka发行版本”" class="headerlink" title="“Kafka发行版本”"></a>“Kafka发行版本”</h2><h4 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache Kafka"></a>Apache Kafka</h4><p>Apache Kafka 是Apache 基金会顶级开源项目。社区版 Kafka优势在于迭代速度快，社区响应度高，使用它可以让你有更高的把控度；缺陷在于仅提供基础核心组件，缺失一些高级的特性。</p><h4 id="Confluent-Kafka"><a href="#Confluent-Kafka" class="headerlink" title="Confluent Kafka"></a>Confluent Kafka</h4><p>Confluent公司发布的Confluent Kafka。Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如跨数据中心备份、Schema 注册中心以及集群监控工具等。优势在于集成了很多高级特性且由 Kafka 原班人马打造，质量上有保证；缺陷在于相关文档资料不全，普及率较低，没有太多可供参考的范例。</p><h4 id="Cloudera-Hortonworks-Kafka"><a href="#Cloudera-Hortonworks-Kafka" class="headerlink" title="Cloudera/Hortonworks Kafka"></a>Cloudera/Hortonworks Kafka</h4><p>Cloudera 提供的 CDH 和 Hortonworks 提供的 HDP 是非常著名的大数据平台，里面集成了目前主流的大数据框架，能够帮助用户实现从分布式存储、集群调度、流处理到机器学习、实时数据库等全方位的数据处理。优势在于操作简单，节省运维成本；缺陷在于把控度低，演进速度较慢。</p><p>由于社区版本并未提供监控工具，所以监控就是一个比较麻烦的问题，大公司一般自己定制开发，创业公司或者小公司一般采用线程的监控工具，我就罗列几种监控工具，具体使用还得根据自己的实际情况进行选择。</p><h2 id="Kafka监控工具"><a href="#Kafka监控工具" class="headerlink" title="Kafka监控工具"></a>Kafka监控工具</h2><ul><li>Logi-KafkaManager</li><li>JMXTrans + InfluxDB + Grafana</li><li>kafka-eagle</li><li>Kafka tool</li><li>Kafka Manager</li><li>Kafka Monitor</li></ul>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么Kafka不像MySQL那样允许追随者副本对外提供读服务</title>
      <link href="/2021/04/07/kafka/kafka01/"/>
      <url>/2021/04/07/kafka/kafka01/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么-Kafka-不像-MySQL-那样允许追随者副本对外提供读服务"><a href="#为什么-Kafka-不像-MySQL-那样允许追随者副本对外提供读服务" class="headerlink" title="为什么 Kafka 不像 MySQL 那样允许追随者副本对外提供读服务"></a>为什么 Kafka 不像 MySQL 那样允许追随者副本对外提供读服务</h2><p>回答这个问题之前，我们先来看看Kafka的架构图</p><p><img src="/medias/assets/kafka/20210407214255-0vv4x00-kafka-apis.png"></p><p><img src="/medias/assets/kafka/20210407213110-4mv5y5g-58c35d3ab0921bf0476e3ba14069d291.jpg"></p><p>通常Kafka是以集群的方式运行，当然也可以单机，但是单机的Kafka一般只用来做实验、学习使用。从图中看到，Kafka包含了以下这些组成部分：</p><ul><li>Broker：Broker是Kafka的服务端，通常一个Kafka集群由多个Broker组成。Broker负责接收客户端的请求，消息持久化。多Broker保证了Kafka集群的高可用。</li><li>Topic：主题是承载消息的逻辑容器。在实际中多用来区分具体的业务。</li><li>Partition：一个有序不变的消息序列，一个主题可以有多个分区。</li><li>Replica：副本提供消息冗余，是高可用的保障。一个分区可以有多个副本。副本分为领导者副本和追随者副本。领导者副本负责消息的读写，追随者副本只提供数据冗余。追随者副本会主动向领导者副本拉取消息进行同步。</li><li>Producer：向主题发送消息的程序。生产者负责选择把记录分配到主题中的哪个分区。这可以使用轮询算法( round-robin)进行简单地平衡负载，也可以根据一些更复杂的语义分区算法（比如基于记录一些键值）来完成。</li><li>Consumer：订阅主题消息的程序。</li><li>Consumer Group：多个消费者实例共同组成一个组，同时消费多个分区的以实现高吞吐量。一个分区同时只能被一个消费者组中的一个消费者消费，而一个消费者可以消费多个分区。</li><li>Record：消息，Kafka处理的主要对象。</li><li>Offset：表示分区中每条消息的位置信息，一个单调递增且不变的值。</li><li>Consumer Offset：消费者消费位移，表示消费进度，每个消费者都有自己的消费位移。</li></ul><p>了解了Kafka的这些概念，我们再来回答开篇的问题。Kafka 不像 MySQL 那样允许追随者副本对外提供读服务主要有以下几个原因：</p><ol><li>MySQL副本提供读操作主要目的是分摊主库的压力，而Kafka每个主题可以是多分区的，数据已经均匀分散在各个分区上，而分区的领导者副本是在不同的Broker上，本身就已经把压力分摊了实现了负载均衡。</li><li>如果Kafka的追随者提供了读服务，因为领导者副本、追随者副本的同步时异步的，那么必然会造成数据的一致性问题。</li><li>如果Kafka的追随者提供了读服务,那么Broker的IO压力会增加，可能会降低集群的性能。</li></ol>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关采用Nacos方式数据同步</title>
      <link href="/2021/04/06/soul/soul-nacos-sync-data/"/>
      <url>/2021/04/06/soul/soul-nacos-sync-data/</url>
      
        <content type="html"><![CDATA[<h2 id="soul-nacos方式同步数据原理"><a href="#soul-nacos方式同步数据原理" class="headerlink" title="soul nacos方式同步数据原理"></a>soul nacos方式同步数据原理</h2><p>soul nacos方式同步数据原理和zookeeper基本一致，都是利用中间件自身的监听机制。<code>soul-admin</code> 在启动的时候，会将数据全量写入 <code>nacos</code>，后续数据发生变更时，会增量更新 到<code>nacos</code> 。而启动的时候会从nacos中读取全量数据保存到本地并开启监听nacos中数据的变化。一旦<code>soul-admin</code>中数据有变化并更新到<code>nacos</code>中，<code>soul-web</code>即可收到<code>nacos</code>通知然后把变化的数据刷新到本地缓存。</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>NacosSyncDataService类实现了数据同步统一接口SyncDataService，作用就是在构造方法中调用start方法从<code>nacos</code>中读取全量数据并增添监听器监听数据变化并通知订阅者缓存和刷新数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosSyncDataService</span> <span class="token keyword">extends</span> <span class="token class-name">NacosCacheHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span><span class="token punctuation">,</span> <span class="token class-name">SyncDataService</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * Instantiates a new Nacos sync data service.     *     * @param configService         the config service     * @param pluginDataSubscriber the plugin data subscriber     * @param metaDataSubscribers   the meta data subscribers     * @param authDataSubscribers   the auth data subscribers     */</span>    <span class="token keyword">public</span> <span class="token class-name">NacosSyncDataService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigService</span> configService<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">,</span>                                <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>configService<span class="token punctuation">,</span> pluginDataSubscriber<span class="token punctuation">,</span> metaDataSubscribers<span class="token punctuation">,</span> authDataSubscribers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Start.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_DATA_ID</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">updatePluginMap</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token constant">SELECTOR_DATA_ID</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">updateSelectorMap</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token constant">RULE_DATA_ID</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">updateRuleMap</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token constant">META_DATA_ID</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">updateMetaDataMap</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token constant">AUTH_DATA_ID</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">::</span><span class="token function">updateAuthMap</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token constant">LISTENERS</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> lss<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            lss<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">-&gt;</span> <span class="token function">getConfigService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> <span class="token constant">GROUP</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LISTENERS</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而实际操作都在其父类NacosCacheHandler中完成。watcherData负责添加监听器。并注册收到通知时候执行OnChange接口的change方法。具体就是在change方法中调用updatePluginMap、updateSelectorMap、updateRuleMap、updateMetaDataMap、updateAuthMap。具体操作就是通知订阅者先删除本地数据，再缓存新数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosCacheHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GROUP</span> <span class="token operator">=</span> <span class="token string">"DEFAULT_GROUP"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PLUGIN_DATA_ID</span> <span class="token operator">=</span> <span class="token string">"soul.plugin.json"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SELECTOR_DATA_ID</span> <span class="token operator">=</span> <span class="token string">"soul.selector.json"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">RULE_DATA_ID</span> <span class="token operator">=</span> <span class="token string">"soul.rule.json"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AUTH_DATA_ID</span> <span class="token operator">=</span> <span class="token string">"soul.auth.json"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">META_DATA_ID</span> <span class="token operator">=</span> <span class="token string">"soul.meta.json"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Listener</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LISTENERS</span> <span class="token operator">=</span> <span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newConcurrentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConfigService</span> configService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NacosCacheHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigService</span> configService<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">,</span>                             <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">,</span>                             <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configService <span class="token operator">=</span> configService<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pluginDataSubscriber <span class="token operator">=</span> pluginDataSubscriber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>metaDataSubscribers <span class="token operator">=</span> metaDataSubscribers<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authDataSubscribers <span class="token operator">=</span> authDataSubscribers<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updatePluginMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// Fix bug #656(https://github.com/dromara/soul/issues/656)</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> pluginDataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toObjectMap</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> <span class="token class-name">PluginData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pluginDataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pluginData <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>subscriber <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">unSubscribe</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"sync plugin data have error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateSelectorMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> selectorDataList <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toObjectMapList</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> <span class="token class-name">SelectorData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            selectorDataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>selectorData <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>subscriber <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">unSelectorSubscribe</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onSelectorSubscribe</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"sync selector data have error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateRuleMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> ruleDataList <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toObjectMapList</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> <span class="token class-name">RuleData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token operator">::</span><span class="token function">stream</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ruleDataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ruleData <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>subscriber <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">unRuleSubscribe</span><span class="token punctuation">(</span>ruleData<span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onRuleSubscribe</span><span class="token punctuation">(</span>ruleData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"sync rule data have error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateMetaDataMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> metaDataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toObjectMap</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> <span class="token class-name">MetaData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            metaDataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>metaData <span class="token operator">-&gt;</span> metaDataSubscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>subscriber <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">unSubscribe</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"sync meta data have error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">updateAuthMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> appAuthDataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toObjectMap</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">,</span> <span class="token class-name">AppAuthData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            appAuthDataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>appAuthData <span class="token operator">-&gt;</span> authDataSubscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>subscriber <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                subscriber<span class="token punctuation">.</span><span class="token function">unSubscribe</span><span class="token punctuation">(</span>appAuthData<span class="token punctuation">)</span><span class="token punctuation">;</span>                subscriber<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span>appAuthData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"sync auth data have error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getConfigAndSignListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Listener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> configService<span class="token punctuation">.</span><span class="token function">getConfigAndSignListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> <span class="token constant">GROUP</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">OnChange</span> oc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Listener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveConfigInfo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> configInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                oc<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>configInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        oc<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token function">getConfigAndSignListener</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">LISTENERS</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">interface</span> <span class="token class-name">OnChange</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> changeData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于对<code>nacos</code>的操作全是通过ConfigService进行。这是<code>nacos</code>的api。<code>nacos</code>这个监听机制是通过http长轮询的方式，原理和<code>soul</code>的http长轮询方式一模一样。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Hystrix插件6</title>
      <link href="/2021/02/04/soul/soul-hystrix-plugin-06/"/>
      <url>/2021/02/04/soul/soul-hystrix-plugin-06/</url>
      
        <content type="html"><![CDATA[<p>前面几篇都聊了Hystrix的基本原理，今天回归主题，看看soul是如何使用Hystrix的。</p><p>首先使用Hystrix就要定义Command，嘿嘿，一看，果然soul里面定义了Command。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * wrap fetch Observable in {@link HystrixCommand} and {@link HystrixCommandOnThread}.     *     * @return {@code Observable&lt;R&gt;} that executes and calls back with the result of command execution     *         or a fallback if the command fails for any reason.     */</span>    <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * whether the 'circuit-breaker' is open.     *     * @return boolean     */</span>    <span class="token keyword">boolean</span> <span class="token function">isCircuitBreakerOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * generate a error when some error occurs.     *     * @param exchange  the exchange     * @param exception exception instance     * @return error which be wrapped by {@link SoulResultWrap}     */</span>    <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">generateError</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> error<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">HystrixRuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">HystrixRuntimeException</span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HystrixRuntimeException</span><span class="token punctuation">)</span> exception<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getFailureType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HystrixRuntimeException<span class="token punctuation">.</span>FailureType</span><span class="token punctuation">.</span><span class="token constant">TIMEOUT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">GATEWAY_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">HystrixTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">GATEWAY_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_TIMEOUT</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">SERVICE_RESULT_ERROR</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> error<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * do fall back when some error occurs on hystrix execute.     * @param exchange {@link ServerWebExchange}     * @param exception {@link Throwable}     * @return {@code Mono&lt;Void&gt;} to indicate when request processing is complete.     */</span>    <span class="token keyword">default</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doFallback</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> error<span class="token punctuation">;</span>            error <span class="token operator">=</span> <span class="token function">generateError</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">DispatcherHandler</span> dispatcherHandler <span class="token operator">=</span>            <span class="token class-name">SpringBeanUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DispatcherHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerWebExchange</span> mutated <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dispatcherHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>mutated<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * get call back uri.     * @return when some error occurs in hystrix invoke it will forward to this     */</span>    <span class="token class-name">URI</span> <span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>soul定义了一个Command接口，定义了fetchObservable()、isCircuitBreakerOpen()、getCallBackUri()三个接口，generateError()、doFallback()两个默认方法。fetchObservable()用来包装command的执行。isCircuitBreakerOpen()用来判断熔断器是否打开。getCallBackUri()用来获取快速失败回退降级的url。generateError()判断了失败的类型返回一个响应。doFallback()方法则是调用远程降级回退接口获取响应。</p><p>HystrixCommand、HystrixCommandOnThread两个Command都实现了Command接口，并分别继承了Hystrix的HystrixObservableCommand、HystrixCommand。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixCommandOnThread</span> <span class="token keyword">extends</span> <span class="token class-name">HystrixCommand</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Mono</span><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">URI</span> callBackUri<span class="token punctuation">;</span>    <span class="token comment">/**     * Instantiates a new Http command.     *     * @param setter      the setter     * @param exchange    the exchange     * @param chain       the chain     * @param callBackUri the call back uri     */</span>    <span class="token keyword">public</span> <span class="token class-name">HystrixCommandOnThread</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HystrixCommand<span class="token punctuation">.</span>Setter</span> setter<span class="token punctuation">,</span>                          <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span>                          <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span>                          <span class="token keyword">final</span> <span class="token class-name">String</span> callBackUri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>setter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>exchange <span class="token operator">=</span> exchange<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chain <span class="token operator">=</span> chain<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callBackUri <span class="token operator">=</span> <span class="token class-name">UriUtils</span><span class="token punctuation">.</span><span class="token function">createUri</span><span class="token punctuation">(</span>callBackUri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RxReactiveStreams</span><span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFailedExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"hystrix execute have error: "</span><span class="token punctuation">,</span> <span class="token function">getExecutionException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token class-name">Throwable</span> exception <span class="token operator">=</span> <span class="token function">getExecutionException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">doFallback</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Observable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">RxReactiveStreams</span><span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">URI</span> <span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> callBackUri<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HystrixCommand、HystrixCommandOnThread的区别就是HystrixObservableCommand、HystrixCommand两者的区别。HystrixCommandOnThread类Hystrix会从线程池中取一个线程以非阻塞方式执行run()，调用线程不必等待run()；HystrixCommand类将以调用线程堵塞执行construct()，调用线程需等待construct()执行完才能继续往下走。</p><p>找到了Command命令，那么接下来应该看看是如何配置Command的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixBuilder</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * this is build HystrixObservableCommand.Setter.     *     * @param hystrixHandle {@linkplain HystrixHandle}     * @return {@linkplain HystrixObservableCommand.Setter}     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HystrixObservableCommand<span class="token punctuation">.</span>Setter</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HystrixHandle</span> hystrixHandle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">initHystrixHandleOnRequire</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixCommandGroupKey</span> groupKey <span class="token operator">=</span> <span class="token class-name">HystrixCommandGroupKey<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixCommandKey</span> commandKey <span class="token operator">=</span> <span class="token class-name">HystrixCommandKey<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixCommandProperties<span class="token punctuation">.</span>Setter</span> propertiesSetter <span class="token operator">=</span>                <span class="token class-name">HystrixCommandProperties<span class="token punctuation">.</span>Setter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionTimeoutInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionIsolationStrategy</span><span class="token punctuation">(</span><span class="token class-name">HystrixCommandProperties<span class="token punctuation">.</span>ExecutionIsolationStrategy</span><span class="token punctuation">.</span><span class="token constant">SEMAPHORE</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionIsolationSemaphoreMaxConcurrentRequests</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getMaxConcurrentRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerSleepWindowInMilliseconds</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">HystrixObservableCommand<span class="token punctuation">.</span>Setter</span>                <span class="token punctuation">.</span><span class="token function">withGroupKey</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandKey</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandPropertiesDefaults</span><span class="token punctuation">(</span>propertiesSetter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * this is build HystrixCommand.Setter.     * @param hystrixHandle {@linkplain HystrixHandle}     * @return {@linkplain HystrixCommand.Setter}     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HystrixCommand<span class="token punctuation">.</span>Setter</span> <span class="token function">buildForHystrixCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HystrixHandle</span> hystrixHandle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">initHystrixHandleOnRequire</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixCommandGroupKey</span> groupKey <span class="token operator">=</span> <span class="token class-name">HystrixCommandGroupKey<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixCommandKey</span> commandKey <span class="token operator">=</span> <span class="token class-name">HystrixCommandKey<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixCommandProperties<span class="token punctuation">.</span>Setter</span> propertiesSetter <span class="token operator">=</span>                <span class="token class-name">HystrixCommandProperties<span class="token punctuation">.</span>Setter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionTimeoutInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerSleepWindowInMilliseconds</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixThreadPoolConfig</span> hystrixThreadPoolConfig <span class="token operator">=</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getHystrixThreadPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HystrixThreadPoolProperties<span class="token punctuation">.</span>Setter</span> threadPoolPropertiesSetter <span class="token operator">=</span>                <span class="token class-name">HystrixThreadPoolProperties<span class="token punctuation">.</span>Setter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withCoreSize</span><span class="token punctuation">(</span>hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">getCoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withMaximumSize</span><span class="token punctuation">(</span>hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">getMaximumSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withMaxQueueSize</span><span class="token punctuation">(</span>hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">getMaxQueueSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withKeepAliveTimeMinutes</span><span class="token punctuation">(</span>hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">getKeepAliveTimeMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withAllowMaximumSizeToDivergeFromCoreSize</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">HystrixCommand<span class="token punctuation">.</span>Setter</span>                <span class="token punctuation">.</span><span class="token function">withGroupKey</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandKey</span><span class="token punctuation">(</span>commandKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandPropertiesDefaults</span><span class="token punctuation">(</span>propertiesSetter<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andThreadPoolPropertiesDefaults</span><span class="token punctuation">(</span>threadPoolPropertiesSetter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initHystrixHandleOnRequire</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HystrixHandle</span> hystrixHandle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getMaxConcurrentRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixHandle<span class="token punctuation">.</span><span class="token function">setMaxConcurrentRequests</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">MAX_CONCURRENT_REQUESTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixHandle<span class="token punctuation">.</span><span class="token function">setErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ERROR_THRESHOLD_PERCENTAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixHandle<span class="token punctuation">.</span><span class="token function">setRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">REQUEST_VOLUME_THRESHOLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixHandle<span class="token punctuation">.</span><span class="token function">setSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">SLEEP_WINDOW_INMILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getHystrixThreadPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixHandle<span class="token punctuation">.</span><span class="token function">setHystrixThreadPoolConfig</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HystrixThreadPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">HystrixThreadPoolConfig</span> hystrixThreadPoolConfig <span class="token operator">=</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getHystrixThreadPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">getCoreSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">setCoreSize</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HYSTRIX_THREAD_POOL_CORE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">getMaximumSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">setMaximumSize</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HYSTRIX_THREAD_POOL_MAX_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">getMaxQueueSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixThreadPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxQueueSize</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HYSTRIX_THREAD_POOL_QUEUE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为Command的配置很多，所以此处使用了建造者模式通过建造者进行配置。好了，前面学到的两种资源隔离模式来了。两个build方法分别构建了线程隔离模式、信号量隔离模式。而其它的配置全部来自admin同步过来的数据配置。</p><p>万事俱备只欠东风，Hystrix的东西都齐活了，那就等上帝之手把它串联运用起来了。HystrixPlugin就是上帝之手。所有的逻辑都在doExecute中进行串联。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixPlugin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSoulPlugin</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> soulContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">HystrixHandle</span> hystrixHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">HystrixHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixHandle<span class="token punctuation">.</span><span class="token function">setGroupKey</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hystrixHandle<span class="token punctuation">.</span><span class="token function">setCommandKey</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Command</span> command <span class="token operator">=</span> <span class="token function">fetchCommand</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Subscription</span> sub <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">fetchObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>s<span class="token operator">::</span><span class="token function">success</span><span class="token punctuation">,</span>                    s<span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">,</span> s<span class="token operator">::</span><span class="token function">success</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">onCancel</span><span class="token punctuation">(</span>sub<span class="token operator">::</span><span class="token function">unsubscribe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">isCircuitBreakerOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"hystrix execute have circuitBreaker is Open! groupKey:{},commandKey:{}"</span><span class="token punctuation">,</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getGroupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"hystrix execute exception:"</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CLIENT_RESPONSE_RESULT_TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ResultEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> <span class="token function">fetchCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HystrixHandle</span> hystrixHandle<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">.</span><span class="token function">getExecutionIsolationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">HystrixIsolationModeEnum</span><span class="token punctuation">.</span><span class="token constant">SEMAPHORE</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommand</span><span class="token punctuation">(</span><span class="token class-name">HystrixBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>                exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommandOnThread</span><span class="token punctuation">(</span><span class="token class-name">HystrixBuilder</span><span class="token punctuation">.</span><span class="token function">buildForHystrixCommand</span><span class="token punctuation">(</span>hystrixHandle<span class="token punctuation">)</span><span class="token punctuation">,</span>            exchange<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> hystrixHandle<span class="token punctuation">.</span><span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">PluginEnum</span><span class="token punctuation">.</span><span class="token constant">HYSTRIX</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">PluginEnum</span><span class="token punctuation">.</span><span class="token constant">HYSTRIX</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doExcuete中根据配置创建一个基于线程隔离还是信号量隔离的Command，执行command的fetchObservable()方法。这样就把Hystrix使用起来了。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doFallback</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> error<span class="token punctuation">;</span>            error <span class="token operator">=</span> <span class="token function">generateError</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">DispatcherHandler</span> dispatcherHandler <span class="token operator">=</span>            <span class="token class-name">SpringBeanUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DispatcherHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token function">getCallBackUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerWebExchange</span> mutated <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dispatcherHandler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>mutated<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doFallback是否应该包装在Command中执行，防止降级服务也跨了引起问题。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Hystrix插件5</title>
      <link href="/2021/02/03/soul/soul-hystrix-plugin-05/"/>
      <url>/2021/02/03/soul/soul-hystrix-plugin-05/</url>
      
        <content type="html"><![CDATA[<p>上一篇了解了Hystrix的熔断机制，今天我们再看看回退和降级</p><h2 id="回退降级"><a href="#回退降级" class="headerlink" title="回退降级"></a>回退降级</h2><p>降级，通常指务高峰期，为了保证核心服务正常运行，需要停掉一些不太重要的业务，或者某些服务不可用时，执行备用逻辑从故障服务中快速失败或快速返回，以保障主体业务不受影响。Hystrix提供的降级主要是为了容错，保证当前服务不受依赖服务故障的影响，从而提高服务的健壮性。要支持回退或降级处理，可以重写HystrixCommand的getFallBack方法或HystrixObservableCommand的resumeWithFallback方法。</p><h2 id="Hystrix何时会触发降级"><a href="#Hystrix何时会触发降级" class="headerlink" title="Hystrix何时会触发降级"></a>Hystrix何时会触发降级</h2><ul><li>执行construct()或run()抛出异常</li><li>熔断器打开导致命令短路</li><li>命令的线程池和队列或信号量的容量超额，命令被拒绝</li><li>命令执行超时</li></ul><h2 id="降级回退方式"><a href="#降级回退方式" class="headerlink" title="降级回退方式"></a>降级回退方式</h2><h3 id="Fail-Fast-快速失败"><a href="#Fail-Fast-快速失败" class="headerlink" title="Fail Fast 快速失败"></a>Fail Fast 快速失败</h3><p>快速失败是最普通的命令执行方法，命令没有重写降级逻辑。 如果命令执行发生任何类型的故障，它将直接抛出异常。</p><h3 id="Fail-Silent-无声失败"><a href="#Fail-Silent-无声失败" class="headerlink" title="Fail Silent 无声失败"></a>Fail Silent 无声失败</h3><p>指在降级方法中通过返回null，空Map，空List或其他类似的响应来完成</p><h3 id="Fallback-Static"><a href="#Fallback-Static" class="headerlink" title="Fallback: Static"></a>Fallback: Static</h3><p>指在降级方法中返回静态默认值。 这不会导致服务以“无声失败”的方式被删除，而是导致默认行为发生。如：应用根据命令执行返回true / false执行相应逻辑，但命令执行失败，则默认为true</p><h3 id="Fallback-Stubbed"><a href="#Fallback-Stubbed" class="headerlink" title="Fallback: Stubbed"></a>Fallback: Stubbed</h3><p>当命令返回一个包含多个字段的复合对象时，适合以Stubbed 的方式回退</p><h3 id="Fallback-Cache-via-Network"><a href="#Fallback-Cache-via-Network" class="headerlink" title="Fallback: Cache via Network"></a>Fallback: Cache via Network</h3><p>有时，如果调用依赖服务失败，可以从缓存服务（如redis）中查询旧数据版本。由于又会发起远程调用，所以建议重新封装一个Command，使用不同的ThreadPoolKey，与主线程池进行隔离。</p><h3 id="Primary-Secondary-with-Fallback"><a href="#Primary-Secondary-with-Fallback" class="headerlink" title="Primary + Secondary with Fallback"></a>Primary + Secondary with Fallback</h3><p>有时系统具有两种行为- 主要和次要，或主要和故障转移。主要和次要逻辑涉及到不同的网络调用和业务逻辑，所以需要将主次逻辑封装在不同的Command中，使用线程池进行隔离。为了实现主从逻辑切换，可以将主次command封装在外观HystrixCommand的run方法中，并结合配置中心设置的开关切换主从逻辑。由于主次逻辑都是经过线程池隔离的HystrixCommand，因此外观HystrixCommand可以使用信号量隔离，而没有必要使用线程池隔离引入不必要的开销</p><p>主次模型的使用场景还是很多的。如当系统升级新功能时，如果新版本的功能出现问题，通过开关控制降级调用旧版本的功能</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Hystrix插件4</title>
      <link href="/2021/02/02/soul/soul-hystrix-plugin-04/"/>
      <url>/2021/02/02/soul/soul-hystrix-plugin-04/</url>
      
        <content type="html"><![CDATA[<p>上篇了解了Hystrix的资源隔离的两种方式，线程池和信号量。今天我们再看看Hystrix的熔断。</p><h2 id="什么是熔断"><a href="#什么是熔断" class="headerlink" title="什么是熔断"></a>什么是熔断</h2><p>现实生活中，可能大家都有注意到家庭电路中通常会安装一个保险盒，当负载过载时，保险盒中的保险丝会自动熔断，以保护电路及家里的各种电器，这就是熔断器的一个常见例子。Hystrix中的熔断器(Circuit Breaker)也是起类似作用，Hystrix在运行过程中会向每个commandKey对应的熔断器报告成功、失败、超时和拒绝的状态，熔断器维护并统计这些数据，并根据这些统计信息来决策熔断开关是否打开。如果打开，熔断后续请求，快速返回。隔一段时间（默认是5s）之后熔断器尝试半开，放入一部分流量请求进来，相当于对依赖服务进行一次健康检查，如果请求成功，熔断器关闭。</p><h2 id="熔断器配置"><a href="#熔断器配置" class="headerlink" title="熔断器配置"></a>熔断器配置</h2><p>Circuit Breaker主要包括如下6个参数：</p><ul><li>circuitBreaker.enabled</li></ul><p>是否启用熔断器，默认是TRUE。</p><ul><li>circuitBreaker.forceOpen</li></ul><p>熔断器强制打开，始终保持打开状态，不关注熔断开关的实际状态。默认值FLASE。</p><ul><li>circuitBreaker.forceClosed</li></ul><p>熔断器强制关闭，始终保持关闭状态，不关注熔断开关的实际状态。默认值FLASE。</p><ul><li>circuitBreaker.errorThresholdPercentage</li></ul><p>错误率，默认值50%，例如一段时间（10s）内有100个请求，其中有54个超时或者异常，那么这段时间内的错误率是54%，大于了默认值50%，这种情况下会触发熔断器打开。</p><ul><li>circuitBreaker.requestVolumeThreshold</li></ul><p>默认值20。含义是一段时间内至少有20个请求才进行errorThresholdPercentage计算。比如一段时间了有19个请求，且这些请求全部失败了，错误率是100%，但熔断器不会打开，总请求数不满足20。</p><ul><li>circuitBreaker.sleepWindowInMilliseconds</li></ul><p>半开状态试探睡眠时间，默认值5000ms。如：当熔断器开启5000ms之后，会尝试放过去一部分流量进行试探，确定依赖服务是否恢复。</p><h2 id="熔断器工作原理"><a href="#熔断器工作原理" class="headerlink" title="熔断器工作原理"></a>熔断器工作原理</h2><p><img src="/medias/assets/soul/20210204011725-9i0vn6r-1.png"></p><p><strong>第一步</strong>，调用allowRequest()判断是否允许将请求提交到线程池</p><ol><li>如果熔断器强制打开，circuitBreaker.forceOpen为true，不允许放行，返回。</li><li>如果熔断器强制关闭，circuitBreaker.forceClosed为true，允许放行。此外不必关注熔断器实际状态，也就是说熔断器仍然会维护统计数据和开关状态，只是不生效而已。</li></ol><p><strong>第二步</strong>，调用isOpen()判断熔断器开关是否打开</p><ol><li>如果熔断器开关打开，进入第三步，否则继续；</li><li>如果一个周期内总的请求数小于circuitBreaker.requestVolumeThreshold的值，允许请求放行，否则继续；</li><li>如果一个周期内错误率小于circuitBreaker.errorThresholdPercentage的值，允许请求放行。否则，打开熔断器开关，进入第三步。</li></ol><p><strong>第三步</strong>，调用allowSingleTest()判断是否允许单个请求通行，检查依赖服务是否恢复</p><ol><li>如果熔断器打开，且距离熔断器打开的时间或上一次试探请求放行的时间超过circuitBreaker.sleepWindowInMilliseconds的值时，熔断器器进入半开状态，允许放行一个试探请求；否则，不允许放行。</li></ol><p>此外，为了提供决策依据，每个熔断器默认维护了10个bucket，每秒一个bucket，当新的bucket被创建时，最旧的bucket会被抛弃。其中每个blucket维护了请求成功、失败、超时、拒绝的计数器，Hystrix负责收集并统计这些计数器。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Hystrix插件3</title>
      <link href="/2021/02/01/soul/soul-hystrix-plugin-03/"/>
      <url>/2021/02/01/soul/soul-hystrix-plugin-03/</url>
      
        <content type="html"><![CDATA[<p>上一篇我们看了一个Hystrix的入门例子，了解了Hystrix的工作流程。今天我们再来看看Hystrix的命令执行的方式、资源的隔离类型。</p><h2 id="执行命令的几种方法"><a href="#执行命令的几种方法" class="headerlink" title="执行命令的几种方法"></a>执行命令的几种方法</h2><p>Hystrix提供了4种执行命令的方法，execute()和queue() 适用于HystrixCommand对象，而observe()和toObservable()适用于HystrixObservableCommand对象。</p><p><strong>execute()</strong></p><p>以同步阻塞方式执行run()，只支持接收一个值对象。hystrix会从线程池中取一个线程来执行run()，并等待返回值。</p><p><strong>queue()</strong></p><p>以异步非阻塞方式执行run()，只支持接收一个值对象。调用queue()就直接返回一个Future对象。可通过 Future.get()拿到run()的返回结果，但Future.get()是阻塞执行的。若执行成功，Future.get()返回单个返回值。当执行失败时，如果没有重写fallback，Future.get()抛出异常。</p><p><strong>observe()</strong></p><p>事件注册前执行run()/construct()，支持接收多个值对象，取决于发射源。调用observe()会返回一个hot Observable，也就是说，调用observe()自动触发执行run()/construct()，无论是否存在订阅者。</p><p>如果继承的是HystrixCommand，hystrix会从线程池中取一个线程以非阻塞方式执行run()；如果继承的是HystrixObservableCommand，将以调用线程阻塞执行construct()</p><p>observe()使用方法：</p><ol><li>调用observe()会返回一个Observable对象</li><li>调用这个Observable对象的subscribe()方法完成事件注册，从而获取结果</li></ol><p><strong>toObservable()</strong></p><p>事件注册后执行run()/construct()，支持接收多个值对象，取决于发射源。调用toObservable()会返回一个cold Observable，也就是说，调用toObservable()不会立即触发执行run()/construct()，必须有订阅者订阅Observable时才会执行。</p><p>如果继承的是HystrixCommand，hystrix会从线程池中取一个线程以非阻塞方式执行run()，调用线程不必等待run()；如果继承的是HystrixObservableCommand，将以调用线程堵塞执行construct()，调用线程需等待construct()执行完才能继续往下走。</p><p>toObservable()使用方法：</p><ol><li>调用observe()会返回一个Observable对象</li><li>调用这个Observable对象的subscribe()方法完成事件注册，从而获取结果</li></ol><p>需注意的是，HystrixCommand也支持toObservable()和observe()，但是即使将HystrixCommand转换成Observable，它也只能发射一个值对象。只有HystrixObservableCommand才支持发射多个值对象。</p><p><strong>几种方法的关系</strong></p><ul><li>execute()实际是调用了queue().get()</li><li>queue()实际调用了toObservable().toBlocking().toFuture()</li><li>observe()实际调用toObservable()获得一个cold Observable，再创建一个ReplaySubject对象订阅Observable，将源Observable转化为hot Observable。因此调用observe()会自动触发执行run()/construct()。</li></ul><p>Hystrix总是以Observable的形式作为响应返回，不同执行命令的方法只是进行了相应的转换。</p><h2 id="Hystrix容错"><a href="#Hystrix容错" class="headerlink" title="Hystrix容错"></a>Hystrix容错</h2><p>Hystrix的容错主要是通过添加容许延迟和容错方法，帮助控制这些分布式服务之间的交互。 还通过隔离服务之间的访问点，阻止它们之间的级联故障以及提供回退选项来实现这一点，从而提高系统的整体弹性。Hystrix主要提供了以下几种容错方法：</p><ul><li>资源隔离</li><li>熔断</li><li>降级</li></ul><h2 id="资源隔离"><a href="#资源隔离" class="headerlink" title="资源隔离"></a>资源隔离</h2><p>资源隔离主要指对线程的隔离。Hystrix提供了两种线程隔离方式：线程池和信号量。</p><h3 id="线程隔离-线程池"><a href="#线程隔离-线程池" class="headerlink" title="线程隔离-线程池"></a><strong>线程隔离-线程池</strong></h3><p>Hystrix通过命令模式对发送请求的对象和执行请求的对象进行解耦，将不同类型的业务请求封装为对应的命令请求。Hystrix为每个类型的Command配置一个线程池，当第一次创建Command时，根据配置创建一个线程池，并放入ConcurrentHashMap。相同类型的Command将会重用已创建的线程池。通过将发送请求线程与执行请求的线程分离，可有效防止发生级联故障。当线程池或请求队列饱和时，Hystrix将拒绝服务，使得请求线程可以快速失败，从而避免依赖问题扩散。</p><h4 id="线程池隔离优缺点"><a href="#线程池隔离优缺点" class="headerlink" title="线程池隔离优缺点"></a><strong>线程池隔离优缺点</strong></h4><p><strong>优点：</strong></p><ul><li>保护应用程序以免受来自依赖故障的影响，指定依赖线程池饱和不会影响应用程序的其余部分。</li><li>当引入新客户端lib时，即使发生问题，也是在本lib中，并不会影响到其他内容。</li><li>当依赖从故障恢复正常时，应用程序会立即恢复正常的性能。</li><li>当应用程序一些配置参数错误时，线程池的运行状况会很快检测到这一点（通过增加错误，延迟，超时，拒绝等），同时可以通过动态属性进行实时纠正错误的参数配置。</li><li>如果服务的性能有变化，需要实时调整，比如增加或者减少超时时间，更改重试次数，可以通过线程池指标动态属性修改，而且不会影响到其他调用请求。</li><li>除了隔离优势外，hystrix拥有专门的线程池可提供内置的并发功能，使得可以在同步调用之上构建异步门面（外观模式），为异步编程提供了支持（Hystrix引入了Rxjava异步框架）。</li></ul><p>注意：尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置或响应线程中断，不能无限制的阻塞以致线程池一直饱和。</p><p><strong>缺点：</strong></p><p>线程池的主要缺点是增加了计算开销。每个命令的执行都在单独的线程完成，增加了排队、调度和上下文切换的开销。因此，要使用Hystrix，就必须接受它带来的开销，以换取它所提供的好处。</p><p>通常情况下，线程池引入的开销足够小，不会有重大的成本或性能影响。但对于一些访问延迟极低的服务，如只依赖内存缓存，线程池引入的开销就比较明显了，这时候使用线程池隔离技术就不适合了，我们需要考虑更轻量级的方式，如信号量隔离。</p><h3 id="线程隔离-信号量"><a href="#线程隔离-信号量" class="headerlink" title="线程隔离-信号量"></a><strong>线程隔离-信号量</strong></h3><p>上面提到了线程池隔离的缺点，当依赖延迟极低的服务时，线程池隔离技术引入的开销超过了它所带来的好处。这时候可以使用信号量隔离技术来代替，通过设置信号量来限制对任何给定依赖的并发调用量。使用线程池时，发送请求的线程和执行依赖服务的线程不是同一个，而使用信号量时，发送请求的线程和执行依赖服务的线程是同一个，都是发起请求的线程。</p><p>由于Hystrix默认使用线程池做线程隔离，使用信号量隔离需要显示地将属性execution.isolation.strategy设置为ExecutionIsolationStrategy.SEMAPHORE，同时配置信号量个数，默认为10。客户端需向依赖服务发起请求时，首先要获取一个信号量才能真正发起调用，由于信号量的数量有限，当并发请求量超过信号量个数时，后续的请求都会直接拒绝，进入fallback流程。</p><p>信号量隔离主要是通过控制并发请求量，防止请求线程大面积阻塞，从而达到限流和防止雪崩的目的。</p><h3 id="资源隔离总结"><a href="#资源隔离总结" class="headerlink" title="资源隔离总结"></a>资源隔离总结</h3><p>线程池和信号量都支持熔断和限流。相比线程池，信号量不需要线程切换，因此避免了不必要的开销。但是信号量不支持异步，也不支持超时，也就是说当所请求的服务不可用时，信号量会控制超过限制的请求立即返回，但是已经持有信号量的线程只能等待服务响应或从超时中返回，即可能出现长时间等待。线程池模式下，当超过指定时间未响应的服务，Hystrix会通过响应中断的方式通知线程立即结束并返回。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Hystrix插件2</title>
      <link href="/2021/01/30/soul/soul-hystrix-plugin-02/"/>
      <url>/2021/01/30/soul/soul-hystrix-plugin-02/</url>
      
        <content type="html"><![CDATA[<p>上一篇从宏观上认识了Hystrix，大体了解了Hystrix是什么，能解决什么问题。今天我们再从一个入门例子看起，看看具体怎么使用，过程怎么执行。</p><ul><li>继承HystrixCommand，进行简单的配置</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsCommand</span> <span class="token keyword">extends</span> <span class="token class-name">HystrixCommand</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GoodsService</span> goodsService<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">GoodsCommand</span><span class="token punctuation">(</span><span class="token class-name">GoodsService</span> goodsService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Setter</span><span class="token punctuation">.</span><span class="token function">withGroupKey</span><span class="token punctuation">(</span><span class="token class-name">HystrixCommandGroupKey<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"GoodsService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandKey</span><span class="token punctuation">(</span><span class="token class-name">HystrixCommandKey<span class="token punctuation">.</span>Factory</span><span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"QueryGoodsById"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andCommandPropertiesDefaults</span><span class="token punctuation">(</span><span class="token class-name">HystrixCommandProperties<span class="token punctuation">.</span>Setter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment">//至少有10个请求，熔断器才进行错误率的计算</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerRequestVolumeThreshold</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                        <span class="token comment">//熔断器中断请求5秒后会进入半打开状态,放部分流量过去重试</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerSleepWindowInMilliseconds</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span>                        <span class="token comment">//错误率达到50开启熔断保护</span>                        <span class="token punctuation">.</span><span class="token function">withCircuitBreakerErrorThresholdPercentage</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">withExecutionTimeoutEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andThreadPoolPropertiesDefaults</span><span class="token punctuation">(</span><span class="token class-name">HystrixThreadPoolProperties                        <span class="token punctuation">.</span>Setter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withCoreSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>goodsService <span class="token operator">=</span> goodsService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> goodsService<span class="token punctuation">.</span><span class="token function">queryGoodsById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">getFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实际请求对象的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">queryGoodsById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用HystrixCommand的execute方法发起请求</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsCommandMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GoodsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/assets/soul//20210130230824-sftkfix-Dingtalk_20210130230810.jpg" alt="Dingtalk20210130230810.jpg"></p><p>看到请求正常执行。</p><ul><li>熔断测试</li></ul><p>在queryGoodsById的前10个请求抛出异常进行测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">queryGoodsById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        id<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">GoodsService</span> goodsService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsCommand</span><span class="token punctuation">(</span>goodsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoodsCommand</span><span class="token punctuation">(</span>goodsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--&gt;"</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token time number">23:25:14.686</span> <span class="token punctuation">[</span>hystrix<span class="token operator">-</span>GoodsService<span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token level debug keyword">DEBUG</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>AbstractCommand <span class="token operator">-</span> Error executing HystrixCommand<span class="token punctuation">.</span>run<span class="token operator">(</span><span class="token operator">)</span><span class="token punctuation">.</span> Proceeding to fallback logic <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token exception javastacktrace language-javastacktrace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token punctuation">:</span> null<span class="token keyword">at</span> io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>GoodsService<span class="token punctuation">.</span><span class="token function">queryGoodsById</span><span class="token punctuation">(</span>GoodsService<span class="token punctuation">.</span>java<span class="token punctuation">:</span>20<span class="token punctuation">)</span><span class="token keyword">at</span> io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>GoodsCommand<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GoodsCommand<span class="token punctuation">.</span>java<span class="token punctuation">:</span>27<span class="token punctuation">)</span><span class="token keyword">at</span> io<span class="token punctuation">.</span>zjh<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>GoodsCommand<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GoodsCommand<span class="token punctuation">.</span>java<span class="token punctuation">:</span>5<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>HystrixCommand$2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>HystrixCommand<span class="token punctuation">.</span>java<span class="token punctuation">:</span>302<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>HystrixCommand$2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>HystrixCommand<span class="token punctuation">.</span>java<span class="token punctuation">:</span>298<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeDefer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeDefer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>46<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeDefer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeDefer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>35<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>48<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>30<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>48<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>30<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>48<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>30<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">unsafeSubscribe</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span>java<span class="token punctuation">:</span>10327<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeDefer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeDefer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>51<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeDefer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeDefer<span class="token punctuation">.</span>java<span class="token punctuation">:</span>35<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">unsafeSubscribe</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span>java<span class="token punctuation">:</span>10327<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeDoOnEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeDoOnEach<span class="token punctuation">.</span>java<span class="token punctuation">:</span>41<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeDoOnEach<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeDoOnEach<span class="token punctuation">.</span>java<span class="token punctuation">:</span>30<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>48<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OnSubscribeLift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OnSubscribeLift<span class="token punctuation">.</span>java<span class="token punctuation">:</span>30<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">unsafeSubscribe</span><span class="token punctuation">(</span>Observable<span class="token punctuation">.</span>java<span class="token punctuation">:</span>10327<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>operators<span class="token punctuation">.</span>OperatorSubscribeOn$SubscribeOnSubscriber<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>OperatorSubscribeOn<span class="token punctuation">.</span>java<span class="token punctuation">:</span>100<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>HystrixContexSchedulerAction$1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>HystrixContexSchedulerAction<span class="token punctuation">.</span>java<span class="token punctuation">:</span>56<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>HystrixContexSchedulerAction$1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>HystrixContexSchedulerAction<span class="token punctuation">.</span>java<span class="token punctuation">:</span>47<span class="token punctuation">)</span><span class="token keyword">at</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>concurrency<span class="token punctuation">.</span>HystrixContexSchedulerAction<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>HystrixContexSchedulerAction<span class="token punctuation">.</span>java<span class="token punctuation">:</span>69<span class="token punctuation">)</span><span class="token keyword">at</span> rx<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>schedulers<span class="token punctuation">.</span>ScheduledAction<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ScheduledAction<span class="token punctuation">.</span>java<span class="token punctuation">:</span>55<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors$RunnableAdapter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span>java<span class="token punctuation">:</span>511<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">.</span><span class="token function">run$$$capture</span><span class="token punctuation">(</span>FutureTask<span class="token punctuation">.</span>java<span class="token punctuation">:</span>266<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>FutureTask<span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>1149<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token punctuation">:</span>624<span class="token punctuation">)</span><span class="token keyword">at</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token punctuation">:</span>748<span class="token punctuation">)</span></span><span class="token operator">-</span><span class="token number">1</span><span class="token number">10</span><span class="token number">11</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">13</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">14</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">15</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">16</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">17</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">18</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">19</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">20</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看到，前10次请求都因抛出异常而走到了fallback流程，直接返回了-1，然后过了3个请求，熔断器的统计数据开始发挥了作用，开始进行熔断了，直接快速失败走fallback。然后暂停6s中后继续发起请求，熔断器进入了半开状态，放行一个试探成功后，熔断器关闭，后续的请求就恢复正常了。</p><h2 id="总结：Hystrix工作流程"><a href="#总结：Hystrix工作流程" class="headerlink" title="总结：Hystrix工作流程"></a>总结：Hystrix工作流程</h2><p><img src="/medias/assets/soul//20210130230413-7uyjlm5-%E4%B8%8B%E8%BD%BD.png" alt="下载.png"></p><ol><li>构造一个 HystrixCommand或HystrixObservableCommand对象，用于封装请求，并在构造方法配置请求被执行需要的参数；</li><li>执行命令；</li><li>判断是否使用缓存响应请求，若启用了缓存，且缓存可用，直接使用缓存响应请求。Hystrix支持请求缓存，但需要用户自定义启动；</li><li>判断熔断器是否打开，如果打开，跳到第8步；</li><li>判断线程池/队列/信号量是否已满，已满则跳到第8步；</li><li>执行HystrixObservableCommand.construct()或HystrixCommand.run()，如果执行失败或者超时，跳到第8步；否则，跳到第9步；</li><li>统计熔断器监控指标；</li><li>走Fallback备用逻辑</li><li>返回请求响应</li></ol>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Hystrix插件1</title>
      <link href="/2021/01/29/soul/soul-hystrix-plugin-01/"/>
      <url>/2021/01/29/soul/soul-hystrix-plugin-01/</url>
      
        <content type="html"><![CDATA[<p>soul hystrix插件是网关用来对流量进行熔断的核心实现，使用的是信号量的方式来处理请求。</p><h2 id="什么是Hystrix？"><a href="#什么是Hystrix？" class="headerlink" title="什么是Hystrix？"></a>什么是Hystrix？</h2><p>在分布式环境中，不可避免地会有许多服务依赖项中的某些失败。Hystrix是一个库，可通过添加延迟公差和容错逻辑来帮助控制这些分布式服务之间的交互。Hystrix通过隔离服务之间的访问点，停止服务之间的级联故障并提供后备选项来实现此目的，所有这些都可以提高系统的整体弹性。</p><h2 id="Hystrix的作用是什么？"><a href="#Hystrix的作用是什么？" class="headerlink" title="Hystrix的作用是什么？"></a>Hystrix的作用是什么？</h2><ul><li>提供保护并控制延迟和失败，以及通过第三方客户端库（通常是通过网络）访问的依赖项的失败。</li><li>停止复杂的分布式系统中的级联故障。</li><li>快速失败并快速恢复。</li><li>回退并在可能的情况下正常降级。</li><li>启用近乎实时的监视，警报和操作控制。</li></ul><h2 id="Hystrix解决什么问题？"><a href="#Hystrix解决什么问题？" class="headerlink" title="Hystrix解决什么问题？"></a>Hystrix解决什么问题？</h2><p>复杂分布式体系结构中的应用程序具有数十种依赖关系，每种依赖关系不可避免地会在某个时刻失败。如果主机应用程序未与这些外部故障隔离开来，则会收到影响甚至拖垮。</p><p>当一切正常时，请求流如下所示：</p><p><img src="/medias/assets/soul//20210129221251-ro5b9qf-soa-1-640.png" alt="soa1640.png"></p><p>当许多后端系统之一变得潜在时，它可以阻止整个用户请求：</p><p><img src="/medias/assets/soul//20210129221417-5oler0x-soa-2-640.png" alt="soa2640.png"></p><p>随着高流量，单个后端依赖关系变得潜在，这可能导致所有服务器上的所有资源在几秒钟内变得饱和。</p><p>应用程序中可能会导致网络请求的，通过网络或客户端库延伸的每个点都是潜在故障的根源。比故障更糟糕的是，这些应用程序还会导致服务之间的等待时间增加，从而备份队列，线程和其他系统资源，从而导致整个系统出现更多级联故障。</p><p><img src="/medias/assets/soul//20210129221629-i1bcn6h-soa-3-640.png" alt="soa3640.png"></p><p>当通过第三方客户端执行网络访问时，这些问题会更加严重。“第三方”是一个隐藏了实施细节的“黑匣子”，可以随时更改，并且每个客户端库的网络或资源配置都不相同，并且通常难以监视和监控。更改。</p><p>更糟糕的是，传递依赖项会执行潜在的昂贵或易出错的网络调用，而不会被应用程序明确调用。</p><p>网络连接失败或降级。服务和服务器出现故障或变慢。新的库或服务部署会更改行为或性能特征。客户端库有错误。</p><p>所有这些都代表需要隔离和管理的故障和延迟，以使单个故障依赖项无法关闭整个应用程序或系统。</p><h2 id="Hystrix的设计原则是什么？"><a href="#Hystrix的设计原则是什么？" class="headerlink" title="Hystrix的设计原则是什么？"></a>Hystrix的设计原则是什么？</h2><ul><li>防止任何单个依赖项耗尽所有容器（例如Tomcat）用户线程。</li><li>减少负载并快速失败，而不是排队。</li><li>在可行的情况下提供备用，以保护用户免受故障的影响。</li><li>使用隔离技术（例如隔板，泳道和断路器模式）来限制任何一种依赖关系的影响。</li><li>通过近实时指标，监视和警报优化发现时间</li><li>通过在Hystrix的大多数方面中以低延迟传播配置更改来优化恢复时间，并支持动态属性更改，这可以通过低延迟反馈回路进行实时操作修改。</li><li>防止整个依赖项客户端执行失败，而不仅仅是网络流量失败。</li></ul><h2 id="Hystrix如何实现其目标？"><a href="#Hystrix如何实现其目标？" class="headerlink" title="Hystrix如何实现其目标？"></a>Hystrix如何实现其目标？</h2><ul><li>将对外部系统（或“依赖项”）的所有调用包装在通常在单独线程中执行的<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>对象中（这是<a href="http://en.wikipedia.org/wiki/Command_pattern">命令模式</a>的示例）。</li><li>超时呼叫花费的时间超过您定义的阈值。有一个默认值，但是对于大多数依赖项，您可以通过“属性”自定义设置这些超时，以使它们略高于针对每个依赖项测得的99.5个百分点的性能。</li><li>为每个依赖项维护一个小的线程池（或信号灯）；如果已满，发往该依赖项的请求将立即被拒绝，而不是排队。</li><li>测量成功，失败（客户端抛出的异常），超时和线程拒绝。</li><li>如果某个服务的错误百分比超过阈值，则使断路器跳闸，以在一段时间内手动或自动停止所有对特定服务的请求。</li><li>当请求失败，被拒绝，超时或短路时执行回退逻辑。</li><li>几乎实时监控指标和配置更改。</li></ul><h2 id="使用Hystrix后的系统"><a href="#使用Hystrix后的系统" class="headerlink" title="使用Hystrix后的系统"></a>使用Hystrix后的系统</h2><p><img src="/medias/assets/soul//20210129222225-9vtj0c7-soa-4-isolation-640.png" alt="soa4isolation640.png"></p><p>当使用Hystrix封装每个基础依赖项时，每个依赖项都是相互隔离的，受到延迟时发生饱和的资源的限制，并包含回退逻辑，该逻辑决定了在依赖项中发生任何类型的故障时做出什么响应。</p><h2 id="soul-中如何使用Hystrix插件"><a href="#soul-中如何使用Hystrix插件" class="headerlink" title="soul 中如何使用Hystrix插件"></a>soul 中如何使用Hystrix插件</h2><ul><li>网关中引入依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.dromara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>soul-spring-boot-starter-plugin-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${last.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启插件，配置选择器、规则</li></ul><p><img src="/medias/assets/soul//20210129231901-dcf7ysi-image.png" alt="image.png"></p><ul><li>模拟一个超时请求</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/findByUserId"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">findByUserId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userDTO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    userDTO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> userDTO<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>请求接口获得响应，发现已经执行了降级处理</li></ul><p><img src="/medias/assets/soul//20210129232041-oyhupoy-image.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Global插件</title>
      <link href="/2021/01/28/soul/soul-global-plugin/"/>
      <url>/2021/01/28/soul/soul-global-plugin/</url>
      
        <content type="html"><![CDATA[<p>soul global plugin是做什么的呢？这个官方文档里面没有提及，其实是因为这个插件是个面向开发的这么一个插件。那么它具体有什么作用呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">SoulPlugin</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SoulContextBuilder</span> builder<span class="token punctuation">;</span>    <span class="token comment">/**     * Instantiates a new Global plugin.     *     * @param builder the builder     */</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalPlugin</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SoulContextBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> upgrade <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"Upgrade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoulContext</span> soulContext<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>upgrade<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"websocket"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>upgrade<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            soulContext <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queryParams <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            soulContext <span class="token operator">=</span> <span class="token function">transformMap</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">,</span> soulContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SoulContext</span> <span class="token function">transformMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queryParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoulContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setModule</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">MODULE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">RPC_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> soulContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"global"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的代码可以看到，其实现了SoulPlugin接口，是个标准的插件，可以直接加到职责链中运行。做的事情就是构造一个上下文对象SoulContext。因为SoulContext的参数很多，所以使用了建造者模式，委托给了一个DefaultSoulContextBuilder去构造。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSoulContextBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">SoulContextBuilder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">SoulContext</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MetaData</span> metaData <span class="token operator">=</span> <span class="token class-name">MetaDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> metaData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * ServerHttpRequest transform RequestDTO .     *     * @param request {@linkplain ServerHttpRequest}     * @return RequestDTO request dto     */</span>    <span class="token keyword">private</span> <span class="token class-name">SoulContext</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> appKey <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">APP_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> sign <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">SIGN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> timestamp <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">TIMESTAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoulContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> metaData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">SPRING_CLOUD</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setSoulContextByHttp</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>                soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">DUBBO</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setSoulContextByDubbo</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">SOFA</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setSoulContextBySofa</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">TARS</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setSoulContextByTars</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">setSoulContextByHttp</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>                soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">setSoulContextByHttp</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>            soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        soulContext<span class="token punctuation">.</span><span class="token function">setAppKey</span><span class="token punctuation">(</span>appKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setSign</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setStartDateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>httpMethod <span class="token operator">-&gt;</span> soulContext<span class="token punctuation">.</span><span class="token function">setHttpMethod</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> soulContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setSoulContextByDubbo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        soulContext<span class="token punctuation">.</span><span class="token function">setModule</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setContextPath</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setSoulContextBySofa</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        soulContext<span class="token punctuation">.</span><span class="token function">setModule</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setContextPath</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setSoulContextByTars</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        soulContext<span class="token punctuation">.</span><span class="token function">setModule</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setContextPath</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setSoulContextByHttp</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> contextPath <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> splitList <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>splitList<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            contextPath <span class="token operator">=</span> contextPath<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>splitList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> realUrl <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setContextPath</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setModule</span><span class="token punctuation">(</span>contextPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setMethod</span><span class="token punctuation">(</span>realUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setRealUrl</span><span class="token punctuation">(</span>realUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Global插件作为第一个运行的插件，会从请求ServerWebExchange对象中取出SoulContext所需要的信息存入SoulContext中，如果有元数据也一应放入。最终放入到ServerWebExchange属性中取名为context，往下透传。这是一种上下文设计模式。spring中各种context都是如此。</p><h2 id="关于Global插件代码一点思考"><a href="#关于Global插件代码一点思考" class="headerlink" title="关于Global插件代码一点思考"></a>关于Global插件代码一点思考</h2><ol><li>这段if-else逻辑可以优化掉</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">SoulContext</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> appKey <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">APP_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> sign <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">SIGN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> timestamp <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">TIMESTAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoulContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    soulContext<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> metaData<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">SPRING_CLOUD</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setSoulContextByHttp</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>            soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">DUBBO</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setSoulContextByDubbo</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">SOFA</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setSoulContextBySofa</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">TARS</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getRpcType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setSoulContextByTars</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">setSoulContextByHttp</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>            soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">setSoulContextByHttp</span><span class="token punctuation">(</span>soulContext<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        soulContext<span class="token punctuation">.</span><span class="token function">setRpcType</span><span class="token punctuation">(</span><span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    soulContext<span class="token punctuation">.</span><span class="token function">setAppKey</span><span class="token punctuation">(</span>appKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    soulContext<span class="token punctuation">.</span><span class="token function">setSign</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">;</span>    soulContext<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>    soulContext<span class="token punctuation">.</span><span class="token function">setStartDateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>httpMethod <span class="token operator">-&gt;</span> soulContext<span class="token punctuation">.</span><span class="token function">setHttpMethod</span><span class="token punctuation">(</span>httpMethod<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> soulContext<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>SoulContext构造有点分散，是否都放入建造者中处理会集中一些</li></ol>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关ContextPath插件</title>
      <link href="/2021/01/27/soul/soul-context-path-plugin/"/>
      <url>/2021/01/27/soul/soul-context-path-plugin/</url>
      
        <content type="html"><![CDATA[<p>网关context_path插件，根据文档说法，是用来对目标服务调用的时候，重写请求路径的contextPath。</p><p>我们就来试试吧。</p><h2 id="context-path插件设置"><a href="#context-path插件设置" class="headerlink" title="context_path插件设置"></a>context_path插件设置</h2><ol><li>网关引入context_path插件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.dromara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>soul-spring-boot-starter-plugin-context-path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.启动网关后在admin中开启context_path插件</p><p><img src="/medias/assets/soul/20210128004213-o7s9vqe-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210128004129.png"></p><p>3.配置插件选择器和规则</p><p><img src="/medias/assets/soul/20210128004721-o38rcag-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210128004646.png"><img src="/medias/assets/soul/20210128004721-kt8iuf9-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210128004656.png"></p><p>4.尝试请求订单接口</p><p><img src="/medias/assets/soul/20210128004815-oypa6xh-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210128004754.png"></p><p>从图中可看到，已经请求成功，插件生效了。</p><h2 id="context-path插件使用场景"><a href="#context-path插件使用场景" class="headerlink" title="context_path插件使用场景"></a>context_path插件使用场景</h2><p>当匹配到请求后，设置自定义的contextPath，那么就会根据请求的Url截取自定义的contextPath获取真正的Url。大白话就是真实请求的路径=请求路径删除前缀contextPath。例如请求路径为/soul/http/order， 配置的contextPath为/soul/http，那么真正请求的url为/order。可以对真实服务做一个隐藏、也可以用来替换老接口。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关RateLimiter插件3</title>
      <link href="/2021/01/26/soul/soul-rate-limiter-plugin-03/"/>
      <url>/2021/01/26/soul/soul-rate-limiter-plugin-03/</url>
      
        <content type="html"><![CDATA[<p>上一篇了解了<code>RateLimiter</code>插件的执行流程。讲到soul基于redis实现的令牌桶，是通过lua脚本实现。这篇我们就再细谈令牌桶算法。</p><h2 id="令牌桶算法由来"><a href="#令牌桶算法由来" class="headerlink" title="令牌桶算法由来"></a>令牌桶算法由来</h2><p>令牌桶算法最初来源于计算机网络。在网络传输数据时，为了防止网络拥塞，需限制流出网络的流量，使流量以比较均匀的速度向外发送。令牌桶算法就实现了这个功能，可控制发送到网络上数据的数目，并允许突发数据的发送。令牌桶算法是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。大小固定的令牌桶可自行以恒定的速率源源不断地产生令牌。如果令牌不被消耗，或者被消耗的速度小于产生的速度，令牌就会不断地增多，直到把桶填满。后面再产生的令牌就会从桶中溢出。最后桶中可以保存的最大令牌数永远不会超过桶的大小。传送到令牌桶的数据包需要消耗令牌。不同大小的数据包，消耗的令牌数量不一样。令牌桶这种控制机制基于令牌桶中是否存在令牌来指示什么时候可以发送流量。令牌桶中的每一个令牌都代表一个字节。如果令牌桶中存在令牌，则允许发送流量；而如果令牌桶中不存在令牌，则不允许发送流量。因此，如果突发门限被合理地配置并且令牌桶中有足够的令牌，那么流量就可以以峰值速率发送。</p><h2 id="令牌桶算详细描述"><a href="#令牌桶算详细描述" class="headerlink" title="令牌桶算详细描述"></a>令牌桶算详细描述</h2><p>首先令牌桶算法涉及到两个最重要的参数填充速率（rate）、令牌桶最大容量（capacity）。假如rate=r，capacity=c：</p><ol><li>每隔1/c秒就会产生一个令牌放入令牌桶中，也就是每秒放入c个令牌。</li><li>如果消费令牌的速率小于产生令牌的速率，当令牌桶中的令牌满了，也就是数量到达了c，那么新产生的令牌将会被丢弃。</li><li>不同的数据包需要消耗不同数量的令牌。如果有n个字节的数据包到达时，就从令牌桶中删除n个令牌。</li><li>如果令牌桶中的令牌数量小于n，不会删除令牌,该数据包先缓存或者丢弃。</li><li>当有突发流量来了，最多能处理c个字节。</li></ol><h2 id="令牌桶实现要点"><a href="#令牌桶实现要点" class="headerlink" title="令牌桶实现要点"></a>令牌桶实现要点</h2><ol><li>记录最大令牌桶容量、当前剩余令牌数量、下次可填充令牌的时间。</li><li>响应完一个请求之后并计算下次可填充令牌的时间，如果下一个请求在这个时间之前则需要等待。如果设置rate为1，那么要处理这个请求就得在一秒之后了。</li><li>支持突发流量的处理，且最大突发流量为令牌桶的最大容量。如果rate设置为1，capacity为10，如果10秒内没有消耗令牌，则如果有突发流量到来，则一下子可以获取到10个令牌。</li></ol><h2 id="令牌生产方式"><a href="#令牌生产方式" class="headerlink" title="令牌生产方式"></a>令牌生产方式</h2><ol><li>通过定时任务填充。此方式有明显的劣势，定时任务需要消耗系统资源，如果需要维护很多令牌桶，则消耗巨大。</li><li>延迟生成。在每次获取令牌的时候进行一次计算，计算下次可填充令牌时间到当前时间的间隔内可产生的令牌数量，并更令牌桶。</li></ol><h2 id="RateLimiter具体实现"><a href="#RateLimiter具体实现" class="headerlink" title="RateLimiter具体实现"></a><code>RateLimiter</code>具体实现</h2><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token operator">//</span> 令牌桶key<span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">//</span> 可填充令牌时间key<span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">//</span> 填充速率<span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span> 令牌桶最大容量<span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span> 请求令牌时间<span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span> 请求令牌数量<span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span> 填充满整个令牌桶所需要的时间<span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate<span class="token operator">//</span> 令牌可累计的时长<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">//</span> 查询出令牌桶当前剩余的令牌数量，没有则为<span class="token number">0</span><span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_tokens <span class="token operator">=</span> capacity<span class="token keyword">end</span><span class="token operator">//</span> 查询可填充令牌时间，没有则为<span class="token number">0</span><span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_refreshed <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token operator">//</span> 计算可填充令牌时间到当前时间的间隔，如果本次请求在可填充令牌时间之前，则为<span class="token number">0</span><span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span><span class="token operator">//</span> 计算出令牌数量<span class="token operator">=</span>剩余令牌<span class="token operator">+</span>间隔时间内可生成的令牌数量，不能超过令牌桶最大容量<span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">//</span> 判断当前请求是否令牌数量是否足够<span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">&gt;=</span> requested<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">//</span> 如果足够则删除请求的令牌数量<span class="token keyword">if</span> allowed <span class="token keyword">then</span>  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested  allowed_num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token operator">//</span> 更新令牌桶redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token operator">//</span> 响应令牌请求结果，<span class="token number">0</span>表示未获得令牌，<span class="token number">1</span>表示成功获得令牌<span class="token keyword">return</span> <span class="token punctuation">{</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>使用lua操作redis实现令牌桶算法，利用redis单线程操作内存的特性式使其具有原子性保持高性能。</li><li>rate、capacity、nextFreeTicketMillis是整个算法的核心。尤其nextFreeTicketMillis比较拗口。</li><li><code>soul RateLimiter</code>采用延迟生成令牌的方式，避免定时任务的消耗。</li></ol>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关RateLimiter插件2</title>
      <link href="/2021/01/25/soul/soul-rate-limiter-plugin-02/"/>
      <url>/2021/01/25/soul/soul-rate-limiter-plugin-02/</url>
      
        <content type="html"><![CDATA[<p>上一篇我们已经了解了<code>RateLimiter</code>插件的大致原理和使用方法。今天我们再从微观层面再来探个究竟。</p><p>请求来了以后由<code>SoulWebHandler</code>进行进行处理，把封装请求信息的对象ServerWebExchange放入</p><p><code>DefaultSoulPluginChain</code>职责链中按照插件排序逐一进行处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MetricsTrackerFacade</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">counterInc</span><span class="token punctuation">(</span><span class="token class-name">MetricsLabelEnum</span><span class="token punctuation">.</span><span class="token constant">REQUEST_TOTAL</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistogramMetricsTrackerDelegate</span><span class="token punctuation">&gt;</span></span> startTimer <span class="token operator">=</span> <span class="token class-name">MetricsTrackerFacade</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">histogramStartTimer</span><span class="token punctuation">(</span><span class="token class-name">MetricsLabelEnum</span><span class="token punctuation">.</span><span class="token constant">REQUEST_LATENCY</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSoulPluginChain</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doOnSuccess</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> startTimer<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>time <span class="token operator">-&gt;</span> <span class="token class-name">MetricsTrackerFacade</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">histogramObserveDuration</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先是执行插件抽象基类<code>AbstractSoulPlugin</code>的execute方法做统一的一些处理。校验插件是否配置、插件是否开启、选择器是否配置、选择器是否开启、选取匹配的选择器、规则是否配置、选取匹配的规则。不过指定一提的是，这里设计得很棒，选择器、规则都是通过SPI的方式进行加载，可直接扩展。一切准备就绪，最核心的地方来了。选取好的选择器数据、规则数据传给子类<code>RateLimiterPlugin</code>，执行核心方法doExecute。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> handle <span class="token operator">=</span> rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">RateLimiterHandle</span> limiterHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token class-name">RateLimiterHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> redisRateLimiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limiterHandle<span class="token punctuation">.</span><span class="token function">getReplenishRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limiterHandle<span class="token punctuation">.</span><span class="token function">getBurstCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">TOO_MANY_REQUESTS</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还记得上一篇文章说到<code>rateLimiter</code>插件的两个信息配置参数：</p><p><strong>rate：是你允许用户每秒执行多少请求，而丢弃任何请求。这是令牌桶的填充速率。</strong></p><p>capacity：是允许用户在一秒钟内执行的最大请求数。这是令牌桶可以保存的令牌数。</p><p>这里从json反序列化出来放到了RateLimiterHandle对象中进行使用。我看到，这两个参数直接传给了<code>RedisRateLimiter</code>的isAllowed方法。如果调用后返回信息<code>RateLimiterResponse</code>的allowed为true，那么就表示获取到了令牌，请求可以通过，继续执行下一个插件，否则中断处理直接响应结果。</p><p>那么isAllowed方法做了什么呢？继续往下探究。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RateLimiterResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> replenishRate<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> burstCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initialized<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"RedisRateLimiter is not initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token function">getKeys</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> scriptArgs <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>replenishRate <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> burstCapacity <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> resultFlux <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token constant">INST</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">ReactiveRedisTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>script<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> scriptArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resultFlux<span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>longs<span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                longs<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> longs<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>results <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> allowed <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1L</span><span class="token punctuation">;</span>                <span class="token class-name">Long</span> tokensLeft <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">RateLimiterResponse</span> rateLimiterResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RateLimiterResponse</span><span class="token punctuation">(</span>allowed<span class="token punctuation">,</span> tokensLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RateLimiter response:{}"</span><span class="token punctuation">,</span> rateLimiterResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> rateLimiterResponse<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error determining if user allowed from redis:{}"</span><span class="token punctuation">,</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造一个redis keys数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token string">"request_rate_limiter.{"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token class-name">String</span> tokenKey <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token string">"}.tokens"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> timestampKey <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token string">"}.timestamp"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>tokenKey<span class="token punctuation">,</span> timestampKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redis脚本参数数组:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> scriptArgs <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>replenishRate <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> burstCapacity <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用初始化的时候加载好的lua脚本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">RedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DefaultRedisScript</span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisScript<span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"/META-INF/scripts/request_rate_limiter.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> redisScript<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后把脚本的执行结果放入<code>RateLimiterResponse</code>返回。</p><p>由此看到，<code>RateLimiter</code>插件使用Redis实现了令牌桶算法，这就天然支持了分布式。</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> tokens_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> timestamp_key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">--redis.log(redis.LOG_WARNING, "tokens_key " .. tokens_key)</span><span class="token keyword">local</span> rate <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> capacity <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> now <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> requested <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> fill_time <span class="token operator">=</span> capacity<span class="token operator">/</span>rate<span class="token keyword">local</span> ttl <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>fill_time<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "rate " .. ARGV[1])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "capacity " .. ARGV[2])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "now " .. ARGV[3])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "requested " .. ARGV[4])</span><span class="token comment">--redis.log(redis.LOG_WARNING, "filltime " .. fill_time)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "ttl " .. ttl)</span><span class="token keyword">local</span> last_tokens <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_tokens <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_tokens <span class="token operator">=</span> capacity<span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "last_tokens " .. last_tokens)</span><span class="token keyword">local</span> last_refreshed <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> last_refreshed <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>  last_refreshed <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "last_refreshed " .. last_refreshed)</span><span class="token keyword">local</span> delta <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> now<span class="token operator">-</span>last_refreshed<span class="token punctuation">)</span><span class="token keyword">local</span> filled_tokens <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> last_tokens<span class="token operator">+</span><span class="token punctuation">(</span>delta<span class="token operator">*</span>rate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">local</span> allowed <span class="token operator">=</span> filled_tokens <span class="token operator">&gt;=</span> requested<span class="token keyword">local</span> new_tokens <span class="token operator">=</span> filled_tokens<span class="token keyword">local</span> allowed_num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> allowed <span class="token keyword">then</span>  new_tokens <span class="token operator">=</span> filled_tokens <span class="token operator">-</span> requested  allowed_num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">end</span><span class="token comment">--redis.log(redis.LOG_WARNING, "delta " .. delta)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "filled_tokens " .. filled_tokens)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "allowed_num " .. allowed_num)</span><span class="token comment">--redis.log(redis.LOG_WARNING, "new_tokens " .. new_tokens)</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> tokens_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> new_tokens<span class="token punctuation">)</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"setex"</span><span class="token punctuation">,</span> timestamp_key<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">{</span> allowed_num<span class="token punctuation">,</span> new_tokens <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于这个令牌桶的具体脚本实现逻辑，我们且看下回分解。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关RateLimiter插件1</title>
      <link href="/2021/01/23/soul/soul-rate-limiter-plugin-01/"/>
      <url>/2021/01/23/soul/soul-rate-limiter-plugin-01/</url>
      
        <content type="html"><![CDATA[<h2 id="RateLimiter插件"><a href="#RateLimiter插件" class="headerlink" title="RateLimiter插件"></a>RateLimiter插件</h2><p>限流插件，是网关对流量管控限制核心的实现。可以到接口级别，也可以到参数级别。</p><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>采用redis令牌桶算法进行限流。</p><p><img src="/medias/assets/soul//20210123223018-fa0q0ss-limiting.png" alt="limiting.png"></p><h2 id="什么是令牌桶算法"><a href="#什么是令牌桶算法" class="headerlink" title="什么是令牌桶算法?"></a>什么是令牌桶算法?</h2><p>令牌桶算法是一种限流算法，他与漏桶算法的实现是一种相反的实现。</p><p>漏桶算法是按照一定频率的速率进行漏水，然后对于我们的请求就可以想象成上边的水龙头。</p><p><img src="/medias/assets/soul//20210123224741-eyjf3bv-00831rSTly1gdnjduhuivj30cb08b74u.jpg" alt="00831rSTly1gdnjduhuivj30cb08b74u.jpg"></p><p>令牌桶算法则是定时的往桶中放入令牌，然后每次请求都会从令牌桶中获取一个令牌，如果桶中没有令牌，则拒绝请求或者阻塞直到令牌可以获得。</p><p><img src="/medias/assets/soul//20210123224827-hu1tklg-00831rSTly1gdnjhiarxgj30bp06pwek.jpg" alt="00831rSTly1gdnjhiarxgj30bp06pwek.jpg"></p><h2 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h2><ul><li>soul-examples-http中引入RateLimiter插件</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.dromara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>soul-spring-boot-starter-plugin-ratelimiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${soul.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动redis并配置到RateLimiter插件中</li><li>admin中开启RateLimiter插件</li></ul><p><img src="/medias/assets/soul//20210123225914-6aq1hcp-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210123225355.png" alt="微信截图20210123225355.png"></p><ul><li>配置限流选择器和规则，两个重要的蚕食capacity、rate。</li></ul><p><strong>rate：是你允许用户每秒执行多少请求，而丢弃任何请求。这是令牌桶的填充速率。</strong></p><p><strong>capacity：是允许用户在一秒钟内执行的最大请求数。这是令牌桶可以保存的令牌数。</strong></p><p><img src="/medias/assets/soul//20210123230000-t65v5sm-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210123225640.png" alt="微信截图20210123225640.png"></p><ul><li>用jmeter压测一番，看看配置是否好用</li></ul><p><img src="/medias/assets/soul//20210123230924-4raiu8r-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210123230854.png" alt="微信截图20210123230854.png"></p><p>从图中可看到99.03%的错误率，且错误请求响应参数为</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"code"</span><span class="token operator">:</span><span class="token number">429</span><span class="token punctuation">,</span><span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"You have been restricted, please try again later!"</span><span class="token punctuation">,</span><span class="token property">"data"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看来配置确实生效了。那么容量调大点再压</p><p><img src="/medias/assets/soul//20210123231710-d6ewkti-1113.png" alt="1113.png"></p><p><img src="/medias/assets/soul//20210123231722-yah20mv-4441.png" alt="4441.png"></p><p>这下错误率直接降为26.49%了。就这么简单，一个限流的功能就整起来了，非常方便灵活，并且随时可以调整配置，这就是soul网关强大之处呀。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关采用Zookeeper方式数据同步</title>
      <link href="/2021/01/21/soul/soul-zookeeper-sync-data/"/>
      <url>/2021/01/21/soul/soul-zookeeper-sync-data/</url>
      
        <content type="html"><![CDATA[<h2 id="soul网关采用zookeeper方式同步数据，对比http长轮询方式有何优势？"><a href="#soul网关采用zookeeper方式同步数据，对比http长轮询方式有何优势？" class="headerlink" title="soul网关采用zookeeper方式同步数据，对比http长轮询方式有何优势？"></a>soul网关采用zookeeper方式同步数据，对比http长轮询方式有何优势？</h2><ol><li>websocket方式能实时通知，而http长轮询方式只能做到准实时。</li><li>websocket同步采用增量处理，而http长轮询方式是全量数据，当数据量大的时候http长轮询方式就会有性能问题。</li></ol><h2 id="zookeeper方式同步数据原理"><a href="#zookeeper方式同步数据原理" class="headerlink" title="zookeeper方式同步数据原理"></a>zookeeper方式同步数据原理</h2><p>基于 zookeeper 的同步原理很简单，主要是依赖 <code>zookeeper</code> 的 watch 机制，<code>soul-web</code> 会监听配置的节点，<code>soul-admin</code> 在启动的时候，会将数据全量写入 <code>zookeeper</code>，后续数据发生变更时，会增量更新 <code>zookeeper</code> 的节点，与此同时，<code>soul-web</code> 会监听配置信息的节点，一旦有信息变更时，会更新本地缓存。</p><p>![soulzookeeper1.png](/medias/assets/soul//20210121150905-ac20c6j-soul-zookeeper (1).png)<br>![soulzookeeper2.png](/medias/assets/soul//20210121150905-snaq3b4-soul-zookeeper (2).png)<br><img src="/medias/assets/soul//20210121150905-ehkvt21-soul-zookeeper.png" alt="soulzookeeper.png"></p><h2 id="zookeeper同步方式详解"><a href="#zookeeper同步方式详解" class="headerlink" title="zookeeper同步方式详解"></a>zookeeper同步方式详解</h2><p>网关中负责同步的类是ZookeeperSyncDataService。其作用就是网关启动的时候读取admin写入zookeeper中的节点数据，并进行监听。非常之简单易懂。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZookeeperSyncDataService</span> <span class="token keyword">implements</span> <span class="token class-name">SyncDataService</span><span class="token punctuation">,</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZkClient</span> zkClient<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">;</span>    <span class="token comment">// 启动则读取全量数据并进行监听</span>    <span class="token comment">/**     * Instantiates a new Zookeeper cache manager.     *     * @param zkClient             the zk client     * @param pluginDataSubscriber the plugin data subscriber     * @param metaDataSubscribers  the meta data subscribers     * @param authDataSubscribers  the auth data subscribers     */</span>    <span class="token keyword">public</span> <span class="token class-name">ZookeeperSyncDataService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ZkClient</span> zkClient<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">,</span>                                    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zkClient <span class="token operator">=</span> zkClient<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pluginDataSubscriber <span class="token operator">=</span> pluginDataSubscriber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>metaDataSubscribers <span class="token operator">=</span> metaDataSubscribers<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authDataSubscribers <span class="token operator">=</span> authDataSubscribers<span class="token punctuation">;</span>        <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watchAppAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watchMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">watcherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> pluginParent <span class="token operator">=</span> <span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">PLUGIN_PARENT</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pluginZKs <span class="token operator">=</span> <span class="token function">zkClientGetChildren</span><span class="token punctuation">(</span>pluginParent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> pluginName <span class="token operator">:</span> pluginZKs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">watcherAll</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span>pluginParent<span class="token punctuation">,</span> <span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>currentChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> pluginName <span class="token operator">:</span> currentChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">watcherAll</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">watcherAll</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pluginName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">watcherPlugin</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watcherSelector</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">watcherRule</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">watcherPlugin</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pluginName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> pluginPath <span class="token operator">=</span> <span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token function">buildPluginPath</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zkClient<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>pluginPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>pluginPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">cachePluginData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>pluginPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">subscribePluginDataChanges</span><span class="token punctuation">(</span>pluginPath<span class="token punctuation">,</span> pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">watcherSelector</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pluginName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> selectorParentPath <span class="token operator">=</span> <span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token function">buildSelectorParentPath</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> childrenList <span class="token operator">=</span> <span class="token function">zkClientGetChildren</span><span class="token punctuation">(</span>selectorParentPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            childrenList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>children <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>selectorParentPath<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cacheSelectorData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">subscribeSelectorDataChanges</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">SELECTOR</span><span class="token punctuation">,</span> selectorParentPath<span class="token punctuation">,</span> childrenList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">watcherRule</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pluginName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> ruleParent <span class="token operator">=</span> <span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token function">buildRuleParentPath</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> childrenList <span class="token operator">=</span> <span class="token function">zkClientGetChildren</span><span class="token punctuation">(</span>ruleParent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            childrenList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>children <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>ruleParent<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cacheRuleData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">subscribeRuleDataChanges</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">,</span> ruleParent<span class="token punctuation">,</span> childrenList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">watchAppAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> appAuthParent <span class="token operator">=</span> <span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH_PARENT</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> childrenList <span class="token operator">=</span> <span class="token function">zkClientGetChildren</span><span class="token punctuation">(</span>appAuthParent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            childrenList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>children <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>appAuthParent<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cacheAuthData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">subscribeAppAuthDataChanges</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH</span><span class="token punctuation">,</span> appAuthParent<span class="token punctuation">,</span> childrenList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">watchMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> metaDataPath <span class="token operator">=</span> <span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> childrenList <span class="token operator">=</span> <span class="token function">zkClientGetChildren</span><span class="token punctuation">(</span>metaDataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            childrenList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>children <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>metaDataPath<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">cacheMetaData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">subscribeMetaDataChanges</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH</span><span class="token punctuation">,</span> metaDataPath<span class="token punctuation">,</span> childrenList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigGroupEnum</span> groupKey<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> groupParentPath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> childrenList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token constant">SELECTOR</span><span class="token operator">:</span>                zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span>groupParentPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>currentChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addSubscribePath <span class="token operator">=</span> <span class="token function">addSubscribePath</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>                        addSubscribePath<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>addPath <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                            <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> addPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">cacheSelectorData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> realPath<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">subscribeSelectorDataChanges</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">RULE</span><span class="token operator">:</span>                zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span>groupParentPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>currentChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addSubscribePath <span class="token operator">=</span> <span class="token function">addSubscribePath</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// Get the newly added node data and subscribe to that node</span>                        addSubscribePath<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>addPath <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                            <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> addPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">cacheRuleData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> realPath<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">subscribeRuleDataChanges</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">APP_AUTH</span><span class="token operator">:</span>                zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span>groupParentPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>currentChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addSubscribePath <span class="token operator">=</span> <span class="token function">addSubscribePath</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>                        addSubscribePath<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>children <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">cacheAuthData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> realPath<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">subscribeAppAuthDataChanges</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">META_DATA</span><span class="token operator">:</span>                zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span>groupParentPath<span class="token punctuation">,</span> <span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>currentChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addSubscribePath <span class="token operator">=</span> <span class="token function">addSubscribePath</span><span class="token punctuation">(</span>childrenList<span class="token punctuation">,</span> currentChildren<span class="token punctuation">)</span><span class="token punctuation">;</span>                        addSubscribePath<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>children <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                            <span class="token keyword">final</span> <span class="token class-name">String</span> realPath <span class="token operator">=</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">cacheMetaData</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> realPath<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">subscribeMetaDataChanges</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected groupKey: "</span> <span class="token operator">+</span> groupKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subscribePluginDataChanges</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pluginPath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> pluginName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>pluginPath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>d <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">PluginData</span><span class="token punctuation">)</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token class-name">PluginData</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PluginData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">unSubscribe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subscribeSelectorDataChanges</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cacheSelectorData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SelectorData</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">unCacheSelectorData</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subscribeRuleDataChanges</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cacheRuleData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RuleData</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">unCacheRuleData</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subscribeAppAuthDataChanges</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> realPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cacheAuthData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AppAuthData</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">unCacheAuthData</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subscribeMetaDataChanges</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> realPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cacheMetaData</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MetaData</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@SneakyThrows</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token class-name">String</span> realPath <span class="token operator">=</span> dataPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">MetaData</span> metaData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                metaData<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">unCacheMetaData</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cachePluginData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PluginData</span> pluginData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span>pluginData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheSelectorData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selectorData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">onSelectorSubscribe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unCacheSelectorData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SelectorData</span> selectorData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectorData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> selectorId <span class="token operator">=</span> dataPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> dataPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">SELECTOR_PARENT</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> pluginName <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> selectorId<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selectorData<span class="token punctuation">.</span><span class="token function">setPluginName</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        selectorData<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>selectorId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">unSelectorSubscribe</span><span class="token punctuation">(</span>selectorData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheRuleData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">RuleData</span> ruleData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>ruleData<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">onRuleSubscribe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unCacheRuleData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> substring <span class="token operator">=</span> dataPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> str <span class="token operator">=</span> dataPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">RULE_PARENT</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> pluginName <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> substring<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">SELECTOR_JOIN_RULE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>substring<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RuleData</span> ruleData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuleData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ruleData<span class="token punctuation">.</span><span class="token function">setPluginName</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        ruleData<span class="token punctuation">.</span><span class="token function">setSelectorId</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ruleData<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">unRuleSubscribe</span><span class="token punctuation">(</span>ruleData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheAuthData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AppAuthData</span> appAuthData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>appAuthData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> authDataSubscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unCacheAuthData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dataPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> key <span class="token operator">=</span> dataPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">ZkPathConstants</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH_PARENT</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AppAuthData</span> appAuthData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppAuthData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        appAuthData<span class="token punctuation">.</span><span class="token function">setAppKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        authDataSubscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">unSubscribe</span><span class="token punctuation">(</span>appAuthData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheMetaData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> metaDataSubscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">onSubscribe</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unCacheMetaData</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>data <span class="token operator">-&gt;</span> metaDataSubscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">unSubscribe</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">addSubscribePath</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> alreadyChildren<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> currentChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>alreadyChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> currentChildren<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> currentChildren<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>current <span class="token operator">-&gt;</span> alreadyChildren<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>current<span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildRealPath</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> parent<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> parent <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> children<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">zkClientGetChildren</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zkClient<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> zkClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>            zkClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关WebSocket方式数据同步</title>
      <link href="/2021/01/20/soul/soul-websocket-sync-data/"/>
      <url>/2021/01/20/soul/soul-websocket-sync-data/</url>
      
        <content type="html"><![CDATA[<h2 id="soul网关推荐采用websocket方式同步数据，对比http长轮询方式有何优势？"><a href="#soul网关推荐采用websocket方式同步数据，对比http长轮询方式有何优势？" class="headerlink" title="soul网关推荐采用websocket方式同步数据，对比http长轮询方式有何优势？"></a>soul网关推荐采用websocket方式同步数据，对比http长轮询方式有何优势？</h2><ol><li>websocket方式能实时通知，而http长轮询方式只能做到准实时。</li><li>websocket同步采用增量处理，而http长轮询方式是全量数据，当数据量大的时候http长轮询方式就会有性能问题。</li></ol><h2 id="websocket同步方式详解"><a href="#websocket同步方式详解" class="headerlink" title="websocket同步方式详解"></a>websocket同步方式详解</h2><p>网关启动的时候注册WebSocketClient实例子类SoulWebsocketClient，此类负责与admin的websocket连接。数据同步业务全权委托给WebSocketDataHandler进行处理，符合单一职责原则，保持了此类的简单性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SoulWebsocketClient</span> <span class="token keyword">extends</span> <span class="token class-name">WebSocketClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> alreadySync <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WebsocketDataHandler</span> websocketDataHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SoulWebsocketClient</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">URI</span> serverUri<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">,</span>                               <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>serverUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>websocketDataHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebsocketDataHandler</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">,</span> metaDataSubscribers<span class="token punctuation">,</span> authDataSubscribers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerHandshake</span> serverHandshake<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>alreadySync<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MYSELF</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            alreadySync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"ALL"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebsocketData</span> websocketData <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">WebsocketData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConfigGroupEnum</span> groupEnum <span class="token operator">=</span> <span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token function">acquireByName</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">.</span><span class="token function">getGroupType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> eventType <span class="token operator">=</span> websocketData<span class="token punctuation">.</span><span class="token function">getEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        websocketDataHandler<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span>groupEnum<span class="token punctuation">,</span> json<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WebsocketDataHandler采用工厂模式，把PluginDataHandler、SelectorDataHandler、RuleDataHandler、AuthDataHandler、MetaDataHandler创建好，通过同步数据的类型自动匹配处理的逻辑，避免了令人生厌的if-else判断逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketDataHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">,</span> <span class="token class-name">DataHandler</span><span class="token punctuation">&gt;</span></span> <span class="token constant">ENUM_MAP</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * Instantiates a new Websocket data handler.     *     * @param pluginDataSubscriber the plugin data subscriber     * @param metaDataSubscribers  the meta data subscribers     * @param authDataSubscribers  the auth data subscribers     */</span>    <span class="token keyword">public</span> <span class="token class-name">WebsocketDataHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">,</span>                                <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">,</span>                                <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">PLUGIN</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PluginDataHandler</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">SELECTOR</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SelectorDataHandler</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RuleDataHandler</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AuthDataHandler</span><span class="token punctuation">(</span>authDataSubscribers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MetaDataHandler</span><span class="token punctuation">(</span>metaDataSubscribers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Executor.     *     * @param type      the type     * @param json      the json     * @param eventType the event type     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigGroupEnum</span> type<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> json<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token constant">ENUM_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataHandler负责数据的具体处理。而DataHandler只是一个接口，声明了一个handle方法。其余不同处理逻辑全由子类子具体负责。</p><p><img src="/medias/assets/soul//20210120214026-dlgfz6o-PluginDataHandler.png" alt="PluginDataHandler.png"></p><p>AbstractDataHandler继承DataHandler，实现了通用的handle方法。并声明了convert、doRefresh、doUpdate、doDelete四个模板方法。这里就是经典设计模式中的模板模式了。而具体的Handler做的事情也非常简单，只是把数据变更通知订阅者而已。此处又使用了经典设计模式中的观察者模式。PluginDataHandler和其它handler一样。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PluginDataHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDataHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromList</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">PluginData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRefresh</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        pluginDataSubscriber<span class="token punctuation">.</span><span class="token function">refreshPluginDataSelf</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token operator">::</span><span class="token function">onSubscribe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doUpdate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token operator">::</span><span class="token function">onSubscribe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDelete</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token operator">::</span><span class="token function">unSubscribe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>订阅者收到数据变更通知后刷新本地缓存。以MetaDataAllSubscriber为例，做的事情很简单。就是缓存和删除缓存。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetaDataAllSubscriber</span> <span class="token keyword">implements</span> <span class="token class-name">MetaDataSubscriber</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MetaDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cache</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unSubscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MetaDataCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而上述操作的上帝之手就是WebsocketSyncDataService。它根据配置的url数量创建WebSocketClient去连接admin。并开启定时任务检测连接是否断开，如果断开则重连。默认30秒检测一次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketSyncDataService</span> <span class="token keyword">implements</span> <span class="token class-name">SyncDataService</span><span class="token punctuation">,</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketClient</span><span class="token punctuation">&gt;</span></span> clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledThreadPoolExecutor</span> executor<span class="token punctuation">;</span>    <span class="token comment">/**     * Instantiates a new Websocket sync cache.     *     * @param websocketConfig      the websocket config     * @param pluginDataSubscriber the plugin data subscriber     * @param metaDataSubscribers  the meta data subscribers     * @param authDataSubscribers  the auth data subscribers     */</span>    <span class="token keyword">public</span> <span class="token class-name">WebsocketSyncDataService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">WebsocketConfig</span> websocketConfig<span class="token punctuation">,</span>                                    <span class="token keyword">final</span> <span class="token class-name">PluginDataSubscriber</span> pluginDataSubscriber<span class="token punctuation">,</span>                                    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaDataSubscriber</span><span class="token punctuation">&gt;</span></span> metaDataSubscribers<span class="token punctuation">,</span>                                    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AuthDataSubscriber</span><span class="token punctuation">&gt;</span></span> authDataSubscribers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>websocketConfig<span class="token punctuation">.</span><span class="token function">getUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token class-name">SoulThreadFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"websocket-connect"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> url <span class="token operator">:</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SoulWebsocketClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>pluginDataSubscriber<span class="token punctuation">)</span><span class="token punctuation">,</span> metaDataSubscribers<span class="token punctuation">,</span> authDataSubscribers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"websocket url({}) is error"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebSocketClient</span> client <span class="token operator">:</span> clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">boolean</span> success <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">connectBlocking</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"websocket connection is successful....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"websocket connection is error....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                executor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">boolean</span> reconnectSuccess <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">reconnectBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>reconnectSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"websocket reconnect is successful....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"websocket reconnection is error....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"websocket connect is error :{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">/* client.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("proxyaddress", 80)));*/</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"websocket connection...exception...."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebSocketClient</span> client <span class="token operator">:</span> clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>admin这边由WebsocketCollector来维持websocket的连接。当网关刚启动的时候会发送一个MYSELF的消息，admin收到后变发送全量数据进行第一次同步。而后的消息变化就会是增量的同步。从而在数据量大的情况也也依然保证同步的高性能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketCollector</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Session</span><span class="token punctuation">&gt;</span></span> <span class="token constant">SESSION_SET</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span>    <span class="token comment">/**     * On message.     *     * @param message the message     * @param session the session     */</span>    <span class="token annotation punctuation">@OnMessage</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MYSELF</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>            <span class="token class-name">SpringBeanUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">SyncDataService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">syncAll</span><span class="token punctuation">(</span><span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MYSELF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Send.     *     * @param message the message     * @param type    the type     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DataEventTypeEnum</span><span class="token punctuation">.</span><span class="token constant">MYSELF</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"websocket send result is exception: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Session</span> session <span class="token operator">:</span> <span class="token constant">SESSION_SET</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"websocket send result is exception: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>admin通过spring事件通知机制，一旦有数据修改则触发事件。WebsocketDataChangedListener接收到数据变更通知后就给网关发送消息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketDataChangedListener</span> <span class="token keyword">implements</span> <span class="token class-name">DataChangedListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPluginChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> pluginDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> websocketData <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">PLUGIN</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pluginDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSelectorChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> selectorDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> websocketData <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">SELECTOR</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> selectorDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>websocketData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRuleChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> ruleDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> configData <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ruleDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>configData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAppAuthChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> appAuthDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> configData <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appAuthDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>configData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMetaDataChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> metaDataList<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> configData <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">WebsocketData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebsocketCollector</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>configData<span class="token punctuation">)</span><span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就这样，soul网关就完成了websocket方式的数据同步。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Http长轮询方式数据同步</title>
      <link href="/2021/01/19/soul/soul-http-sync-data/"/>
      <url>/2021/01/19/soul/soul-http-sync-data/</url>
      
        <content type="html"><![CDATA[<h2 id="soul数据同步"><a href="#soul数据同步" class="headerlink" title="soul数据同步"></a>soul数据同步</h2><p>数据同步是指将 <code>soul-admin</code> 配置的数据，同步到 <code>soul</code> 集群中的JVM内存里面，当请求到来后只需从本地获取配置信息即可，这是网关高性能的关键。为了这种高性能，就需要维护网关本地内存中的配置与admin的配置保持同步。</p><h2 id="soul数据同步的原理"><a href="#soul数据同步的原理" class="headerlink" title="soul数据同步的原理"></a>soul数据同步的原理</h2><p><code>Soul</code> 数据同步的流程，<code>Soul</code> 网关在启动时，会从从配置服务同步配置数据，并且支持推拉模式获取配置变更信息，并且更新本地缓存。而管理员在管理后台，变更用户、规则、插件、流量配置，通过推拉模式将变更信息同步给 <code>Soul</code> 网关，具体是 <code>push</code> 模式，还是 <code>pull</code> 模式取决于配置。关于配置同步模块，其实是一个简版的配置中心。</p><p><img src="/medias/assets/soul//20210118222948-0rv9uqm-soul-config-processor.png" alt="soulconfigprocessor.png"></p><h2 id="http长轮询原理"><a href="#http长轮询原理" class="headerlink" title="http长轮询原理"></a>http长轮询原理</h2><p>Soul 借鉴了 <code>Apollo</code>、<code>Nacos</code> 的设计思想，取其精华，自己实现了 <code>http</code> 长轮询数据同步功能。注意，这里并非传统的 ajax 长轮询！</p><p><img src="/medias/assets/soul//20210118223118-0m151vq-http-long-polling.png" alt="httplongpolling.png"></p><p>http 长轮询机制如上所示，soul-web 网关请求 admin 的配置服务，读取超时时间为 90s，意味着网关层请求配置服务最多会等待 90s，这样便于 admin 配置服务及时响应变更数据，从而实现准实时推送。</p><p>http 请求到达 sou-admin 之后，并非立马响应数据，而是利用 Servlet3.0 的异步机制，异步响应数据。首先，将长轮询请求任务 <code>LongPollingClient</code> 扔到 <code>BlocingQueue</code> 中，并且开启调度任务，60s 后执行，这样做的目的是 60s 后将该长轮询请求移除队列，即便是这段时间内没有发生配置数据变更。因为即便是没有配置变更，也得让网关知道，总不能让其干等吧，而且网关请求配置服务时，也有 90s 的超时时间。如果这段时间内，管理员变更了配置数据，此时，会挨个移除队列中的长轮询请求，并响应数据，告知是哪个 Group 的数据发生了变更。网关收到响应信息之后，只知道是哪个 Group 发生了配置变更，还需要再次请求该 Group 的配置数据。为什么不是直接将变更的数据写出？因为 http 长轮询机制只能保证准实时，如果在网关层处理不及时，或者管理员频繁更新配置，很有可能便错过了某个配置变更的推送，安全起见，只告知某个 Group 信息发生了变更。</p><h2 id="http长轮询流程"><a href="#http长轮询流程" class="headerlink" title="http长轮询流程"></a>http长轮询流程</h2><ul><li>打开admin http数据同步开关</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">soul:  sync:      http:        enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也相应打开网关中http数据同步的开关</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">soul:    sync:        http:             url: http://localhost:9095<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>admin这端主要是HttpLongPollingDataChangedListener，该类是http长轮询的核心类,具体负责调度网关长轮询任务，缓存的刷新和推送变更通知以及响应配置数据。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSyncConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * http long polling(default strategy).     */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"soul.sync.http.enabled"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">HttpSyncProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpLongPollingListener</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">HttpLongPollingDataChangedListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">HttpLongPollingDataChangedListener</span> <span class="token function">httpLongPollingDataChangedListener</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpSyncProperties</span> httpSyncProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HttpLongPollingDataChangedListener</span><span class="token punctuation">(</span>httpSyncProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网关启动的时候注册HttpSyncDataService服务，然后在构造方法中调用了start方法开始到admin拉取数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// It could be initialized multiple times, so you need to control that.</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">RUNNING</span><span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// fetch all group configs.</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchGroupConfig</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> threadSize <span class="token operator">=</span> serverList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>threadSize<span class="token punctuation">,</span> threadSize<span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>                   <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token class-name">SoulThreadFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"http-long-polling"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// start long polling, each server creates a thread to listen for changes.</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>serverList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>server <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpLongPollingTask</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"soul http long polling was started, executor=[{}]"</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>start方法主要干两件事，第一件事是在配置的一堆admin服务器循环去调用admin的/configs/fetch接口拉取全量的数据，如果拉取到了数据，则中断循环。如果循环结束还未拉取到，那么网关就没法启动了。没有配置的网关启动也毫无意义。拉取到配置数据后挨个组去判断数据的md5以及修改时间，如果md5不同且修改时间比本地配置数据修改时间更晚，说明配置需要更新则刷新本地缓存。否则都无变化则等待30s。</p><pre class="line-numbers language-none"><code class="language-none">private void fetchGroupConfig(final ConfigGroupEnum... groups) throws SoulException {       for (int index = 0; index &lt; this.serverList.size(); index++) {           String server = serverList.get(index);           try {               this.doFetchGroupConfig(server, groups);               break;           } catch (SoulException e) {               // no available server, throw exception.               if (index &gt;= serverList.size() - 1) {                   throw e;               }               log.warn("fetch config fail, try another one: {}", serverList.get(index + 1));           }       }   }   private void doFetchGroupConfig(final String server, final ConfigGroupEnum... groups) {       StringBuilder params = new StringBuilder();       for (ConfigGroupEnum groupKey : groups) {           params.append("groupKeys").append("=").append(groupKey.name()).append("&amp;");       }       String url = server + "/configs/fetch?" + StringUtils.removeEnd(params.toString(), "&amp;");       log.info("request configs: [{}]", url);       String json = null;       try {           json = this.httpClient.getForObject(url, String.class);       } catch (RestClientException e) {           String message = String.format("fetch config fail from server[%s], %s", url, e.getMessage());           log.warn(message);           throw new SoulException(message, e);       }       // update local cache       boolean updated = this.updateCacheWithJson(json);       if (updated) {           log.info("get latest configs: [{}]", json);           return;       }       // not updated. it is likely that the current config server has not been updated yet. wait a moment.       log.info("The config of the server[{}] has not been updated or is out of date. Wait for 30s to listen for changes again.", server);       ThreadUtils.sleep(TimeUnit.SECONDS, 30);   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二件事就是往线程池中提交和admin服务数量相同的长轮询任务,一直调用doLongPolling方法去监听admin数据变化。具体就是调用admin端的/configs/listener接口。一旦admin有数据变更则会响应回来，当收到具体哪些组数据变更后，则调用doFetchGroupConfig真正去拉取变化组的配置数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HttpLongPollingTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> server<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> retryTimes <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token class-name">HttpLongPollingTask</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>server <span class="token operator">=</span> server<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">RUNNING</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> time <span class="token operator">&lt;=</span> retryTimes<span class="token punctuation">;</span> time<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      <span class="token function">doLongPolling</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment">// print warnning log.</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> retryTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Long polling failed, tried {} times, {} times left, will be suspended for a while! {}"</span><span class="token punctuation">,</span>                                  time<span class="token punctuation">,</span> retryTimes <span class="token operator">-</span> time<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token class-name">ThreadUtils</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">continue</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                      <span class="token comment">// print error, then suspended for a while.</span>                      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Long polling failed, try again after 5 minutes!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token class-name">ThreadUtils</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Stop http long polling."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doLongPolling</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span> group <span class="token operator">:</span> <span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ConfigData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cacheConfig <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">cacheConfigData</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> cacheConfig<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cacheConfig<span class="token punctuation">.</span><span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_FORM_URLENCODED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span> httpEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> listenerUrl <span class="token operator">=</span> server <span class="token operator">+</span> <span class="token string">"/configs/listener"</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"request listener configs: [{}]"</span><span class="token punctuation">,</span> listenerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JsonArray</span> groupJson <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpClient<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>listenerUrl<span class="token punctuation">,</span> httpEntity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"listener result: [{}]"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>        groupJson <span class="token operator">=</span> <span class="token constant">GSON</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">JsonObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RestClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"listener configs fail, server:[%s], %s"</span><span class="token punctuation">,</span> server<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SoulException</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>groupJson <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// fetch group configuration async.</span>        <span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">[</span><span class="token punctuation">]</span> changedGroups <span class="token operator">=</span> <span class="token constant">GSON</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>groupJson<span class="token punctuation">,</span> <span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>changedGroups<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Group config changed: {}"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>changedGroups<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doFetchGroupConfig</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网关的主动拉取数据和监听具体到了admin这边是由HttpLongPollingDataChangedListener负责。</p><p>拉取数据由fetchConfig方法处理，具体作用就是直接从缓存中根据组来获取数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ConfigData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetchConfig</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigGroupEnum</span> groupKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ConfigDataCache</span> config <span class="token operator">=</span> <span class="token constant">CACHE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token constant">APP_AUTH</span><span class="token operator">:</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> appAuthList <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appAuthList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">PLUGIN</span><span class="token operator">:</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> pluginList <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pluginList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">RULE</span><span class="token operator">:</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> ruleList <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ruleList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">SELECTOR</span><span class="token operator">:</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> selectorList <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> selectorList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">META_DATA</span><span class="token operator">:</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> metaList <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getGson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected groupKey: "</span> <span class="token operator">+</span> groupKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而长轮询监听则是由doLongPolling负责。如果当前数据已经有变化则马上响应，而如果没有变化则将长轮询请求任务 <code>LongPollingClient</code> 扔到 <code>BlocingQueue</code> 中，并且开启调度任务，60s 后执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doLongPolling</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// compare group md5</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">&gt;</span></span> changedGroup <span class="token operator">=</span> <span class="token function">compareChangedGroup</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> clientIp <span class="token operator">=</span> <span class="token function">getRemoteIp</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// response immediately.</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>changedGroup<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> changedGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>           log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"send response with the changed group, ip={}, group={}"</span><span class="token punctuation">,</span> clientIp<span class="token punctuation">,</span> changedGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">// listen for configuration changed.</span>       <span class="token keyword">final</span> <span class="token class-name">AsyncContext</span> asyncContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">startAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// AsyncContext.settimeout() does not timeout properly, so you have to control it yourself</span>       asyncContext<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// block client's thread.</span>       scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongPollingClient</span><span class="token punctuation">(</span>asyncContext<span class="token punctuation">,</span> clientIp<span class="token punctuation">,</span> <span class="token class-name">HttpConstants</span><span class="token punctuation">.</span><span class="token constant">SERVER_MAX_HOLD_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"> class LongPollingClient implements Runnable {        @Override        public void run() {            this.asyncTimeoutFuture = scheduler.schedule(() -&gt; {                clients.remove(LongPollingClient.this);                List&lt;ConfigGroupEnum&gt; changedGroups = compareChangedGroup((HttpServletRequest) asyncContext.getRequest());                sendResponse(changedGroups);            }, timeoutTime, TimeUnit.MILLISECONDS);            clients.add(this);        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关数据同步</title>
      <link href="/2021/01/18/soul/soul-sync-data/"/>
      <url>/2021/01/18/soul/soul-sync-data/</url>
      
        <content type="html"><![CDATA[<h2 id="soul数据同步"><a href="#soul数据同步" class="headerlink" title="soul数据同步"></a>soul数据同步</h2><p>数据同步是指将 soul-admin 配置的数据，同步到 soul集群中的JVM内存里面，是网关高性能的关键。</p><h2 id="soul支持同步方式"><a href="#soul支持同步方式" class="headerlink" title="soul支持同步方式"></a>soul支持同步方式</h2><ol><li>websocket同步（默认方式，推荐）</li><li>zookeeper同步</li><li>http长轮询同步</li><li>nacos同步</li></ol><h4 id="同步数据的类图"><a href="#同步数据的类图" class="headerlink" title="同步数据的类图"></a>同步数据的类图</h4><p><img src="/medias/assets/soul//20210119210918-hyfuzy6-HttpLongPollingDataChangedListener.png" alt="HttpLongPollingDataChangedListener.png"></p><p>DataChangedListener作为数据变化的顶级接口声明了授权、插件、选择器、元数据、规则数据变化的默认方法。DataChangedListener总共有4个子类，分别是AbstractDataChangedListener、NacosDataChangedListener、ZookeeperDataChangedListener、WebsocketDataChangedListener，分别对应着4种同步方式。</p><h2 id="http长轮询同步核心类详解"><a href="#http长轮询同步核心类详解" class="headerlink" title="http长轮询同步核心类详解"></a>http长轮询同步核心类详解</h2><p><img src="/medias/assets/soul//20210119220426-wi9y2gb-HttpLongPollingDataChangedListener.png" alt="HttpLongPollingDataChangedListener.png"></p><p>AbstractDataChangedListener实现了DataChangedListener、InitializingBean接口。相对较简单，主要作用是维护admin配置数据缓存ConcurrentMap&lt;String, ConfigDataCache&gt; CACHE。而http长轮询的实现关键在其子类HttpLongPollingDataChangedListener。</p><p><img src="/medias/assets/soul//20210119221421-rbfl2pw-HttpLongPollingDataChangedListener.png" alt="HttpLongPollingDataChangedListener.png"></p><p>HttpLongPollingDataChangedListener详细说明如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpLongPollingDataChangedListener</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDataChangedListener</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> <span class="token constant">LOCK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 维护长轮询连接阻塞队列</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongPollingClient</span><span class="token punctuation">&gt;</span></span> clients<span class="token punctuation">;</span>    <span class="token comment">// 调度线程池</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduler<span class="token punctuation">;</span>    <span class="token comment">// 刷新缓存配置</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HttpSyncProperties</span> httpSyncProperties<span class="token punctuation">;</span>    <span class="token comment">// bean初始化后启动定时任务，默认5分钟刷新一次缓存</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> syncInterval <span class="token operator">=</span> httpSyncProperties<span class="token punctuation">.</span><span class="token function">getRefreshInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Periodically check the data for changes and update the cache</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"http sync strategy refresh config start."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refreshLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"http sync strategy refresh config success."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"http sync strategy refresh config error!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> syncInterval<span class="token punctuation">,</span> syncInterval<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"http sync strategy refresh interval: {}ms"</span><span class="token punctuation">,</span> syncInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refreshLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateAppAuthCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updatePluginCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateRuleCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateSelectorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateMetaDataCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 比较数是否有变化，如果有变化立即响应，如果没有变化则使用Servlet3.0异步响应技术，先把请求放入阻塞队列，</span>    <span class="token comment">// 设定60秒后调度。60秒后不管有没有数据变化都进行响应，并移除这个请求。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doLongPolling</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// compare group md5</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">&gt;</span></span> changedGroup <span class="token operator">=</span> <span class="token function">compareChangedGroup</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> clientIp <span class="token operator">=</span> <span class="token function">getRemoteIp</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// response immediately.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>changedGroup<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> changedGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"send response with the changed group, ip={}, group={}"</span><span class="token punctuation">,</span> clientIp<span class="token punctuation">,</span> changedGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// listen for configuration changed.</span>        <span class="token keyword">final</span> <span class="token class-name">AsyncContext</span> asyncContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">startAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// AsyncContext.settimeout() does not timeout properly, so you have to control it yourself</span>        asyncContext<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// block client's thread.</span>        scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongPollingClient</span><span class="token punctuation">(</span>asyncContext<span class="token punctuation">,</span> clientIp<span class="token punctuation">,</span> <span class="token class-name">HttpConstants</span><span class="token punctuation">.</span><span class="token constant">SERVER_MAX_HOLD_TIMEOUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果授权数据有变化，则响应通知变化并移除所有的长链接请求。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterAppAuthChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppAuthData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataChangeTask</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">APP_AUTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果元数据有变化，则响应通知变化并移除所有的长链接请求。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterMetaDataChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetaData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataChangeTask</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果插件数据有变化，则响应通知变化并移除所有的长链接请求。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterPluginChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PluginData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataChangeTask</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">PLUGIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果规则数据有变化，则响应通知变化并移除所有的长链接请求。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterRuleChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RuleData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataChangeTask</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">RULE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果选择器数据有变化，则响应通知变化并移除所有的长链接请求。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterSelectorChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectorData</span><span class="token punctuation">&gt;</span></span> changed<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">DataEventTypeEnum</span> eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scheduler<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataChangeTask</span><span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token constant">SELECTOR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 取出网关数据修改时间戳和md5值比较数据是否有变化</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">&gt;</span></span> <span class="token function">compareChangedGroup</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">&gt;</span></span> changedGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigGroupEnum</span> group <span class="token operator">:</span> <span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// md5,lastModifyTime</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>params <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> params<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SoulException</span><span class="token punctuation">(</span><span class="token string">"group param invalid:"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">String</span> clientMd5 <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> clientModifyTime <span class="token operator">=</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ConfigDataCache</span> serverCache <span class="token operator">=</span> <span class="token constant">CACHE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// do check.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkCacheDelayAndUpdate</span><span class="token punctuation">(</span>serverCache<span class="token punctuation">,</span> clientMd5<span class="token punctuation">,</span> clientModifyTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                changedGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> changedGroup<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 对比时间戳和md5值，如果有变化则返回true，无变化则返回false。</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkCacheDelayAndUpdate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigDataCache</span> serverCache<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> clientMd5<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> clientModifyTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// is the same, doesn't need to be updated</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientMd5<span class="token punctuation">,</span> serverCache<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// if the md5 value is different, it is necessary to compare lastModifyTime.</span>        <span class="token keyword">long</span> lastModifyTime <span class="token operator">=</span> serverCache<span class="token punctuation">.</span><span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModifyTime <span class="token operator">&gt;=</span> clientModifyTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// the client's config is out of date.</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// the lastModifyTime before client, then the local cache needs to be updated.</span>        <span class="token comment">// Considering the concurrency problem, admin must lock,</span>        <span class="token comment">// otherwise it may cause the request from soul-web to update the cache concurrently, causing excessive db pressure</span>        <span class="token keyword">boolean</span> locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            locked <span class="token operator">=</span> <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>locked<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ConfigDataCache</span> latest <span class="token operator">=</span> <span class="token constant">CACHE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>serverCache<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>latest <span class="token operator">!=</span> serverCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// the cache of admin was updated. if the md5 value is the same, there's no need to update.</span>                    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientMd5<span class="token punctuation">,</span> latest<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// load cache from db.</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refreshLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                latest <span class="token operator">=</span> <span class="token constant">CACHE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>serverCache<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientMd5<span class="token punctuation">,</span> latest<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// not locked, the client need to be updated.</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * Send response datagram.     *     * @param response      the response     * @param changedGroups the changed groups     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">generateResponse</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">&gt;</span></span> changedGroups<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache,no-store"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token class-name">SoulAdminResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">SoulResultMessage</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">,</span> changedGroups<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Sending response failed."</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 数据变化任务，当数据有变化就会提交该任务到线程池，并发响应和移除长轮询链接</span>    <span class="token keyword">class</span> <span class="token class-name">DataChangeTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * The Group where the data has changed.         */</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConfigGroupEnum</span> groupKey<span class="token punctuation">;</span>        <span class="token comment">/**         * The Change time.         */</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> changeTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * Instantiates a new Data change task.         *         * @param groupKey the group key         */</span>        <span class="token class-name">DataChangeTask</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ConfigGroupEnum</span> groupKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>groupKey <span class="token operator">=</span> groupKey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongPollingClient</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> clients<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">LongPollingClient</span> client <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                client<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>groupKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"send response with the changed group,ip={}, group={}, changeTime={}"</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> groupKey<span class="token punctuation">,</span> changeTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 长链接保持类。长链接60秒后调度，响应并移除。</span>    <span class="token keyword">class</span> <span class="token class-name">LongPollingClient</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * The Async context.         */</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AsyncContext</span> asyncContext<span class="token punctuation">;</span>        <span class="token comment">/**         * The Ip.         */</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>        <span class="token comment">/**         * The Timeout time.         */</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutTime<span class="token punctuation">;</span>        <span class="token comment">/**         * The Async timeout future.         */</span>        <span class="token keyword">private</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> asyncTimeoutFuture<span class="token punctuation">;</span>        <span class="token comment">/**         * Instantiates a new Long polling client.         *         * @param ac          the ac         * @param ip          the ip         * @param timeoutTime the timeout time         */</span>        <span class="token class-name">LongPollingClient</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AsyncContext</span> ac<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ip<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeoutTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>asyncContext <span class="token operator">=</span> ac<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timeoutTime <span class="token operator">=</span> timeoutTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>asyncTimeoutFuture <span class="token operator">=</span> scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                clients<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">LongPollingClient</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">&gt;</span></span> changedGroups <span class="token operator">=</span> <span class="token function">compareChangedGroup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> asyncContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sendResponse</span><span class="token punctuation">(</span>changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> timeoutTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clients<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Send response.         *         * @param changedGroups the changed groups         */</span>        <span class="token keyword">void</span> <span class="token function">sendResponse</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigGroupEnum</span><span class="token punctuation">&gt;</span></span> changedGroups<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// cancel scheduler</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> asyncTimeoutFuture<span class="token punctuation">)</span> <span class="token punctuation">{</span>                asyncTimeoutFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">generateResponse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> asyncContext<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> changedGroups<span class="token punctuation">)</span><span class="token punctuation">;</span>            asyncContext<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="疑问：为何缓存数据为变化还要去数据库中刷新一次数据？"><a href="#疑问：为何缓存数据为变化还要去数据库中刷新一次数据？" class="headerlink" title="疑问：为何缓存数据为变化还要去数据库中刷新一次数据？"></a>疑问：为何缓存数据为变化还要去数据库中刷新一次数据？</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// the lastModifyTime before client, then the local cache needs to be updated.</span><span class="token comment">// Considering the concurrency problem, admin must lock,</span><span class="token comment">// otherwise it may cause the request from soul-web to update the cache concurrently, causing excessive db pressure</span><span class="token keyword">boolean</span> locked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    locked <span class="token operator">=</span> <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>locked<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">ConfigDataCache</span> latest <span class="token operator">=</span> <span class="token constant">CACHE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>serverCache<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>latest <span class="token operator">!=</span> serverCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// the cache of admin was updated. if the md5 value is the same, there's no need to update.</span>            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientMd5<span class="token punctuation">,</span> latest<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// load cache from db.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refreshLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        latest <span class="token operator">=</span> <span class="token constant">CACHE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>serverCache<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clientMd5<span class="token punctuation">,</span> latest<span class="token punctuation">.</span><span class="token function">getMd5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关集成Sofa</title>
      <link href="/2021/01/16/soul/soul-sofa-run/"/>
      <url>/2021/01/16/soul/soul-sofa-run/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是sofa-rpc？"><a href="#什么是sofa-rpc？" class="headerlink" title="什么是sofa-rpc？"></a>什么是sofa-rpc？</h4><p>sofa-rpc 最早源于阿里内部的 HSF，是近期蚂蚁金服开源的一个高可扩展性、高性能、生产级的 Java RPC 框架。sofa-rpc 在蚂蚁金服已经历了十多年的发展，致力于简化应用之间的 RPC 调用。为应用提供方便透明、稳定高效的点对点远程服务调用方案。为了用户和开发者方便的进行功能扩展，SOFA-RPC 提供了丰富的模型抽象和可扩展接口，包括过滤器、路由、负载均衡等。同时围绕 SOFA-RPC 框架及其周边组件提供丰富的微服务治理方案。</p><h4 id="sofa-rpc功能特性"><a href="#sofa-rpc功能特性" class="headerlink" title="sofa-rpc功能特性"></a>sofa-rpc功能特性</h4><ul><li>透明化、高性能的远程服务调用</li><li>支持多种服务路由及负载均衡策略</li><li>支持多种注册中心的集成</li><li>支持 bolt、rest、dubbo 等多种通信协议</li><li>支持同步、单向、回调、泛化等多种调用方式</li><li>支持集群容错、服务预热、自动故障隔离</li><li>强大的扩展功能，可以按需扩展各个功能组件</li></ul><h4 id="sofa服务接入soul网关"><a href="#sofa服务接入soul网关" class="headerlink" title="sofa服务接入soul网关"></a>sofa服务接入soul网关</h4><ul><li>引入soul对sofa的支持依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.dromara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>soul-spring-boot-starter-client-sofa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${soul.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加发布网关的配置</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">soul:  sofa:    adminUrl: http://localhost:9095    contextPath: /sofa    appName: sofa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>给需要发布到网关的接口增加注解@SoulSofaClient</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulSofaClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/findById"</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Find by Id"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DubboTest</span> dubboTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world Soul Sofa, findById"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dubboTest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulSofaClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/findAll"</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Get all data"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DubboTest</span> dubboTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world Soul Sofa , findAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dubboTest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulSofaClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Insert a row of data"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DubboTest</span> dubboTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world Soul Sofa: "</span> <span class="token operator">+</span> dubboTest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dubboTest<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动sofa应用发布到soul中</li><li>网关中开启sofa插件</li></ul><p><img src="/medias/assets/soul//20210117004645-tg0ks42-1.png" alt="1.png"></p><ul><li>通过网关调用sofa服务</li></ul><p><img src="/medias/assets/soul//20210117004744-qa3ce3y-2.png" alt="2.png"></p><p>坑！发现调不通，神奇，debug查看，sofa插件并未加载，所以响应了空</p><p><img src="/medias/assets/soul//20210117004909-irmbv9c-3.png" alt="3.png"></p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Dubbo插件</title>
      <link href="/2021/01/16/soul/soul-dubbo-plugin/"/>
      <url>/2021/01/16/soul/soul-dubbo-plugin/</url>
      
        <content type="html"><![CDATA[<h4 id="dubbo插件的作用是什么？"><a href="#dubbo插件的作用是什么？" class="headerlink" title="dubbo插件的作用是什么？"></a>dubbo插件的作用是什么？</h4><p>dubbo插件是将<code>http协议</code> 转换成<code>dubbo协议</code> 的插件,也是网关实现dubbo泛化调用的关键。</p><h4 id="什么是泛化调用？"><a href="#什么是泛化调用？" class="headerlink" title="什么是泛化调用？"></a>什么是泛化调用？</h4><p>泛化接口调用方式主要用于客户端没有 API 接口及模型类元的情况，参数及返回值中的所有 POJO 均用 Map 表示，通常用于框架集成，比如：实现一个通用的服务测试框架，可通过 GenericService 调用所有服务实现。</p><h4 id="为什么使用泛化调用？"><a href="#为什么使用泛化调用？" class="headerlink" title="为什么使用泛化调用？"></a>为什么使用泛化调用？</h4><p>一般使用dubbo，provider端需要暴露出接口和方法，consumer端要十分明确服务使用的接口定义和方法定义（还有入参返参类型等等信息，常常还需要基于provider端提供的API），两端才能正常通信调用。然而存在一种使用场景，调用方并不关心要调用的接口的详细定义，它只关注我要调用哪个方法，需要传什么参数，我能接收到什么返回结果即可，这样可以大大降低consumer端和provider端的耦合性。所以为了应对以上的需求，dubbo提供了泛化调用，也就是在consumer只知道一个接口全限定名以及入参和返参的情况下，就可以调用provider端的调用，而不需要传统的接口定义这些繁杂的结构。</p><h4 id="dubbo插件如何工作？"><a href="#dubbo插件如何工作？" class="headerlink" title="dubbo插件如何工作？"></a>dubbo插件如何工作？</h4><p>soul网关把http请求参数转换为泛化参数后根据元数据进行dubbo泛化调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取请求体数据</span>        <span class="token class-name">String</span> body <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">DUBBO_PARAMS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> soulContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 获取dubbo元数据</span>        <span class="token class-name">MetaData</span> metaData <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">META_DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkMetaData</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">assert</span> metaData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">" path is :{}, meta data have error.... {}"</span><span class="token punctuation">,</span> soulContext<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaData<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">META_DATA_ERROR</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">META_DATA_ERROR</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 如果又参数类型而无请求体参数则报错</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNoneBlank</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">DUBBO_HAVE_BODY_PARAM</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">DUBBO_HAVE_BODY_PARAM</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// dubbo泛化调用</span>        <span class="token keyword">final</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> dubboProxyService<span class="token punctuation">.</span><span class="token function">genericInvoker</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> metaData<span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">genericInvoker</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> body<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MetaData</span> metaData<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SoulException</span> <span class="token punctuation">{</span>        <span class="token comment">// issue(https://github.com/dromara/soul/issues/471), add dubbo tag route</span>        <span class="token comment">// 如果存在tag标签则放入</span>        <span class="token class-name">String</span> dubboTagRouteFromHttpHeaders <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">DUBBO_TAG_ROUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>dubboTagRouteFromHttpHeaders<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">TAG_KEY</span><span class="token punctuation">,</span> dubboTagRouteFromHttpHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 缓存中获取服务引用</span>        <span class="token class-name">ReferenceConfig</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GenericService</span><span class="token punctuation">&gt;</span></span> reference <span class="token operator">=</span> <span class="token class-name">ApplicationConfigCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">getInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ApplicationConfigCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reference <span class="token operator">=</span> <span class="token class-name">ApplicationConfigCache</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initRef</span><span class="token punctuation">(</span>metaData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">GenericService</span> genericService <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// json参数转化为dubbo泛化参数</span>        <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> pair<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ParamCheckUtils</span><span class="token punctuation">.</span><span class="token function">dubboBodyIsEmpty</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImmutablePair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            pair <span class="token operator">=</span> dubboParamResolveService<span class="token punctuation">.</span><span class="token function">buildParameter</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> metaData<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 真正调用dubbo服务</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> genericService<span class="token punctuation">.</span>$<span class="token function">invokeAsync</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pair<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">fromFuture</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>ret <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ret <span class="token operator">=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">DUBBO_RPC_RESULT_EMPTY</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">DUBBO_RPC_RESULT</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CLIENT_RESPONSE_RESULT_TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ResultEnum</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onErrorMap</span><span class="token punctuation">(</span>exception <span class="token operator">-&gt;</span> exception <span class="token keyword">instanceof</span> <span class="token class-name">GenericException</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">SoulException</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">GenericException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExceptionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SoulException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关集成Dubbo</title>
      <link href="/2021/01/15/soul/soul-dubbo-run/"/>
      <url>/2021/01/15/soul/soul-dubbo-run/</url>
      
        <content type="html"><![CDATA[<p>soul 作为流行的网关应用，对接的系统各种各样，当然少不了dubbo。那么soul是如何对接dubbo应用的呢？那么，我们就先跑个例子看看。</p><ul><li>首先我们先启动soul网关和admin管理端</li></ul><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.565</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>SoulConfiguration  <span class="token operator">:</span> load plugin<span class="token operator">:</span><span class="token punctuation">[</span>alibaba<span class="token operator">-</span>dubbo<span class="token operator">-</span>body<span class="token operator">-</span>param<span class="token punctuation">]</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>soul<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>param<span class="token punctuation">.</span>BodyParamPlugin<span class="token punctuation">]</span><span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.565</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>SoulConfiguration  <span class="token operator">:</span> load plugin<span class="token operator">:</span><span class="token punctuation">[</span>dubbo<span class="token punctuation">]</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>soul<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>AlibabaDubboPlugin<span class="token punctuation">]</span><span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.565</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>SoulConfiguration  <span class="token operator">:</span> load plugin<span class="token operator">:</span><span class="token punctuation">[</span>monitor<span class="token punctuation">]</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>soul<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>monitor<span class="token punctuation">.</span>MonitorPlugin<span class="token punctuation">]</span><span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.565</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>SoulConfiguration  <span class="token operator">:</span> load plugin<span class="token operator">:</span><span class="token punctuation">[</span>response<span class="token punctuation">]</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>soul<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>httpclient<span class="token punctuation">.</span>response<span class="token punctuation">.</span>WebClientResponsePlugin<span class="token punctuation">]</span><span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.565</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span>SoulConfiguration  <span class="token operator">:</span> load plugin<span class="token operator">:</span><span class="token punctuation">[</span>response<span class="token punctuation">]</span> <span class="token punctuation">[</span>org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>soul<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>response<span class="token punctuation">.</span>DubboResponsePlugin<span class="token punctuation">]</span><span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.783</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> b<span class="token punctuation">.</span>s<span class="token punctuation">.</span>s<span class="token punctuation">.</span>d<span class="token punctuation">.</span>w<span class="token punctuation">.</span>WebsocketSyncDataConfiguration <span class="token operator">:</span> you use websocket sync soul data<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.965</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>p<span class="token punctuation">.</span>s<span class="token punctuation">.</span>d<span class="token punctuation">.</span>w<span class="token punctuation">.</span>WebsocketSyncDataService   <span class="token operator">:</span> websocket connection is successful<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token date number">2021-01-15</span> <span class="token time number">20:11:59.125</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>a<span class="token punctuation">.</span>e<span class="token punctuation">.</span>web<span class="token punctuation">.</span>EndpointLinksResolver      <span class="token operator">:</span> Exposing <span class="token number">2</span> endpoint<span class="token operator">(</span>s<span class="token operator">)</span> beneath base path <span class="token string">'/actuator'</span><span class="token date number">2021-01-15</span> <span class="token time number">20:12:00.178</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>web<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>NettyWebServer  <span class="token operator">:</span> Netty started on port<span class="token operator">(</span>s<span class="token operator">)</span><span class="token operator">:</span> <span class="token number">9195</span><span class="token date number">2021-01-15</span> <span class="token time number">20:12:00.182</span>  <span class="token level info keyword">INFO</span> <span class="token number">2644</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>SoulBootstrapApplication         <span class="token operator">:</span> Started SoulBootstrapApplication in <span class="token number">8.658</span> seconds <span class="token operator">(</span>JVM running for <span class="token number">10.543</span><span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token date number">2021-01-15</span> <span class="token time number">20:10:15.679</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>r<span class="token punctuation">.</span>o<span class="token punctuation">.</span>CachingOperationNameGenerator <span class="token operator">:</span> Generating unique operation named<span class="token operator">:</span> batchEnabledUsingPOST_1<span class="token date number">2021-01-15</span> <span class="token time number">20:10:15.694</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>r<span class="token punctuation">.</span>o<span class="token punctuation">.</span>CachingOperationNameGenerator <span class="token operator">:</span> Generating unique operation named<span class="token operator">:</span> syncDataUsingPOST_1<span class="token date number">2021-01-15</span> <span class="token time number">20:10:15.725</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>r<span class="token punctuation">.</span>o<span class="token punctuation">.</span>CachingOperationNameGenerator <span class="token operator">:</span> Generating unique operation named<span class="token operator">:</span> detailRuleUsingGET_1<span class="token date number">2021-01-15</span> <span class="token time number">20:10:15.741</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>r<span class="token punctuation">.</span>o<span class="token punctuation">.</span>CachingOperationNameGenerator <span class="token operator">:</span> Generating unique operation named<span class="token operator">:</span> batchEnabledUsingPOST_2<span class="token date number">2021-01-15</span> <span class="token time number">20:10:15.741</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>w<span class="token punctuation">.</span>r<span class="token punctuation">.</span>o<span class="token punctuation">.</span>CachingOperationNameGenerator <span class="token operator">:</span> Generating unique operation named<span class="token operator">:</span> detailUsingGET_1<span class="token date number">2021-01-15</span> <span class="token time number">20:10:15.804</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>w<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>TomcatWebServer  <span class="token operator">:</span> Tomcat started on port<span class="token operator">(</span>s<span class="token operator">)</span><span class="token operator">:</span> <span class="token number">9095</span> <span class="token operator">(</span>http<span class="token operator">)</span> with context path <span class="token string">''</span><span class="token date number">2021-01-15</span> <span class="token time number">20:10:15.944</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>soul<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>SoulAdminBootstrap  <span class="token operator">:</span> Started SoulAdminBootstrap in <span class="token number">8.925</span> seconds <span class="token operator">(</span>JVM running for <span class="token number">12.176</span><span class="token operator">)</span><span class="token date number">2021-01-15</span> <span class="token time number">20:10:16.291</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span><span class="token operator">)</span><span class="token operator">-</span><span class="token ip-address constant">192.168.1.107</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c<span class="token punctuation">.</span>c<span class="token punctuation">.</span>C<span class="token punctuation">.</span><span class="token punctuation">[</span>Tomcat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>localhost<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token operator">/</span><span class="token punctuation">]</span>       <span class="token operator">:</span> Initializing Spring DispatcherServlet <span class="token string">'dispatcherServlet'</span><span class="token date number">2021-01-15</span> <span class="token time number">20:10:16.291</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span><span class="token operator">)</span><span class="token operator">-</span><span class="token ip-address constant">192.168.1.107</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet        <span class="token operator">:</span> Initializing Servlet <span class="token string">'dispatcherServlet'</span><span class="token date number">2021-01-15</span> <span class="token time number">20:10:16.306</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span><span class="token operator">)</span><span class="token operator">-</span><span class="token ip-address constant">192.168.1.107</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet        <span class="token operator">:</span> Completed initialization in <span class="token number">15</span> ms<span class="token date number">2021-01-15</span> <span class="token time number">20:11:58.968</span>  <span class="token level info keyword">INFO</span> <span class="token number">9984</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token operator">-</span><span class="token number">9095</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">.</span>l<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>WebsocketCollector   <span class="token operator">:</span> websocket on open successful<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到如上日志输出，说明网关和管理端已经正常启动。</p><ul><li>接下来导入源码中的dubbo例子，soul-examples-apache-dubbo-service，查看dubbo配置，那我们就懂了，用的是zookeeper做为注册中心，并暴露了两个服务类。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://code.alibabatech.com/schema/dubbo       http://code.alibabatech.com/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-dubbo-service<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper://localhost:2181<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20888<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.soul.examples.dubbo.api.service.DubboTestService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubboTestService<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubboMultiParamService<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>那么我们就先启动zookeeper</li></ul><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,391</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>ZKDatabase<span class="token operator">@</span><span class="token number">152</span><span class="token punctuation">]</span> <span class="token operator">-</span> zookeeper<span class="token punctuation">.</span>commitLogCount<span class="token operator">=</span><span class="token number">500</span><span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,415</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>SnapStream<span class="token operator">@</span><span class="token number">61</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token domain constant">zookeeper.snapshot.compression.method</span> <span class="token operator">=</span> CHECKED<span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,447</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>FileSnap<span class="token operator">@</span><span class="token number">85</span><span class="token punctuation">]</span> <span class="token operator">-</span> Reading snapshot <span class="token punctuation">.</span><span class="token punctuation">.</span>\data\version<span class="token operator">-</span><span class="token number">2</span>\snapshot<span class="token punctuation">.</span>7<span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,466</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>DataTree<span class="token operator">@</span><span class="token number">1730</span><span class="token punctuation">]</span> <span class="token operator">-</span> The digest in the snapshot has digest version of <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> with zxid as <span class="token number">0x7</span><span class="token punctuation">,</span> and digest value as <span class="token number">1371985504</span><span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,539</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>ZKAuditProvider<span class="token operator">@</span><span class="token number">42</span><span class="token punctuation">]</span> <span class="token operator">-</span> ZooKeeper audit is disabled<span class="token punctuation">.</span><span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,544</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>FileTxnSnapLog<span class="token operator">@</span><span class="token number">363</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">74</span> txns loaded in <span class="token number">25</span> ms<span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,545</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>ZKDatabase<span class="token operator">@</span><span class="token number">289</span><span class="token punctuation">]</span> <span class="token operator">-</span> Snapshot loaded in <span class="token number">153</span> ms<span class="token punctuation">,</span> highest zxid is <span class="token number">0x51</span><span class="token punctuation">,</span> digest is <span class="token number">8209265874</span><span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,547</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>FileTxnSnapLog<span class="token operator">@</span><span class="token number">470</span><span class="token punctuation">]</span> <span class="token operator">-</span> Snapshotting<span class="token operator">:</span> <span class="token number">0x51</span> to <span class="token punctuation">.</span><span class="token punctuation">.</span>\data\version<span class="token operator">-</span><span class="token number">2</span>\snapshot<span class="token punctuation">.</span>51<span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,549</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>ZooKeeperServer<span class="token operator">@</span><span class="token number">529</span><span class="token punctuation">]</span> <span class="token operator">-</span> Snapshot taken in <span class="token number">2</span> ms<span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,571</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>ProcessThread<span class="token operator">(</span>sid<span class="token operator">:</span><span class="token number">0</span> cport<span class="token operator">:</span><span class="token number">2181</span><span class="token operator">)</span><span class="token operator">:</span><span class="token operator">:</span>PrepRequestProcessor<span class="token operator">@</span><span class="token number">136</span><span class="token punctuation">]</span> <span class="token operator">-</span> PrepRequestProcessor <span class="token operator">(</span>sid<span class="token operator">:</span><span class="token number">0</span><span class="token operator">)</span> started<span class="token punctuation">,</span> reconfigEnabled<span class="token operator">=</span><span class="token boolean">false</span><span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,572</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>RequestThrottler<span class="token operator">@</span><span class="token number">74</span><span class="token punctuation">]</span> <span class="token operator">-</span> zookeeper<span class="token punctuation">.</span>request_throttler<span class="token punctuation">.</span>shutdownTimeout <span class="token operator">=</span> <span class="token number">10000</span><span class="token date number">2021-01-15</span> <span class="token time number">20:15:20,594</span> <span class="token punctuation">[</span>myid<span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token level info keyword">INFO</span>  <span class="token punctuation">[</span>main<span class="token operator">:</span>ContainerManager<span class="token operator">@</span><span class="token number">83</span><span class="token punctuation">]</span> <span class="token operator">-</span> Using checkIntervalMs<span class="token operator">=</span><span class="token number">60000</span> maxPerMinute<span class="token operator">=</span><span class="token number">10000</span> maxNeverUsedIntervalMs<span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>看到如上日志说明zookeeper已经起来了。接下来就直接运行这个dubbo应用</li></ul><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token date number">2021-01-15</span> <span class="token time number">20:25:13.230</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>ain<span class="token operator">-</span>EventThread<span class="token punctuation">]</span> o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c<span class="token punctuation">.</span>f<span class="token punctuation">.</span>state<span class="token punctuation">.</span>ConnectionStateManager     <span class="token operator">:</span> State change<span class="token operator">:</span> CONNECTED<span class="token date number">2021-01-15</span> <span class="token time number">20:25:13.252</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>ain<span class="token operator">-</span>EventThread<span class="token punctuation">]</span> o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>imps<span class="token punctuation">.</span>EnsembleTracker     <span class="token operator">:</span> New config event received<span class="token operator">:</span> <span class="token operator">{</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:13.252</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>ain<span class="token operator">-</span>EventThread<span class="token punctuation">]</span> o<span class="token punctuation">.</span>a<span class="token punctuation">.</span>c<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>imps<span class="token punctuation">.</span>EnsembleTracker     <span class="token operator">:</span> New config event received<span class="token operator">:</span> <span class="token operator">{</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:14.876</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>b<span class="token punctuation">.</span>w<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>TomcatWebServer  <span class="token operator">:</span> Tomcat started on port<span class="token operator">(</span>s<span class="token operator">)</span><span class="token operator">:</span> <span class="token number">8011</span> <span class="token operator">(</span>http<span class="token operator">)</span> with context path <span class="token string">''</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:14.883</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>e<span class="token punctuation">.</span>a<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>TestApacheDubboApplication <span class="token operator">:</span> Started TestApacheDubboApplication in <span class="token number">6.832</span> seconds <span class="token operator">(</span>JVM running for <span class="token number">9.537</span><span class="token operator">)</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.236</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/findAll"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">"Get all data"</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboTestService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"findAll"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/findAll"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.257</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/insert"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">"Insert a row of data"</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboTestService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"insert"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/insert"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.entity.DubboTest"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.272</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/findById"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">"Query by Id"</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboTestService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"findById"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/findById"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"java.lang.String"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.286</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByIdsAndName"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"findByIdsAndName"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByIdsAndName"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"java.util.List,java.lang.String"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.299</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByListId"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"findByListId"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByListId"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"java.util.List"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.317</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/batchSave"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"batchSave"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/batchSave"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"java.util.List"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.332</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByStringArray"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"findByStringArray"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByStringArray"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"[Ljava.lang.String;"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.347</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByArrayIdsAndName"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"findByArrayIdsAndName"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/findByArrayIdsAndName"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"[Ljava.lang.Integer;,java.lang.String"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.361</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/saveComplexBeanTest"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"saveComplexBeanTest"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/saveComplexBeanTest"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.entity.ComplexBeanTest"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.375</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/saveComplexBeanTestAndName"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"saveComplexBeanTestAndName"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/saveComplexBeanTestAndName"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.entity.ComplexBeanTest,java.lang.String"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span class="token date number">2021-01-15</span> <span class="token time number">20:25:15.390</span>  <span class="token level info keyword">INFO</span> <span class="token number">5380</span> <span class="token separator comment">---</span> <span class="token punctuation">[</span>pool<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> o<span class="token punctuation">.</span>d<span class="token punctuation">.</span>s<span class="token punctuation">.</span>client<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RegisterUtils  <span class="token operator">:</span> dubbo client register success<span class="token operator">:</span> <span class="token operator">{</span><span class="token string">"appName"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"contextPath"</span><span class="token operator">:</span><span class="token string">"/dubbo"</span><span class="token punctuation">,</span><span class="token string">"path"</span><span class="token operator">:</span><span class="token string">"/dubbo/batchSaveAndNameAndId"</span><span class="token punctuation">,</span><span class="token string">"pathDesc"</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"rpcType"</span><span class="token operator">:</span><span class="token string">"dubbo"</span><span class="token punctuation">,</span><span class="token string">"serviceName"</span><span class="token operator">:</span><span class="token string">"org.dromara.soul.examples.dubbo.api.service.DubboMultiParamService"</span><span class="token punctuation">,</span><span class="token string">"methodName"</span><span class="token operator">:</span><span class="token string">"batchSaveAndNameAndId"</span><span class="token punctuation">,</span><span class="token string">"ruleName"</span><span class="token operator">:</span><span class="token string">"/dubbo/batchSaveAndNameAndId"</span><span class="token punctuation">,</span><span class="token string">"parameterTypes"</span><span class="token operator">:</span><span class="token string">"java.util.List,java.lang.String,java.lang.String"</span><span class="token punctuation">,</span><span class="token string">"rpcExt"</span><span class="token operator">:</span><span class="token string">"{\"group\":\"\",\"version\":\"\",\"loadbalance\":\"random\",\"retries\":2,\"timeout\":10000,\"url\":\"\"}"</span><span class="token punctuation">,</span><span class="token string">"enabled"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到如上日志，dubbo就成功发布到了网关中。好，那么我们就来试试效果如何。</p><ul><li>小试牛刀</li></ul><p>无参接口调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulDubboClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/findById"</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Query by Id"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DubboTest</span> dubboTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world Soul Apache, findById"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dubboTest<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/assets/soul//20210115204523-5cwfuvz-success1.png" alt="success1.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SoulDubboClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/findAll"</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Get all data"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DubboTest</span> dubboTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dubboTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world Soul Apache, findAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dubboTest<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dubboTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/assets/soul//20210115205750-wteoiof-2.png" alt="2.png"></p><p>有参接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulDubboClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">,</span> desc <span class="token operator">=</span> <span class="token string">"Insert a row of data"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">DubboTest</span> dubboTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dubboTest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world Soul Apache Dubbo: "</span> <span class="token operator">+</span> dubboTest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dubboTest<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"ids"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"cuicui"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/assets/soul//20210115210902-v92ad0f-4.png" alt="4.png"></p><p>多参接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulDubboClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/findByIdsAndName"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">findByIdsAndName</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DubboTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>ids<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world soul apache dubbo param findByIdsAndName ："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> test<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/assets/soul//20210115211402-b2u0bfp-5.png" alt="5.png"></p><p><img src="/medias/assets/soul//20210115211439-u8m9oao-6.png" alt="6.png"></p><p>多参接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulDubboClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/findByArrayIdsAndName"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">findByArrayIdsAndName</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DubboTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world soul apache dubbo param findByArrayIdsAndName ："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> test<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"ids"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"cuicui"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/assets/soul//20210115211654-0n85k5a-9.png" alt="9.png"></p><p>集合对象参数接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@SoulDubboClient</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/batchSave"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DubboTest</span> <span class="token function">batchSave</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DubboTest</span><span class="token punctuation">&gt;</span></span> dubboTestList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">DubboTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>dubboTestList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DubboTest</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hello world soul apache dubbo param batchSave :"</span> <span class="token operator">+</span> dubboTestList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DubboTest</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> test<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"dubboTestList"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"cuicui"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"cuicui"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><p><img src="/medias/assets/soul//20210115212458-4kutp24-10.png" alt="10.png"></p><p>复杂对象参数接口：</p><pre class="line-numbers language-none"><code class="language-none">@Override@SoulDubboClient(path = "/saveComplexBeanTest")public DubboTest saveComplexBeanTest(ComplexBeanTest complexBeanTest) {    DubboTest test = new DubboTest();    test.setId(complexBeanTest.getIdLists().toString());    test.setName("hello world soul apache dubbo param saveComplexBeanTest :" + complexBeanTest.getDubboTest().getName());    return test;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"dubboTest"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"cuicui"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"idLists"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"idMaps"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"cuicui"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应：</p><p><img src="/medias/assets/soul//20210115213646-id6y2s6-13.png" alt="13.png"></p><p>常用的传参方式都用了一遍，轻松无压力。只需使用http post方式，把json参数通过body传输，通过网关即可轻松访问dubbo服务。</p><p><strong>好了，总结一下：</strong></p><ol><li><strong>dubbo应用如何使用soul网关</strong></li></ol><ul><li>引入soul依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.dromara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>soul-spring-boot-starter-client-apache-dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${soul.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置soul-admin地址、contextPath、应用名称</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">soul</span><span class="token punctuation">:</span>  <span class="token key atrule">dubbo</span><span class="token punctuation">:</span>    <span class="token key atrule">adminUrl</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9095</span>    <span class="token key atrule">contextPath</span><span class="token punctuation">:</span> /dubbo    <span class="token key atrule">appName</span><span class="token punctuation">:</span> dubbo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>需要发布到soul的接口上增加注解@SoulDubboClient并配置映射路径</li></ul><pre class="line-numbers language-none"><code class="language-none">@SoulDubboClient(path = "/findById", desc = "Query by Id")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.dubbo服务通过soul网关进行调用</strong></p><p>发送http post请求，body传输json参数</p><p><strong>遇到的问题：</strong></p><p>调用有参接口而未传入参数响应错误信息</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token operator">{</span><span class="token string">"code"</span><span class="token operator">:</span><span class="token number">431</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token operator">:</span><span class="token string">"Dubbo must have body param, please enter the JSON format in the body!"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token boolean">null</span><span class="token operator">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>未开启dubbo插件调用接口响应错误信息</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token operator">{</span><span class="token string">"code"</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token operator">:</span><span class="token string">"Service invocation exception, or no result is returned!"</span><span class="token punctuation">,</span><span class="token string">"data"</span><span class="token operator">:</span><span class="token boolean">null</span><span class="token operator">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关Divide插件</title>
      <link href="/2021/01/14/soul/soul-divide-plugin/"/>
      <url>/2021/01/14/soul/soul-divide-plugin/</url>
      
        <content type="html"><![CDATA[<h4 id="divide-plugin是什么？"><a href="#divide-plugin是什么？" class="headerlink" title="divide plugin是什么？"></a>divide plugin是什么？</h4><ol><li>divide插件是网关处理 <code>http协议</code>请求的核心处理插件。</li><li>divide插件是进行http正向代理的插件，所有http类型的请求，都是由该插件进行负载均衡的调用。</li></ol><h4 id="divide-plugin如何工作？"><a href="#divide-plugin如何工作？" class="headerlink" title="divide plugin如何工作？"></a>divide plugin如何工作？</h4><p>soul plugin 通过职责链模式串联。初始化网关的web服务SoulWebHandler时候加载了所有配置的插件保存在<br>DefaultSoulPluginChain职责链对象中。当请求来了之后，按照插件顺序依次执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Init SoulWebHandler. * * @param plugins this plugins is All impl SoulPlugin. * @return {@linkplain SoulWebHandler} */</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"webHandler"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">SoulWebHandler</span> <span class="token function">soulWebHandler</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> plugins<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span></span> pluginList <span class="token operator">=</span> plugins<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token operator">::</span><span class="token function">emptyList</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoulPlugin</span><span class="token punctuation">&gt;</span></span> soulPlugins <span class="token operator">=</span> pluginList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">SoulPlugin</span><span class="token operator">::</span><span class="token function">getOrder</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    soulPlugins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>soulPlugin <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"load plugin:[{}] [{}]"</span><span class="token punctuation">,</span> soulPlugin<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> soulPlugin<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SoulWebHandler</span><span class="token punctuation">(</span>soulPlugins<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@Overridepublic Mono&lt;Void&gt; handle(@NonNull final ServerWebExchange exchange) {    MetricsTrackerFacade.getInstance().counterInc(MetricsLabelEnum.REQUEST_TOTAL.getName());    Optional&lt;HistogramMetricsTrackerDelegate&gt; startTimer = MetricsTrackerFacade.getInstance().histogramStartTimer(MetricsLabelEnum.REQUEST_LATENCY.getName());    // 依次执行插件处理    return new DefaultSoulPluginChain(plugins).execute(exchange).subscribeOn(scheduler)            .doOnSuccess(t -&gt; startTimer.ifPresent(time -&gt; MetricsTrackerFacade.getInstance().histogramObserveDuration(time)));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DividePlugin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSoulPlugin</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SoulPluginChain</span> chain<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SelectorData</span> selector<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RuleData</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取上下文信息（参数透传的一种方式）</span>        <span class="token keyword">final</span> <span class="token class-name">SoulContext</span> soulContext <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> soulContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 规则处理反序列化</span>        <span class="token keyword">final</span> <span class="token class-name">DivideRuleHandle</span> ruleHandle <span class="token operator">=</span> <span class="token class-name">GsonUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DivideRuleHandle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据selector id从本地缓存中获取被代理的服务</span>        <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DivideUpstream</span><span class="token punctuation">&gt;</span></span> upstreamList <span class="token operator">=</span> <span class="token class-name">UpstreamCacheManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findUpstreamListBySelectorId</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果没有一个被代理的服务就返回错误</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"divide upstream configuration error： {}"</span><span class="token punctuation">,</span> rule<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 获取请求目标ip地址</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用选择器做第一次流量的筛选（这里通过spi加载扩展的负载均衡算法进行处理）</span>        <span class="token class-name">DivideUpstream</span> divideUpstream <span class="token operator">=</span> <span class="token class-name">LoadBalanceUtils</span><span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span>upstreamList<span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getLoadBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 筛选后找不到一个被代理的服务就返回错误</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"divide has no upstream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> error <span class="token operator">=</span> <span class="token class-name">SoulResultWrap</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulResultEnum</span><span class="token punctuation">.</span><span class="token constant">CANNOT_FIND_URL</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">WebFluxResultUtils</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// set the http url</span>        <span class="token comment">// 拼接出最终目标url</span>        <span class="token class-name">String</span> domain <span class="token operator">=</span> <span class="token function">buildDomain</span><span class="token punctuation">(</span>divideUpstream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> realURL <span class="token operator">=</span> <span class="token function">buildRealURL</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> soulContext<span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把加工的信息写入请求ServerWebExchange中</span>        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_URL</span><span class="token punctuation">,</span> realURL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// set the http timeout</span>        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_TIME_OUT</span><span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exchange<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">HTTP_RETRY</span><span class="token punctuation">,</span> ruleHandle<span class="token punctuation">.</span><span class="token function">getRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用下一个插件处理</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关SpringMvc注册</title>
      <link href="/2021/01/14/soul/soul-http-client-register/"/>
      <url>/2021/01/14/soul/soul-http-client-register/</url>
      
        <content type="html"><![CDATA[<h4 id="soul-http-client-注册流程"><a href="#soul-http-client-注册流程" class="headerlink" title="soul http client 注册流程"></a>soul http client 注册流程</h4><p>spring mvc应用端配置soul注册信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">soul</span><span class="token punctuation">:</span>  <span class="token key atrule">http</span><span class="token punctuation">:</span>    <span class="token key atrule">adminUrl</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9095</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8188</span>    <span class="token key atrule">contextPath</span><span class="token punctuation">:</span> /http    <span class="token key atrule">appName</span><span class="token punctuation">:</span> http    <span class="token key atrule">full</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>soul-spring-boot-starter-client-springmvc启动的时候注册SpringMvcClientBeanPostProcessor后置处理器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoulSpringMvcClientConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 注册SpringMvcClientBeanPostProcessor后置处理器     * Spring http client bean post processor spring http client bean post processor.     *     * @param soulSpringMvcConfig the soul http config     * @return the spring http client bean post processor     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SpringMvcClientBeanPostProcessor</span> <span class="token function">springHttpClientBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SoulSpringMvcConfig</span> soulSpringMvcConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpringMvcClientBeanPostProcessor</span><span class="token punctuation">(</span>soulSpringMvcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 读取应用端配置     * Soul http config soul http config.     *     * @return the soul http config     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"soul.http"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SoulSpringMvcConfig</span> <span class="token function">soulHttpConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SoulSpringMvcConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringMvcClientBeanPostProcessor后置处理器进行Bean扫描并提交注册任务到线程池</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMvcClientBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> executorService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SoulSpringMvcConfig</span> soulSpringMvcConfig<span class="token punctuation">;</span>    <span class="token comment">/**     * 1、校验配置是否合法     * 2、实例化一个线程池,后续用来多线程注册代理接口     * Instantiates a new Soul client bean post processor.     *     * @param soulSpringMvcConfig the soul spring mvc config     */</span>    <span class="token keyword">public</span> <span class="token class-name">SpringMvcClientBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SoulSpringMvcConfig</span> soulSpringMvcConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ValidateUtils</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>soulSpringMvcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>soulSpringMvcConfig <span class="token operator">=</span> soulSpringMvcConfig<span class="token punctuation">;</span>        url <span class="token operator">=</span> soulSpringMvcConfig<span class="token punctuation">.</span><span class="token function">getAdminUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/soul-client/springmvc-register"</span><span class="token punctuation">;</span>        executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 1、扫描配置     * 2、注册代理接口     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>        <span class="token comment">// isFull = true 表示代理整个应用，isFull = false 表示只代理一部分</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>soulSpringMvcConfig<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 扫描Controller注解</span>        <span class="token class-name">Controller</span> controller <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 扫描RestController注解</span>        <span class="token class-name">RestController</span> restController <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 扫描RequestMapping注解</span>        <span class="token class-name">RequestMapping</span> requestMapping <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>controller <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> restController <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> requestMapping <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 扫描xxController类上SoulSpringMvcClient注解</span>            <span class="token class-name">SoulSpringMvcClient</span> clazzAnnotation <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SoulSpringMvcClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> prePath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>clazzAnnotation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clazzAnnotation<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> finalPrePath <span class="token operator">=</span> prePath<span class="token punctuation">;</span>                    <span class="token comment">// 提交注册任务到线程池,由线程池请求soul-admin进行注册</span>                    executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">RegisterUtils</span><span class="token punctuation">.</span><span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token function">buildJsonParams</span><span class="token punctuation">(</span>clazzAnnotation<span class="token punctuation">,</span> finalPrePath<span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span>                            <span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                prePath <span class="token operator">=</span> clazzAnnotation<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">getUniqueDeclaredMethods</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 扫描xxController方法上的SoulSpringMvcClient注解</span>                <span class="token class-name">SoulSpringMvcClient</span> soulSpringMvcClient <span class="token operator">=</span> <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token class-name">SoulSpringMvcClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>soulSpringMvcClient<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> finalPrePath <span class="token operator">=</span> prePath<span class="token punctuation">;</span>                    <span class="token comment">// 提交注册任务到线程池,由线程池请求soul-admin进行注册</span>                    executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">RegisterUtils</span><span class="token punctuation">.</span><span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token function">buildJsonParams</span><span class="token punctuation">(</span>soulSpringMvcClient<span class="token punctuation">,</span> finalPrePath<span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span>                            <span class="token class-name">RpcTypeEnum</span><span class="token punctuation">.</span><span class="token constant">HTTP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终委托给了RegisterUtils工具类通过OkHttpTools发送http请求注册到了soul-admin</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RegisterUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RegisterUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * call register api.     *     * @param json        request body     * @param url         url     * @param rpcTypeEnum rcp type     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> json<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">RpcTypeEnum</span> rpcTypeEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">OkHttpTools</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AdminConstants</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} client register success: {} "</span><span class="token punctuation">,</span> rpcTypeEnum<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{} client register error: {} "</span><span class="token punctuation">,</span> rpcTypeEnum<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"cannot register soul admin param, url: {}, request body: {}"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> json<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，http方式注册就算完成。</p>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Soul网关集成SpringMvc</title>
      <link href="/2021/01/14/soul/soul-http-run/"/>
      <url>/2021/01/14/soul/soul-http-run/</url>
      
        <content type="html"><![CDATA[<ul><li>fork soul仓库<a href="https://github.com/dromara/soul">https://github.com/dromara/soul</a></li><li>导入idea后直接打包安装，可跳过文档和测试用例</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean package <span class="token function">install</span> <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true <span class="token parameter variable">-Dmaven.javadoc.skip</span><span class="token operator">=</span>true <span class="token parameter variable">-Drat.skip</span><span class="token operator">=</span>true <span class="token parameter variable">-Dcheckstyle.skip</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动网关soul-boostrap，运行SoulAdminBootstrap后可打开<a href="http://localhost:9095/%E8%BF%9B%E8%A1%8C%E7%AE%A1%E7%90%86">http://localhost:9095/进行管理</a></li></ul><p><img src="/medias/assets/soul//20210114235037-q1zyi31-%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210114235019.png"></p><ul><li><p>启动管理端soul-admin，运行SoulAdminBootstrap</p></li><li><p>导入soul-example,运行soul-examples-http里的SoulTestHttpApplication</p></li><li><p>测试通过网关访问soul-examples-http的接口</p></li></ul><p><img src="/medias/assets/soul//20210114234931-s23j5eq-test.png"></p><ul><li>至此，基于http方式来使用soul网关就已经正常使用了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soul </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
